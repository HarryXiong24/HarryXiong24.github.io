(window.webpackJsonp=window.webpackJsonp||[]).push([[98],{706:function(t,e,l){"use strict";l.r(e);var v=l(1),i=Object(v.a)({},(function(){var t=this,e=t.$createElement,l=t._self._c||e;return l("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[l("h2",{attrs:{id:"过滤器"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#过滤器"}},[t._v("#")]),t._v(" 过滤器")]),t._v(" "),l("h3",{attrs:{id:"_9-1-概念"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-概念"}},[t._v("#")]),t._v(" 9.1 概念")]),t._v(" "),l("p",[t._v("Servlet 过滤器可以动态地拦截请求和响应，以变换或使用包含在请求或响应中的信息。")]),t._v(" "),l("p",[t._v("可以将一个或多个 Servlet 过滤器附加到一个 Servlet 或一组 Servlet。Servlet 过滤器也可以附加到 JavaServer Pages (JSP) 文件和 HTML 页面。调用 Servlet 前调用所有附加的 Servlet 过滤器。")]),t._v(" "),l("p",[t._v("Servlet 过滤器是可用于 Servlet 编程的 Java 类，可以实现以下目的：")]),t._v(" "),l("ul",[l("li",[t._v("在客户端的请求访问后端资源之前，拦截这些请求。")]),t._v(" "),l("li",[t._v("在服务器的响应发送回客户端之前，处理这些响应。")])]),t._v(" "),l("p",[t._v("根据规范建议的各种类型的过滤器：")]),t._v(" "),l("ul",[l("li",[t._v("身份验证过滤器（Authentication Filters）。")]),t._v(" "),l("li",[t._v("数据压缩过滤器（Data compression Filters）。")]),t._v(" "),l("li",[t._v("加密过滤器（Encryption Filters）。")]),t._v(" "),l("li",[t._v("触发资源访问事件过滤器。")]),t._v(" "),l("li",[t._v("图像转换过滤器（Image Conversion Filters）。")]),t._v(" "),l("li",[t._v("日志记录和审核过滤器（Logging and Auditing Filters）。")]),t._v(" "),l("li",[t._v("MIME-TYPE 链过滤器（MIME-TYPE Chain Filters）。")]),t._v(" "),l("li",[t._v("标记化过滤器（Tokenizing Filters）。")]),t._v(" "),l("li",[t._v("XSL/T 过滤器（XSL/T Filters），转换 XML 内容。")])]),t._v(" "),l("p",[t._v("过滤器通过 Web 部署描述符（web.xml）中的 XML 标签来声明，然后映射到您的应用程序的部署描述符中的 Servlet 名称或 URL 模式。")]),t._v(" "),l("p",[t._v("当 Web 容器启动 Web 应用程序时，它会为您在部署描述符中声明的每一个过滤器创建一个实例。")]),t._v(" "),l("p",[t._v("Filter的执行顺序与在web.xml配置文件中的配置顺序一致，一般把Filter配置在所有的Servlet之前。")]),t._v(" "),l("h3",{attrs:{id:"_9-2-使用"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-使用"}},[t._v("#")]),t._v(" 9.2 使用")]),t._v(" "),l("p",[l("strong",[t._v("编写Filter")]),t._v("\n编写java类实现Filter接口，并实现其doFilter方法。")]),t._v(" "),l("p",[l("strong",[t._v("设置Filter")]),t._v("\n使用注解：@WebFilter\n在 web.xml 文件中使用"),l("code",[t._v("<filter>")]),t._v("和"),l("code",[t._v("<filter-mapping>")]),t._v("元素对编写的filter类进行注册，并设置它所能拦截的资源。")]),t._v(" "),l("h3",{attrs:{id:"_9-3-servlet-过滤器方法"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_9-3-servlet-过滤器方法"}},[t._v("#")]),t._v(" 9.3 Servlet 过滤器方法")]),t._v(" "),l("p",[t._v("过滤器是一个实现了 javax.servlet.Filter 接口的 Java 类。javax.servlet.Filter 接口定义了三个方法：")]),t._v(" "),l("table",[l("thead",[l("tr",[l("th",{staticStyle:{"text-align":"left"}},[t._v("序号")]),t._v(" "),l("th",{staticStyle:{"text-align":"left"}},[t._v("方法 & 描述")])])]),t._v(" "),l("tbody",[l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("strong",[t._v("public void doFilter (ServletRequest, ServletResponse, FilterChain)")]),t._v(" 该方法完成实际的过滤操作，当客户端请求方法与过滤器设置匹配的URL时，Servlet容器将先调用过滤器的doFilter方法。FilterChain用户访问后续过滤器。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("2")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("strong",[t._v("public void init(FilterConfig filterConfig)")]),t._v(" web 应用程序启动时，web 服务器将创建Filter 的实例对象，并调用其init方法，读取web.xml配置，完成对象的初始化功能，从而为后续的用户请求作好拦截的准备工作（filter对象只会创建一次，init方法也只会执行一次）。开发人员通过init方法的参数，可获得代表当前filter配置信息的FilterConfig对象。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("strong",[t._v("public void destroy()")]),t._v(" Servlet容器在销毁过滤器实例前调用该方法，在该方法中释放Servlet过滤器占用的资源。")])])])])])}),[],!1,null,null,null);e.default=i.exports}}]);