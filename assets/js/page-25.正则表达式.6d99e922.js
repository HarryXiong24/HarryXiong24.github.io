(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{797:function(s,t,a){"use strict";a.r(t);var n=a(1),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"正则表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[s._v("#")]),s._v(" 正则表达式")]),s._v(" "),a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[s._v("#")]),s._v(" 概述")]),s._v(" "),a("p",[s._v("正则表达式（regular expression）是一种表达文本模式（即字符串结构）的方法，有点像字符串的模板，常常用来按照“给定模式”匹配文本。比如，正则表达式给出一个 Email 地址的模式，然后用它来确定一个字符串是否为 Email 地址。JavaScript 的正则表达式体系是参照 Perl 5 建立的。")]),s._v(" "),a("p",[s._v("新建正则表达式有两种方法。一种是使用字面量，以斜杠表示开始和结束。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/xyz/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("另一种是使用"),a("code",[s._v("RegExp")]),s._v("构造函数。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'xyz'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面两种写法是等价的，都新建了一个内容为"),a("code",[s._v("xyz")]),s._v("的正则表达式对象。它们的主要区别是，第一种方法在引擎编译代码时，就会新建正则表达式，第二种方法在运行时新建正则表达式，所以前者的效率较高。而且，前者比较便利和直观，所以实际应用中，基本上都采用字面量定义正则表达式。")]),s._v(" "),a("p",[a("code",[s._v("RegExp")]),s._v("构造函数还可以接受第二个参数，表示修饰符（详细解释见下文）。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'xyz'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'i'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等价于")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/xyz/i")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("上面代码中，正则表达式"),a("code",[s._v("/xyz/")]),s._v("有一个修饰符"),a("code",[s._v("i")]),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"regexp-构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regexp-构造函数"}},[s._v("#")]),s._v(" RegExp 构造函数")]),s._v(" "),a("p",[s._v("在 ES5 中，"),a("code",[s._v("RegExp")]),s._v("构造函数的参数有两种情况。")]),s._v(" "),a("p",[s._v("第一种情况是，参数是字符串，这时第二个参数表示正则表达式的修饰符（flag）。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'xyz'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'i'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等价于")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/xyz/i")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("第二种情况是，参数是一个正则表示式，这时会返回一个原有正则表达式的拷贝。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/xyz/i")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等价于")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/xyz/i")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("但是，ES5 不允许此时使用第二个参数添加修饰符，否则会报错。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/xyz/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'i'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Uncaught TypeError: Cannot supply flags when constructing one RegExp from another")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("ES6 改变了这种行为。如果"),a("code",[s._v("RegExp")]),s._v("构造函数第一个参数是一个正则对象，那么可以使用第二个参数指定修饰符。而且，返回的正则表达式会忽略原有的正则表达式的修饰符，只使用新指定的修饰符。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/abc/ig")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'i'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("flags\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "i"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码中，原有正则对象的修饰符是"),a("code",[s._v("ig")]),s._v("，它会被第二个参数"),a("code",[s._v("i")]),s._v("覆盖。")]),s._v(" "),a("h2",{attrs:{id:"实例属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例属性"}},[s._v("#")]),s._v(" 实例属性")]),s._v(" "),a("p",[s._v("正则对象的实例属性分成两类。")]),s._v(" "),a("p",[s._v("一类是修饰符相关，用于了解设置了什么修饰符。")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("RegExp.prototype.ignoreCase")]),s._v("：返回一个布尔值，表示是否设置了"),a("code",[s._v("i")]),s._v("修饰符。")]),s._v(" "),a("li",[a("code",[s._v("RegExp.prototype.global")]),s._v("：返回一个布尔值，表示是否设置了"),a("code",[s._v("g")]),s._v("修饰符。")]),s._v(" "),a("li",[a("code",[s._v("RegExp.prototype.multiline")]),s._v("：返回一个布尔值，表示是否设置了"),a("code",[s._v("m")]),s._v("修饰符。")]),s._v(" "),a("li",[a("code",[s._v("RegExp.prototype.flags")]),s._v("：返回一个字符串，包含了已经设置的所有修饰符，按字母排序。")])]),s._v(" "),a("p",[s._v("上面四个属性都是只读的。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/abc/igm")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ignoreCase "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\nr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("global "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\nr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("multiline "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\nr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("flags "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 'gim'")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("另一类是与修饰符无关的属性，主要是下面两个。")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("RegExp.prototype.lastIndex")]),s._v("：返回一个整数，表示下一次开始搜索的位置。该属性可读写，但是只在进行连续搜索时有意义，详细介绍请看后文。")]),s._v(" "),a("li",[a("code",[s._v("RegExp.prototype.source")]),s._v("：返回正则表达式的字符串形式（不包括反斜杠），该属性只读。")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/abc/igm")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lastIndex "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 0")]),s._v("\nr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("source "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "abc"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"实例方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例方法"}},[s._v("#")]),s._v(" 实例方法")]),s._v(" "),a("h3",{attrs:{id:"regexp-prototype-test"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-test"}},[s._v("#")]),s._v(" RegExp.prototype.test()")]),s._v(" "),a("p",[s._v("正则实例对象的"),a("code",[s._v("test")]),s._v("方法返回一个布尔值，表示当前模式是否能匹配参数字符串。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/cat/.test('cats and dogs') // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面代码验证参数字符串之中是否包含"),a("code",[s._v("cat")]),s._v("，结果返回"),a("code",[s._v("true")]),s._v("。")]),s._v(" "),a("p",[s._v("如果正则表达式带有"),a("code",[s._v("g")]),s._v("修饰符，则每一次"),a("code",[s._v("test")]),s._v("方法都从上一次结束的位置开始向后匹配。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/x/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'_x_x'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lastIndex "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 0")]),s._v("\nr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n\nr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lastIndex "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2")]),s._v("\nr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n\nr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lastIndex "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 4")]),s._v("\nr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("上面代码的正则表达式使用了"),a("code",[s._v("g")]),s._v("修饰符，表示是全局搜索，会有多个结果。接着，三次使用"),a("code",[s._v("test")]),s._v("方法，每一次开始搜索的位置都是上一次匹配的后一个位置。")]),s._v(" "),a("p",[s._v("带有"),a("code",[s._v("g")]),s._v("修饰符时，可以通过正则对象的"),a("code",[s._v("lastIndex")]),s._v("属性指定开始搜索的位置。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/x/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'_x_x'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lastIndex "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n\nr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lastIndex "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 0")]),s._v("\nr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("上面代码指定从字符串的第五个位置开始搜索，这个位置为空，所以返回"),a("code",[s._v("false")]),s._v("。同时，"),a("code",[s._v("lastIndex")]),s._v("属性重置为"),a("code",[s._v("0")]),s._v("，所以第二次执行"),a("code",[s._v("r.test(s)")]),s._v("会返回"),a("code",[s._v("true")]),s._v("。")]),s._v(" "),a("p",[s._v("注意，带有"),a("code",[s._v("g")]),s._v("修饰符时，正则表达式内部会记住上一次的"),a("code",[s._v("lastIndex")]),s._v("属性，这时不应该更换所要匹配的字符串，否则会有一些难以察觉的错误。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/bb/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'bb'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\nr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'-bb-'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("上面代码中，由于正则表达式"),a("code",[s._v("r")]),s._v("是从上一次的"),a("code",[s._v("lastIndex")]),s._v("位置开始匹配，导致第二次执行"),a("code",[s._v("test")]),s._v("方法时出现预期以外的结果。")]),s._v(" "),a("p",[a("code",[s._v("lastIndex")]),s._v("属性只对同一个正则表达式有效，所以下面这样写是错误的。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/a/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'babaa'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" count"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码会导致无限循环，因为"),a("code",[s._v("while")]),s._v("循环的每次匹配条件都是一个新的正则表达式，导致"),a("code",[s._v("lastIndex")]),s._v("属性总是等于0。")]),s._v(" "),a("p",[s._v("如果正则模式是一个空字符串，则匹配所有字符串。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"regexp-prototype-exec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-exec"}},[s._v("#")]),s._v(" RegExp.prototype.exec()")]),s._v(" "),a("p",[s._v("正则实例对象的"),a("code",[s._v("exec()")]),s._v("方法，用来返回匹配结果。如果发现匹配，就返回一个数组，成员是匹配成功的子字符串，否则返回"),a("code",[s._v("null")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'_x_x'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/x/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/y/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nr1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["x"]')]),s._v("\nr2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// null")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("上面代码中，正则对象"),a("code",[s._v("r1")]),s._v("匹配成功，返回一个数组，成员是匹配结果；正则对象"),a("code",[s._v("r2")]),s._v("匹配失败，返回"),a("code",[s._v("null")]),s._v("。")]),s._v(" "),a("p",[s._v("如果正则表示式包含圆括号（即含有“组匹配”），则返回的数组会包括多个成员。第一个成员是整个匹配成功的结果，后面的成员就是圆括号对应的匹配成功的组。也就是说，第二个成员对应第一个括号，第三个成员对应第二个括号，以此类推。整个数组的"),a("code",[s._v("length")]),s._v("属性等于组匹配的数量再加1。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'_x_x'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/_(x)/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["_x", "x"]')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("上面代码的"),a("code",[s._v("exec()")]),s._v("方法，返回一个数组。第一个成员是整个匹配的结果，第二个成员是圆括号匹配的结果。")]),s._v(" "),a("p",[a("code",[s._v("exec()")]),s._v("方法的返回数组还包含以下两个属性：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("input")]),s._v("：整个原字符串。")]),s._v(" "),a("li",[a("code",[s._v("index")]),s._v("：模式匹配成功的开始位置（从0开始计数）。")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/a(b+)a/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'_abbba_aba_'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\narr "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["abbba", "bbb"]')]),s._v("\n\narr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("index "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1")]),s._v("\narr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("input "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "_abbba_aba_"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("上面代码中的"),a("code",[s._v("index")]),s._v("属性等于1，是因为从原字符串的第二个位置开始匹配成功。")]),s._v(" "),a("p",[s._v("如果正则表达式加上"),a("code",[s._v("g")]),s._v("修饰符，则可以使用多次"),a("code",[s._v("exec()")]),s._v("方法，下一次搜索的位置从上一次匹配成功结束的位置开始。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/a/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'abc_abc_abc'")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nr1 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["a"]')]),s._v("\nr1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("index "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 0")]),s._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lastIndex "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nr2 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["a"]')]),s._v("\nr2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("index "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 4")]),s._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lastIndex "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 5")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nr3 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["a"]')]),s._v("\nr3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("index "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 8")]),s._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lastIndex "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 9")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nr4 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// null")]),s._v("\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lastIndex "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("p",[s._v("上面代码连续用了四次"),a("code",[s._v("exec()")]),s._v("方法，前三次都是从上一次匹配结束的位置向后匹配。当第三次匹配结束以后，整个字符串已经到达尾部，匹配结果返回"),a("code",[s._v("null")]),s._v("，正则实例对象的"),a("code",[s._v("lastIndex")]),s._v("属性也重置为"),a("code",[s._v("0")]),s._v("，意味着第四次匹配将从头开始。")]),s._v(" "),a("p",[s._v("利用"),a("code",[s._v("g")]),s._v("修饰符允许多次匹配的特点，可以用一个循环完成全部匹配。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/a/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'abc_abc_abc'")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" match "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'#'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("index "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("':'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// #0:a")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// #4:a")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// #8:a")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("上面代码中，只要"),a("code",[s._v("exec()")]),s._v("方法不返回"),a("code",[s._v("null")]),s._v("，就会一直循环下去，每次输出匹配的位置和匹配的文本。")]),s._v(" "),a("p",[s._v("正则实例对象的"),a("code",[s._v("lastIndex")]),s._v("属性不仅可读，还可写。设置了"),a("code",[s._v("g")]),s._v("修饰符的时候，只要手动设置了"),a("code",[s._v("lastIndex")]),s._v("的值，就会从指定位置开始匹配。")]),s._v(" "),a("h2",{attrs:{id:"字符串的实例方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串的实例方法"}},[s._v("#")]),s._v(" 字符串的实例方法")]),s._v(" "),a("h3",{attrs:{id:"概述-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述-2"}},[s._v("#")]),s._v(" 概述")]),s._v(" "),a("p",[s._v("字符串的实例方法之中，有4种与正则表达式有关。")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("String.prototype.match()")]),s._v("：返回一个数组，成员是所有匹配的子字符串。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("String.prototype.search()")]),s._v("：按照给定的正则表达式进行搜索，返回一个整数，表示匹配开始的位置。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("String.prototype.replace()")]),s._v("：按照给定的正则表达式进行替换，返回替换后的字符串。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("String.prototype.split()")]),s._v("：按照给定规则进行字符串分割，返回一个数组，包含分割后的各个成员。")])])]),s._v(" "),a("p",[s._v("ES6 出现之前，字符串对象共有 4 个方法，可以使用正则表达式："),a("code",[s._v("match()")]),s._v("、"),a("code",[s._v("replace()")]),s._v("、"),a("code",[s._v("search()")]),s._v("和"),a("code",[s._v("split()")]),s._v("。")]),s._v(" "),a("p",[s._v("ES6 将这 4 个方法，在语言内部全部调用"),a("code",[s._v("RegExp")]),s._v("的实例方法，从而做到所有与正则相关的方法，全都定义在"),a("code",[s._v("RegExp")]),s._v("对象上。")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("String.prototype.match")]),s._v(" 调用 "),a("code",[s._v("RegExp.prototype[Symbol.match]")])]),s._v(" "),a("li",[a("code",[s._v("String.prototype.replace")]),s._v(" 调用 "),a("code",[s._v("RegExp.prototype[Symbol.replace]")])]),s._v(" "),a("li",[a("code",[s._v("String.prototype.search")]),s._v(" 调用 "),a("code",[s._v("RegExp.prototype[Symbol.search]")])]),s._v(" "),a("li",[a("code",[s._v("String.prototype.split")]),s._v(" 调用 "),a("code",[s._v("RegExp.prototype[Symbol.split]")])])]),s._v(" "),a("h3",{attrs:{id:"string-prototype-match"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-match"}},[s._v("#")]),s._v(" String.prototype.match()")]),s._v(" "),a("p",[s._v("字符串实例对象的"),a("code",[s._v("match")]),s._v("方法对字符串进行正则匹配，返回匹配结果。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var s = '_x_x';\nvar r1 = /x/;\nvar r2 = /y/;\n\ns.match(r1) // [\"x\"]\ns.match(r2) // null\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("从上面代码可以看到，字符串的"),a("code",[s._v("match")]),s._v("方法与正则对象的"),a("code",[s._v("exec")]),s._v("方法非常类似：匹配成功返回一个数组，匹配失败返回"),a("code",[s._v("null")]),s._v("。")]),s._v(" "),a("p",[s._v("如果正则表达式带有"),a("code",[s._v("g")]),s._v("修饰符，则该方法与正则对象的"),a("code",[s._v("exec")]),s._v("方法行为不同，会一次性返回所有匹配成功的结果。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var s = \'abba\';\nvar r = /a/g;\n\ns.match(r) // ["a", "a"]\nr.exec(s) // ["a"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("设置正则表达式的"),a("code",[s._v("lastIndex")]),s._v("属性，对"),a("code",[s._v("match")]),s._v("方法无效，匹配总是从字符串的第一个字符开始。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var r = /a|b/g;\nr.lastIndex = 7;\n'xaxb'.match(r) // ['a', 'b']\nr.lastIndex // 0\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("上面代码表示，设置正则对象的"),a("code",[s._v("lastIndex")]),s._v("属性是无效的。")]),s._v(" "),a("h3",{attrs:{id:"string-prototype-search"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-search"}},[s._v("#")]),s._v(" String.prototype.search()")]),s._v(" "),a("p",[s._v("字符串对象的"),a("code",[s._v("search")]),s._v("方法，返回第一个满足条件的匹配结果在整个字符串中的位置。如果没有任何匹配，则返回"),a("code",[s._v("-1")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("'_x_x'.search(/x/)\n// 1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码中，第一个匹配结果出现在字符串的"),a("code",[s._v("1")]),s._v("号位置。")]),s._v(" "),a("h3",{attrs:{id:"string-prototype-replace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-replace"}},[s._v("#")]),s._v(" String.prototype.replace()")]),s._v(" "),a("p",[s._v("字符串对象的"),a("code",[s._v("replace")]),s._v("方法可以替换匹配的值。它接受两个参数，第一个是正则表达式，表示搜索模式，第二个是替换的内容。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("str.replace(search, replacement)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("正则表达式如果不加"),a("code",[s._v("g")]),s._v("修饰符，就替换第一个匹配成功的值，否则替换所有匹配成功的值。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("'aaa'.replace('a', 'b') // \"baa\"\n'aaa'.replace(/a/, 'b') // \"baa\"\n'aaa'.replace(/a/g, 'b') // \"bbb\"\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("上面代码中，最后一个正则表达式使用了"),a("code",[s._v("g")]),s._v("修饰符，导致所有的"),a("code",[s._v("a")]),s._v("都被替换掉了。")]),s._v(" "),a("p",[a("code",[s._v("replace")]),s._v("方法的一个应用，就是消除字符串首尾两端的空格。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var str = '  #id div.class  ';\n\nstr.replace(/^\\s+|\\s+$/g, '')\n// \"#id div.class\"\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("code",[s._v("replace")]),s._v("方法的第二个参数可以使用美元符号"),a("code",[s._v("$")]),s._v("，用来指代所替换的内容。")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("$&")]),s._v("：匹配的子字符串。")]),s._v(" "),a("li",[s._v("`$``：匹配结果前面的文本。")]),s._v(" "),a("li",[a("code",[s._v("$'")]),s._v("：匹配结果后面的文本。")]),s._v(" "),a("li",[a("code",[s._v("$n")]),s._v("：匹配成功的第"),a("code",[s._v("n")]),s._v("组内容，"),a("code",[s._v("n")]),s._v("是从1开始的自然数。")]),s._v(" "),a("li",[a("code",[s._v("$$")]),s._v("：指代美元符号"),a("code",[s._v("$")]),s._v("。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("'hello world'.replace(/(\\w+)\\s(\\w+)/, '$2 $1')\n// \"world hello\"\n\n'abc'.replace('b', '[$`-$&-$\\']')\n// \"a[a-b-c]c\"\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("上面代码中，第一个例子是将匹配的组互换位置，第二个例子是改写匹配的值。")]),s._v(" "),a("p",[a("code",[s._v("replace")]),s._v("方法的第二个参数还可以是一个函数，将每一个匹配内容替换为函数返回值。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("'3 and 5'.replace(/[0-9]+/g, function (match) {\n  return 2 * match;\n})\n// \"6 and 10\"\n\nvar a = 'The quick brown fox jumped over the lazy dog.';\nvar pattern = /quick|brown|lazy/ig;\n\na.replace(pattern, function replacer(match) {\n  return match.toUpperCase();\n});\n// The QUICK BROWN fox jumped over the LAZY dog.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("作为"),a("code",[s._v("replace")]),s._v("方法第二个参数的替换函数，可以接受多个参数。其中，第一个参数是捕捉到的内容，第二个参数是捕捉到的组匹配（有多少个组匹配，就有多少个对应的参数）。此外，最后还可以添加两个参数，倒数第二个参数是捕捉到的内容在整个字符串中的位置（比如从第五个位置开始），最后一个参数是原字符串。下面是一个网页模板替换的例子。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var prices = {\n  'p1': '$1.99',\n  'p2': '$9.99',\n  'p3': '$5.00'\n};\n\nvar template = '<span id=\"p1\"></span>'\n  + '<span id=\"p2\"></span>'\n  + '<span id=\"p3\"></span>';\n\ntemplate.replace(\n  /(<span id=\")(.*?)(\">)(<\\/span>)/g,\n  function(match, $1, $2, $3, $4){\n    return $1 + $2 + $3 + prices[$2] + $4;\n  }\n);\n// \"<span id=\"p1\">$1.99</span><span id=\"p2\">$9.99</span><span id=\"p3\">$5.00</span>\"\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("上面代码的捕捉模式中，有四个括号，所以会产生四个组匹配，在匹配函数中用"),a("code",[s._v("$1")]),s._v("到"),a("code",[s._v("$4")]),s._v("表示。匹配函数的作用是将价格插入模板中。")]),s._v(" "),a("h3",{attrs:{id:"string-prototype-split"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-split"}},[s._v("#")]),s._v(" String.prototype.split()")]),s._v(" "),a("p",[s._v("字符串对象的"),a("code",[s._v("split")]),s._v("方法按照正则规则分割字符串，返回一个由分割后的各个部分组成的数组。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("str.split(separator, [limit])\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("该方法接受两个参数，第一个参数是正则表达式，表示分隔规则，第二个参数是返回数组的最大成员数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 非正则分隔\n'a,  b,c, d'.split(',')\n// [ 'a', '  b', 'c', ' d' ]\n\n// 正则分隔，去除多余的空格\n'a,  b,c, d'.split(/, */)\n// [ 'a', 'b', 'c', 'd' ]\n\n// 指定返回数组的最大成员\n'a,  b,c, d'.split(/, */, 2)\n[ 'a', 'b' ]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("上面代码使用正则表达式，去除了子字符串的逗号后面的空格。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 例一\n'aaa*a*'.split(/a*/)\n// [ '', '*', '*' ]\n\n// 例二\n'aaa**a*'.split(/a*/)\n// [\"\", \"*\", \"*\", \"*\"]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("上面代码的分割规则是0次或多次的"),a("code",[s._v("a")]),s._v("，由于正则默认是贪婪匹配，所以例一的第一个分隔符是"),a("code",[s._v("aaa")]),s._v("，第二个分割符是"),a("code",[s._v("a")]),s._v("，将字符串分成三个部分，包含开始处的空字符串。例二的第一个分隔符是"),a("code",[s._v("aaa")]),s._v("，第二个分隔符是0个"),a("code",[s._v("a")]),s._v("（即空字符），第三个分隔符是"),a("code",[s._v("a")]),s._v("，所以将字符串分成四个部分。")]),s._v(" "),a("p",[s._v("如果正则表达式带有括号，则括号匹配的部分也会作为数组成员返回。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("'aaa*a*'.split(/(a*)/)\n// [ '', 'aaa', '*', 'a', '*' ]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码的正则表达式使用了括号，第一个组匹配是"),a("code",[s._v("aaa")]),s._v("，第二个组匹配是"),a("code",[s._v("a")]),s._v("，它们都作为数组成员返回。")]),s._v(" "),a("h2",{attrs:{id:"匹配规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匹配规则"}},[s._v("#")]),s._v(" 匹配规则")]),s._v(" "),a("p",[s._v("正则表达式的规则很复杂，下面一一介绍这些规则。")]),s._v(" "),a("h3",{attrs:{id:"字面量字符和元字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字面量字符和元字符"}},[s._v("#")]),s._v(" 字面量字符和元字符")]),s._v(" "),a("p",[s._v("大部分字符在正则表达式中，就是字面的含义，比如"),a("code",[s._v("/a/")]),s._v("匹配"),a("code",[s._v("a")]),s._v("，"),a("code",[s._v("/b/")]),s._v("匹配"),a("code",[s._v("b")]),s._v("。如果在正则表达式之中，某个字符只表示它字面的含义（就像前面的"),a("code",[s._v("a")]),s._v("和"),a("code",[s._v("b")]),s._v("），那么它们就叫做“字面量字符”（literal characters）。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/dog/.test('old dog') // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面代码中正则表达式的"),a("code",[s._v("dog")]),s._v("，就是字面量字符，所以"),a("code",[s._v("/dog/")]),s._v("匹配"),a("code",[s._v("old dog")]),s._v("，因为它就表示"),a("code",[s._v("d")]),s._v("、"),a("code",[s._v("o")]),s._v("、"),a("code",[s._v("g")]),s._v("三个字母连在一起。")]),s._v(" "),a("p",[s._v("除了字面量字符以外，还有一部分字符有特殊含义，不代表字面的意思。它们叫做“元字符”（metacharacters），主要有以下几个。")]),s._v(" "),a("p",[a("strong",[s._v("（1）点字符（.)")])]),s._v(" "),a("p",[s._v("点字符（"),a("code",[s._v(".")]),s._v("）匹配除回车（"),a("code",[s._v("\\r")]),s._v("）、换行("),a("code",[s._v("\\n")]),s._v(") 、行分隔符（"),a("code",[s._v("\\u2028")]),s._v("）和段分隔符（"),a("code",[s._v("\\u2029")]),s._v("）以外的所有字符。注意，对于码点大于"),a("code",[s._v("0xFFFF")]),s._v("字符，点字符不能正确匹配，会认为这是两个字符。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/c.t/\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("c.t")]),s._v("匹配"),a("code",[s._v("c")]),s._v("和"),a("code",[s._v("t")]),s._v("之间包含任意一个字符的情况，只要这三个字符在同一行，比如"),a("code",[s._v("cat")]),s._v("、"),a("code",[s._v("c2t")]),s._v("、"),a("code",[s._v("c-t")]),s._v("等等，但是不匹配"),a("code",[s._v("coot")]),s._v("。")]),s._v(" "),a("p",[a("strong",[s._v("（2）位置字符")])]),s._v(" "),a("p",[s._v("位置字符用来提示字符所处的位置，主要有两个字符。")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("^")]),s._v(" 表示字符串的开始位置")]),s._v(" "),a("li",[a("code",[s._v("$")]),s._v(" 表示字符串的结束位置")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// test必须出现在开始位置\n/^test/.test('test123') // true\n\n// test必须出现在结束位置\n/test$/.test('new test') // true\n\n// 从开始位置到结束位置只有test\n/^test$/.test('test') // true\n/^test$/.test('test test') // false\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[a("strong",[s._v("（3）选择符（"),a("code",[s._v("|")]),s._v("）")])]),s._v(" "),a("p",[s._v("竖线符号（"),a("code",[s._v("|")]),s._v("）在正则表达式中表示“或关系”（OR），即"),a("code",[s._v("cat|dog")]),s._v("表示匹配"),a("code",[s._v("cat")]),s._v("或"),a("code",[s._v("dog")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/11|22/.test('911') // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面代码中，正则表达式指定必须匹配"),a("code",[s._v("11")]),s._v("或"),a("code",[s._v("22")]),s._v("。")]),s._v(" "),a("p",[s._v("多个选择符可以联合使用。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 匹配fred、barney、betty之中的一个\n/fred|barney|betty/\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("选择符会包括它前后的多个字符，比如"),a("code",[s._v("/ab|cd/")]),s._v("指的是匹配"),a("code",[s._v("ab")]),s._v("或者"),a("code",[s._v("cd")]),s._v("，而不是指匹配"),a("code",[s._v("b")]),s._v("或者"),a("code",[s._v("c")]),s._v("。如果想修改这个行为，可以使用圆括号。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/a( |\\t)b/.test('a\\tb') // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面代码指的是，"),a("code",[s._v("a")]),s._v("和"),a("code",[s._v("b")]),s._v("之间有一个空格或者一个制表符。")]),s._v(" "),a("p",[s._v("其他的元字符还包括"),a("code",[s._v("\\")]),s._v("、"),a("code",[s._v("*")]),s._v("、"),a("code",[s._v("+")]),s._v("、"),a("code",[s._v("?")]),s._v("、"),a("code",[s._v("()")]),s._v("、"),a("code",[s._v("[]")]),s._v("、"),a("code",[s._v("{}")]),s._v("等，将在下文解释。")]),s._v(" "),a("h3",{attrs:{id:"转义符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转义符"}},[s._v("#")]),s._v(" 转义符")]),s._v(" "),a("p",[s._v("正则表达式中那些有特殊含义的元字符，如果要匹配它们本身，就需要在它们前面要加上反斜杠。比如要匹配"),a("code",[s._v("+")]),s._v("，就要写成"),a("code",[s._v("\\+")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/1+1/.test('1+1')\n// false\n\n/1\\+1/.test('1+1')\n// true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("上面代码中，第一个正则表达式之所以不匹配，因为加号是元字符，不代表自身。第二个正则表达式使用反斜杠对加号转义，就能匹配成功。")]),s._v(" "),a("p",[s._v("正则表达式中，需要反斜杠转义的，一共有12个字符："),a("code",[s._v("^")]),s._v("、"),a("code",[s._v(".")]),s._v("、"),a("code",[s._v("[")]),s._v("、"),a("code",[s._v("$")]),s._v("、"),a("code",[s._v("(")]),s._v("、"),a("code",[s._v(")")]),s._v("、"),a("code",[s._v("|")]),s._v("、"),a("code",[s._v("*")]),s._v("、"),a("code",[s._v("+")]),s._v("、"),a("code",[s._v("?")]),s._v("、"),a("code",[s._v("{")]),s._v("和"),a("code",[s._v("\\")]),s._v("。需要特别注意的是，如果使用"),a("code",[s._v("RegExp")]),s._v("方法生成正则对象，转义需要使用两个斜杠，因为字符串内部会先转义一次。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("(new RegExp('1\\+1')).test('1+1')\n// false\n\n(new RegExp('1\\\\+1')).test('1+1')\n// true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("RegExp")]),s._v("作为构造函数，参数是一个字符串。但是，在字符串内部，反斜杠也是转义字符，所以它会先被反斜杠转义一次，然后再被正则表达式转义一次，因此需要两个反斜杠转义。")]),s._v(" "),a("h3",{attrs:{id:"特殊字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊字符"}},[s._v("#")]),s._v(" 特殊字符")]),s._v(" "),a("p",[s._v("正则表达式对一些不能打印的特殊字符，提供了表达方法。")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("\\cX")]),s._v(" 表示"),a("code",[s._v("Ctrl-[X]")]),s._v("，其中的"),a("code",[s._v("X")]),s._v("是A-Z之中任一个英文字母，用来匹配控制字符。")]),s._v(" "),a("li",[a("code",[s._v("[\\b]")]),s._v(" 匹配退格键(U+0008)，不要与"),a("code",[s._v("\\b")]),s._v("混淆。")]),s._v(" "),a("li",[a("code",[s._v("\\n")]),s._v(" 匹配换行键。")]),s._v(" "),a("li",[a("code",[s._v("\\r")]),s._v(" 匹配回车键。")]),s._v(" "),a("li",[a("code",[s._v("\\t")]),s._v(" 匹配制表符 tab（U+0009）。")]),s._v(" "),a("li",[a("code",[s._v("\\v")]),s._v(" 匹配垂直制表符（U+000B）。")]),s._v(" "),a("li",[a("code",[s._v("\\f")]),s._v(" 匹配换页符（U+000C）。")]),s._v(" "),a("li",[a("code",[s._v("\\0")]),s._v(" 匹配"),a("code",[s._v("null")]),s._v("字符（U+0000）。")]),s._v(" "),a("li",[a("code",[s._v("\\xhh")]),s._v(" 匹配一个以两位十六进制数（"),a("code",[s._v("\\x00")]),s._v("-"),a("code",[s._v("\\xFF")]),s._v("）表示的字符。")]),s._v(" "),a("li",[a("code",[s._v("\\uhhhh")]),s._v(" 匹配一个以四位十六进制数（"),a("code",[s._v("\\u0000")]),s._v("-"),a("code",[s._v("\\uFFFF")]),s._v("）表示的 Unicode 字符。")])]),s._v(" "),a("h3",{attrs:{id:"字符类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符类"}},[s._v("#")]),s._v(" 字符类")]),s._v(" "),a("p",[s._v("字符类（class）表示有一系列字符可供选择，只要匹配其中一个就可以了。所有可供选择的字符都放在方括号内，比如"),a("code",[s._v("[xyz]")]),s._v(" 表示"),a("code",[s._v("x")]),s._v("、"),a("code",[s._v("y")]),s._v("、"),a("code",[s._v("z")]),s._v("之中任选一个匹配。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/[abc]/.test('hello world') // false\n/[abc]/.test('apple') // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码中，字符串"),a("code",[s._v("hello world")]),s._v("不包含"),a("code",[s._v("a")]),s._v("、"),a("code",[s._v("b")]),s._v("、"),a("code",[s._v("c")]),s._v("这三个字母中的任一个，所以返回"),a("code",[s._v("false")]),s._v("；字符串"),a("code",[s._v("apple")]),s._v("包含字母"),a("code",[s._v("a")]),s._v("，所以返回"),a("code",[s._v("true")]),s._v("。")]),s._v(" "),a("p",[s._v("有两个字符在字符类中有特殊含义。")]),s._v(" "),a("p",[a("strong",[s._v("（1）脱字符（^）")])]),s._v(" "),a("p",[s._v("如果方括号内的第一个字符是"),a("code",[s._v("[^]")]),s._v("，则表示除了字符类之中的字符，其他字符都可以匹配。比如，"),a("code",[s._v("[^xyz]")]),s._v("表示除了"),a("code",[s._v("x")]),s._v("、"),a("code",[s._v("y")]),s._v("、"),a("code",[s._v("z")]),s._v("之外都可以匹配。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/[^abc]/.test('bbc news') // true\n/[^abc]/.test('bbc') // false\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码中，字符串"),a("code",[s._v("bbc news")]),s._v("包含"),a("code",[s._v("a")]),s._v("、"),a("code",[s._v("b")]),s._v("、"),a("code",[s._v("c")]),s._v("以外的其他字符，所以返回"),a("code",[s._v("true")]),s._v("；字符串"),a("code",[s._v("bbc")]),s._v("不包含"),a("code",[s._v("a")]),s._v("、"),a("code",[s._v("b")]),s._v("、"),a("code",[s._v("c")]),s._v("以外的其他字符，所以返回"),a("code",[s._v("false")]),s._v("。")]),s._v(" "),a("p",[s._v("如果方括号内没有其他字符，即只有"),a("code",[s._v("[^]")]),s._v("，就表示匹配一切字符，其中包括换行符。相比之下，点号作为元字符（"),a("code",[s._v(".")]),s._v("）是不包括换行符的。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var s = 'Please yes\\nmake my day!';\n\ns.match(/yes.*day/) // null\ns.match(/yes[^]*day/) // [ 'yes\\nmake my day']\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("上面代码中，字符串"),a("code",[s._v("s")]),s._v("含有一个换行符，点号不包括换行符，所以第一个正则表达式匹配失败；第二个正则表达式"),a("code",[s._v("[^]")]),s._v("包含一切字符，所以匹配成功。")]),s._v(" "),a("blockquote",[a("p",[s._v("注意，脱字符只有在字符类的第一个位置才有特殊含义，否则就是字面含义。")])]),s._v(" "),a("p",[a("strong",[s._v("（2）连字符（-）")])]),s._v(" "),a("p",[s._v("某些情况下，对于连续序列的字符，连字符（"),a("code",[s._v("-")]),s._v("）用来提供简写形式，表示字符的连续范围。比如，"),a("code",[s._v("[abc]")]),s._v("可以写成"),a("code",[s._v("[a-c]")]),s._v("，"),a("code",[s._v("[0123456789]")]),s._v("可以写成"),a("code",[s._v("[0-9]")]),s._v("，同理"),a("code",[s._v("[A-Z]")]),s._v("表示26个大写字母。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/a-z/.test('b') // false\n/[a-z]/.test('b') // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码中，当连字号（dash）不出现在方括号之中，就不具备简写的作用，只代表字面的含义，所以不匹配字符"),a("code",[s._v("b")]),s._v("。只有当连字号用在方括号之中，才表示连续的字符序列。")]),s._v(" "),a("p",[s._v("以下都是合法的字符类简写形式。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("[0-9.,]\n[0-9a-fA-F]\n[a-zA-Z0-9-]\n[1-31]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("上面代码中最后一个字符类"),a("code",[s._v("[1-31]")]),s._v("，不代表"),a("code",[s._v("1")]),s._v("到"),a("code",[s._v("31")]),s._v("，只代表"),a("code",[s._v("1")]),s._v("到"),a("code",[s._v("3")]),s._v("。")]),s._v(" "),a("p",[s._v("连字符还可以用来指定 Unicode 字符的范围。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var str = "\\u0130\\u0131\\u0132";\n/[\\u0128-\\uFFFF]/.test(str)\n// true\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("\\u0128-\\uFFFF")]),s._v("表示匹配码点在"),a("code",[s._v("0128")]),s._v("到"),a("code",[s._v("FFFF")]),s._v("之间的所有字符。")]),s._v(" "),a("p",[s._v("另外，不要过分使用连字符，设定一个很大的范围，否则很可能选中意料之外的字符。最典型的例子就是"),a("code",[s._v("[A-z]")]),s._v("，表面上它是选中从大写的"),a("code",[s._v("A")]),s._v("到小写的"),a("code",[s._v("z")]),s._v("之间52个字母，但是由于在 ASCII 编码之中，大写字母与小写字母之间还有其他字符，结果就会出现意料之外的结果。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/[A-z]/.test('\\\\') // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面代码中，由于反斜杠（''）的ASCII码在大写字母与小写字母之间，结果会被选中。")]),s._v(" "),a("h3",{attrs:{id:"预定义模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#预定义模式"}},[s._v("#")]),s._v(" 预定义模式")]),s._v(" "),a("p",[s._v("预定义模式指的是某些常见模式的简写方式。")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("\\d")]),s._v(" 匹配0-9之间的任一数字，相当于"),a("code",[s._v("[0-9]")]),s._v("。")]),s._v(" "),a("li",[a("code",[s._v("\\D")]),s._v(" 匹配所有0-9以外的字符，相当于"),a("code",[s._v("[^0-9]")]),s._v("。")]),s._v(" "),a("li",[a("code",[s._v("\\w")]),s._v(" 匹配任意的字母、数字和下划线，相当于"),a("code",[s._v("[A-Za-z0-9_]")]),s._v("。")]),s._v(" "),a("li",[a("code",[s._v("\\W")]),s._v(" 除所有字母、数字和下划线以外的字符，相当于"),a("code",[s._v("[^A-Za-z0-9_]")]),s._v("。")]),s._v(" "),a("li",[a("code",[s._v("\\s")]),s._v(" 匹配空格（包括换行符、制表符、空格符等），相等于"),a("code",[s._v("[ \\t\\r\\n\\v\\f]")]),s._v("。")]),s._v(" "),a("li",[a("code",[s._v("\\S")]),s._v(" 匹配非空格的字符，相当于"),a("code",[s._v("[^ \\t\\r\\n\\v\\f]")]),s._v("。")]),s._v(" "),a("li",[a("code",[s._v("\\b")]),s._v(" 匹配词的边界。")]),s._v(" "),a("li",[a("code",[s._v("\\B")]),s._v(" 匹配非词边界，即在词的内部。")])]),s._v(" "),a("p",[s._v("下面是一些例子。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// \\s 的例子\n/\\s\\w*/.exec('hello world') // [\" world\"]\n\n// \\b 的例子\n/\\bworld/.test('hello world') // true\n/\\bworld/.test('hello-world') // true\n/\\bworld/.test('helloworld') // false\n\n// \\B 的例子\n/\\Bworld/.test('hello-world') // false\n/\\Bworld/.test('helloworld') // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("\\s")]),s._v("表示空格，所以匹配结果会包括空格。"),a("code",[s._v("\\b")]),s._v("表示词的边界，所以"),a("code",[s._v("world")]),s._v("的词首必须独立（词尾是否独立未指定），才会匹配。同理，"),a("code",[s._v("\\B")]),s._v("表示非词的边界，只有"),a("code",[s._v("world")]),s._v("的词首不独立，才会匹配。")]),s._v(" "),a("p",[s._v("通常，正则表达式遇到换行符（"),a("code",[s._v("\\n")]),s._v("）就会停止匹配。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var html = "<b>Hello</b>\\n<i>world!</i>";\n\n/.*/.exec(html)[0]\n// "<b>Hello</b>"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("上面代码中，字符串"),a("code",[s._v("html")]),s._v("包含一个换行符，结果点字符（"),a("code",[s._v(".")]),s._v("）不匹配换行符，导致匹配结果可能不符合原意。这时使用"),a("code",[s._v("\\s")]),s._v("字符类，就能包括换行符。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var html = "<b>Hello</b>\\n<i>world!</i>";\n\n/[\\S\\s]*/.exec(html)[0]\n// "<b>Hello</b>\\n<i>world!</i>"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("[\\S\\s]")]),s._v("指代一切字符。")]),s._v(" "),a("h3",{attrs:{id:"重复类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重复类"}},[s._v("#")]),s._v(" 重复类")]),s._v(" "),a("p",[s._v("模式的精确匹配次数，使用大括号（"),a("code",[s._v("{}")]),s._v("）表示。"),a("code",[s._v("{n}")]),s._v("表示恰好重复"),a("code",[s._v("n")]),s._v("次，"),a("code",[s._v("{n,}")]),s._v("表示至少重复"),a("code",[s._v("n")]),s._v("次，"),a("code",[s._v("{n,m}")]),s._v("表示重复不少于"),a("code",[s._v("n")]),s._v("次，不多于"),a("code",[s._v("m")]),s._v("次。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/lo{2}k/.test('look') // true\n/lo{2,5}k/.test('looook') // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码中，第一个模式指定"),a("code",[s._v("o")]),s._v("连续出现2次，第二个模式指定"),a("code",[s._v("o")]),s._v("连续出现2次到5次之间。")]),s._v(" "),a("h3",{attrs:{id:"量词符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#量词符"}},[s._v("#")]),s._v(" 量词符")]),s._v(" "),a("p",[s._v("量词符用来设定某个模式出现的次数。")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("?")]),s._v(" 问号表示某个模式出现0次或1次，等同于"),a("code",[s._v("{0, 1}")]),s._v("。")]),s._v(" "),a("li",[a("code",[s._v("*")]),s._v(" 星号表示某个模式出现0次或多次，等同于"),a("code",[s._v("{0,}")]),s._v("。")]),s._v(" "),a("li",[a("code",[s._v("+")]),s._v(" 加号表示某个模式出现1次或多次，等同于"),a("code",[s._v("{1,}")]),s._v("。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// t 出现0次或1次\n/t?est/.test('test') // true\n/t?est/.test('est') // true\n\n// t 出现1次或多次\n/t+est/.test('test') // true\n/t+est/.test('ttest') // true\n/t+est/.test('est') // false\n\n// t 出现0次或多次\n/t*est/.test('test') // true\n/t*est/.test('ttest') // true\n/t*est/.test('tttest') // true\n/t*est/.test('est') // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("h3",{attrs:{id:"贪婪模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#贪婪模式"}},[s._v("#")]),s._v(" 贪婪模式")]),s._v(" "),a("p",[s._v("上一小节的三个量词符，默认情况下都是最大可能匹配，即匹配到下一个字符不满足匹配规则为止。这被称为贪婪模式。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var s = 'aaa';\ns.match(/a+/) // [\"aaa\"]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码中，模式是"),a("code",[s._v("/a+/")]),s._v("，表示匹配1个"),a("code",[s._v("a")]),s._v("或多个"),a("code",[s._v("a")]),s._v("，那么到底会匹配几个"),a("code",[s._v("a")]),s._v("呢？因为默认是贪婪模式，会一直匹配到字符"),a("code",[s._v("a")]),s._v("不出现为止，所以匹配结果是3个"),a("code",[s._v("a")]),s._v("。")]),s._v(" "),a("p",[s._v("除了贪婪模式，还有非贪婪模式，即最小可能匹配。只要一发现匹配，就返回结果，不要往下检查。如果想将贪婪模式改为非贪婪模式，可以在量词符后面加一个问号。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var s = 'aaa';\ns.match(/a+?/) // [\"a\"]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面例子中，模式结尾添加了一个问号"),a("code",[s._v("/a+?/")]),s._v("，这时就改为非贪婪模式，一旦条件满足，就不再往下匹配，"),a("code",[s._v("+?")]),s._v("表示只要发现一个"),a("code",[s._v("a")]),s._v("，就不再往下匹配了。")]),s._v(" "),a("p",[s._v("除了非贪婪模式的加号（"),a("code",[s._v("+?")]),s._v("），还有非贪婪模式的星号（"),a("code",[s._v("*?")]),s._v("）和非贪婪模式的问号（"),a("code",[s._v("??")]),s._v("）。")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("+?")]),s._v("：表示某个模式出现1次或多次，匹配时采用非贪婪模式。")]),s._v(" "),a("li",[a("code",[s._v("*?")]),s._v("：表示某个模式出现0次或多次，匹配时采用非贪婪模式。")]),s._v(" "),a("li",[a("code",[s._v("??")]),s._v("：表格某个模式出现0次或1次，匹配时采用非贪婪模式。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("'abb'.match(/ab*/) // [\"abb\"]\n'abb'.match(/ab*?/) // [\"a\"]\n\n'abb'.match(/ab?/) // [\"ab\"]\n'abb'.match(/ab??/) // [\"a\"]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("上面例子中，"),a("code",[s._v("/ab*/")]),s._v("表示如果"),a("code",[s._v("a")]),s._v("后面有多个"),a("code",[s._v("b")]),s._v("，那么匹配尽可能多的"),a("code",[s._v("b")]),s._v("；"),a("code",[s._v("/ab*?/")]),s._v("表示匹配尽可能少的"),a("code",[s._v("b")]),s._v("，也就是0个"),a("code",[s._v("b")]),s._v("。")]),s._v(" "),a("h3",{attrs:{id:"修饰符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修饰符"}},[s._v("#")]),s._v(" 修饰符")]),s._v(" "),a("p",[s._v("修饰符（modifier）表示模式的附加规则，放在正则模式的最尾部。")]),s._v(" "),a("p",[s._v("修饰符可以单个使用，也可以多个一起使用。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 单个修饰符\nvar regex = /test/i;\n\n// 多个修饰符\nvar regex = /test/ig;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("（1）g 修饰符")])]),s._v(" "),a("p",[s._v("默认情况下，第一次匹配成功后，正则对象就停止向下匹配了。"),a("code",[s._v("g")]),s._v("修饰符表示全局匹配（global），加上它以后，正则对象将匹配全部符合条件的结果，主要用于搜索和替换。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var regex = /b/;\nvar str = 'abba';\n\nregex.test(str); // true\nregex.test(str); // true\nregex.test(str); // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("上面代码中，正则模式不含"),a("code",[s._v("g")]),s._v("修饰符，每次都是从字符串头部开始匹配。所以，连续做了三次匹配，都返回"),a("code",[s._v("true")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var regex = /b/g;\nvar str = 'abba';\n\nregex.test(str); // true\nregex.test(str); // true\nregex.test(str); // false\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("上面代码中，正则模式含有"),a("code",[s._v("g")]),s._v("修饰符，每次都是从上一次匹配成功处，开始向后匹配。因为字符串"),a("code",[s._v("abba")]),s._v("只有两个"),a("code",[s._v("b")]),s._v("，所以前两次匹配结果为"),a("code",[s._v("true")]),s._v("，第三次匹配结果为"),a("code",[s._v("false")]),s._v("。")]),s._v(" "),a("p",[a("strong",[s._v("（2）i 修饰符")])]),s._v(" "),a("p",[s._v("默认情况下，正则对象区分字母的大小写，加上"),a("code",[s._v("i")]),s._v("修饰符以后表示忽略大小写（ignoreCase）。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/abc/.test('ABC') // false\n/abc/i.test('ABC') // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码表示，加了"),a("code",[s._v("i")]),s._v("修饰符以后，不考虑大小写，所以模式"),a("code",[s._v("abc")]),s._v("匹配字符串"),a("code",[s._v("ABC")]),s._v("。")]),s._v(" "),a("p",[a("strong",[s._v("（3）m 修饰符")])]),s._v(" "),a("p",[a("code",[s._v("m")]),s._v("修饰符表示多行模式（multiline），会修改"),a("code",[s._v("^")]),s._v("和"),a("code",[s._v("$")]),s._v("的行为。默认情况下（即不加"),a("code",[s._v("m")]),s._v("修饰符时），"),a("code",[s._v("^")]),s._v("和"),a("code",[s._v("$")]),s._v("匹配字符串的开始处和结尾处，加上"),a("code",[s._v("m")]),s._v("修饰符以后，"),a("code",[s._v("^")]),s._v("和"),a("code",[s._v("$")]),s._v("还会匹配行首和行尾，即"),a("code",[s._v("^")]),s._v("和"),a("code",[s._v("$")]),s._v("会识别换行符（"),a("code",[s._v("\\n")]),s._v("）。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/world$/.test('hello world\\n') // false\n/world$/m.test('hello world\\n') // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面的代码中，字符串结尾处有一个换行符。如果不加"),a("code",[s._v("m")]),s._v("修饰符，匹配不成功，因为字符串的结尾不是"),a("code",[s._v("world")]),s._v("；加上以后，"),a("code",[s._v("$")]),s._v("可以匹配行尾。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/^b/m.test('a\\nb') // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面代码要求匹配行首的"),a("code",[s._v("b")]),s._v("，如果不加"),a("code",[s._v("m")]),s._v("修饰符，就相当于"),a("code",[s._v("b")]),s._v("只能处在字符串的开始处。加上"),a("code",[s._v("m")]),s._v("修饰符以后，换行符"),a("code",[s._v("\\n")]),s._v("也会被认为是一行的开始。")]),s._v(" "),a("h3",{attrs:{id:"组匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组匹配"}},[s._v("#")]),s._v(" 组匹配")]),s._v(" "),a("p",[a("strong",[s._v("（1）概述")])]),s._v(" "),a("p",[s._v("正则表达式的括号表示分组匹配，括号中的模式可以用来匹配分组的内容。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/fred+/.test('fredd') // true\n/(fred)+/.test('fredfred') // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码中，第一个模式没有括号，结果"),a("code",[s._v("+")]),s._v("只表示重复字母"),a("code",[s._v("d")]),s._v("，第二个模式有括号，结果"),a("code",[s._v("+")]),s._v("就表示匹配"),a("code",[s._v("fred")]),s._v("这个词。")]),s._v(" "),a("p",[s._v("下面是另外一个分组捕获的例子。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var m = 'abcabc'.match(/(.)b(.)/);\nm\n// ['abc', 'a', 'c']\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("上面代码中，正则表达式"),a("code",[s._v("/(.)b(.)/")]),s._v("一共使用两个括号，第一个括号捕获"),a("code",[s._v("a")]),s._v("，第二个括号捕获"),a("code",[s._v("c")]),s._v("。")]),s._v(" "),a("p",[s._v("注意，使用组匹配时，不宜同时使用"),a("code",[s._v("g")]),s._v("修饰符，否则"),a("code",[s._v("match")]),s._v("方法不会捕获分组的内容。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var m = 'abcabc'.match(/(.)b(.)/g);\nm // ['abc', 'abc']\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码使用带"),a("code",[s._v("g")]),s._v("修饰符的正则表达式，结果"),a("code",[s._v("match")]),s._v("方法只捕获了匹配整个表达式的部分。这时必须使用正则表达式的"),a("code",[s._v("exec")]),s._v("方法，配合循环，才能读到每一轮匹配的组捕获。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var str = \'abcabc\';\nvar reg = /(.)b(.)/g;\nwhile (true) {\n  var result = reg.exec(str);\n  if (!result) break;\n  console.log(result);\n}\n// ["abc", "a", "c"]\n// ["abc", "a", "c"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("正则表达式内部，还可以用"),a("code",[s._v("\\n")]),s._v("引用括号匹配的内容，"),a("code",[s._v("n")]),s._v("是从1开始的自然数，表示对应顺序的括号。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('/(.)b(.)\\1b\\2/.test("abcabc")\n// true\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面的代码中，"),a("code",[s._v("\\1")]),s._v("表示第一个括号匹配的内容（即"),a("code",[s._v("a")]),s._v("），"),a("code",[s._v("\\2")]),s._v("表示第二个括号匹配的内容（即"),a("code",[s._v("c")]),s._v("）。")]),s._v(" "),a("p",[s._v("下面是另外一个例子。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/y(..)(.)\\2\\1/.test('yabccab') // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("括号还可以嵌套。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/y((..)\\2)\\1/.test('yabababab') // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("\\1")]),s._v("指向外层括号，"),a("code",[s._v("\\2")]),s._v("指向内层括号。")]),s._v(" "),a("p",[s._v("组匹配非常有用，下面是一个匹配网页标签的例子。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var tagName = /<([^>]+)>[^<]*<\\/\\1>/;\n\ntagName.exec(\"<b>bold</b>\")[1]\n// 'b'\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("上面代码中，圆括号匹配尖括号之中的标签，而"),a("code",[s._v("\\1")]),s._v("就表示对应的闭合标签。")]),s._v(" "),a("p",[s._v("上面代码略加修改，就能捕获带有属性的标签。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var html = \'<b class="hello">Hello</b><i>world</i>\';\nvar tag = /<(\\w+)([^>]*)>(.*?)<\\/\\1>/g;\n\nvar match = tag.exec(html);\n\nmatch[1] // "b"\nmatch[2] // " class="hello""\nmatch[3] // "Hello"\n\nmatch = tag.exec(html);\n\nmatch[1] // "i"\nmatch[2] // ""\nmatch[3] // "world"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[a("strong",[s._v("（2）非捕获组")])]),s._v(" "),a("p",[a("code",[s._v("(?:x)")]),s._v("称为非捕获组（Non-capturing group），表示不返回该组匹配的内容，即匹配的结果中不计入这个括号。")]),s._v(" "),a("p",[s._v("非捕获组的作用请考虑这样一个场景，假定需要匹配"),a("code",[s._v("foo")]),s._v("或者"),a("code",[s._v("foofoo")]),s._v("，正则表达式就应该写成"),a("code",[s._v("/(foo){1, 2}/")]),s._v("，但是这样会占用一个组匹配。这时，就可以使用非捕获组，将正则表达式改为"),a("code",[s._v("/(?:foo){1, 2}/")]),s._v("，它的作用与前一个正则是一样的，但是不会单独输出括号内部的内容。")]),s._v(" "),a("p",[s._v("请看下面的例子。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var m = \'abc\'.match(/(?:.)b(.)/);\nm // ["abc", "c"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码中的模式，一共使用了两个括号。其中第一个括号是非捕获组，所以最后返回的结果中没有第一个括号，只有第二个括号匹配的内容。")]),s._v(" "),a("p",[s._v("下面是用来分解网址的正则表达式。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 正常匹配\nvar url = /(http|ftp):\\/\\/([^/\\r\\n]+)(\\/[^\\r\\n]*)?/;\n\nurl.exec(\'http://google.com/\');\n// ["http://google.com/", "http", "google.com", "/"]\n\n// 非捕获组匹配\nvar url = /(?:http|ftp):\\/\\/([^/\\r\\n]+)(\\/[^\\r\\n]*)?/;\n\nurl.exec(\'http://google.com/\');\n// ["http://google.com/", "google.com", "/"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("上面的代码中，前一个正则表达式是正常匹配，第一个括号返回网络协议；后一个正则表达式是非捕获匹配，返回结果中不包括网络协议。")]),s._v(" "),a("p",[a("strong",[s._v("（3）先行断言")])]),s._v(" "),a("p",[a("code",[s._v("x(?=y)")]),s._v("称为先行断言（Positive look-ahead），"),a("code",[s._v("x")]),s._v("只有在"),a("code",[s._v("y")]),s._v("前面才匹配，"),a("code",[s._v("y")]),s._v("不会被计入返回结果。比如，要匹配后面跟着百分号的数字，可以写成"),a("code",[s._v("/\\d+(?=%)/")]),s._v("。")]),s._v(" "),a("p",[s._v("“先行断言”中，括号里的部分是不会返回的。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var m = 'abc'.match(/b(?=c)/);\nm // [\"b\"]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面的代码使用了先行断言，"),a("code",[s._v("b")]),s._v("在"),a("code",[s._v("c")]),s._v("前面所以被匹配，但是括号对应的"),a("code",[s._v("c")]),s._v("不会被返回。")]),s._v(" "),a("p",[a("strong",[s._v("（4）先行否定断言")])]),s._v(" "),a("p",[a("code",[s._v("x(?!y)")]),s._v("称为先行否定断言（Negative look-ahead），"),a("code",[s._v("x")]),s._v("只有不在"),a("code",[s._v("y")]),s._v("前面才匹配，"),a("code",[s._v("y")]),s._v("不会被计入返回结果。比如，要匹配后面跟的不是百分号的数字，就要写成"),a("code",[s._v("/\\d+(?!%)/")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/\\d+(?!\\.)/.exec('3.14')\n// [\"14\"]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码中，正则表达式指定，只有不在小数点前面的数字才会被匹配，因此返回的结果就是"),a("code",[s._v("14")]),s._v("。")]),s._v(" "),a("p",[s._v("“先行否定断言”中，括号里的部分是不会返回的。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var m = 'abd'.match(/b(?!c)/);\nm // ['b']\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面的代码使用了先行否定断言，"),a("code",[s._v("b")]),s._v("不在"),a("code",[s._v("c")]),s._v("前面所以被匹配，而且括号对应的"),a("code",[s._v("d")]),s._v("不会被返回。")]),s._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),a("h3",{attrs:{id:"正则符号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则符号"}},[s._v("#")]),s._v(" 正则符号")]),s._v(" "),a("p",[s._v("方括号：用于查找某个范围内的字符")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("表达式")]),s._v(" "),a("th",[s._v("描述")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("[abc]")]),s._v(" "),a("td",[s._v("查找方括号之间的任何字符。")])]),s._v(" "),a("tr",[a("td",[s._v("[^abc]")]),s._v(" "),a("td",[s._v("查找任何不在方括号之间的字符。,只要一个字符串中有除了abc以外的字母就会返回true")])]),s._v(" "),a("tr",[a("td",[s._v("[0-9]")]),s._v(" "),a("td",[s._v("查找任何从 0 至 9 的数字。")])]),s._v(" "),a("tr",[a("td",[s._v("[a-z]")]),s._v(" "),a("td",[s._v("查找任何从小写 a 到小写 z 的字符。")])]),s._v(" "),a("tr",[a("td",[s._v("[A-Z]")]),s._v(" "),a("td",[s._v("查找任何从大写 A 到大写 Z 的字符。")])]),s._v(" "),a("tr",[a("td",[s._v("[A-z]")]),s._v(" "),a("td",[s._v("查找任何从大写 A 到小写 z 的字符。")])]),s._v(" "),a("tr",[a("td",[s._v("[adgk]")]),s._v(" "),a("td",[s._v("查找给定集合内的任何字符。")])]),s._v(" "),a("tr",[a("td",[s._v("[^adgk]")]),s._v(" "),a("td",[s._v("查找给定集合外的任何字符。")])]),s._v(" "),a("tr",[a("td",[s._v("(red|blue|green)")]),s._v(" "),a("td",[s._v("查找任何指定的选项。")])])])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg1"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/ab/i")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//检验一个字符串中是否有ab(整体)")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg2"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/a|b/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//检查一个字符串中是否有a或b")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg3"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/a|b|c/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//检查一个字符串中是否有a或b或c")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg4"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/[ab]/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//[]里面也是或的关系[ab]===a|b")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg5"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/a[bde]c/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//查一个字符串中是否还有abc或adc或aec(整体)")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("元字符：是拥有特殊含义的字符")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("元字符")]),s._v(" "),a("th",[s._v("描述")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v(".")]),s._v(" "),a("td",[s._v("查找单个字符，除了换行和行结束符。")])]),s._v(" "),a("tr",[a("td",[s._v("\\w")]),s._v(" "),a("td",[s._v("查找单词字符。")])]),s._v(" "),a("tr",[a("td",[s._v("\\W")]),s._v(" "),a("td",[s._v("查找非单词字符。")])]),s._v(" "),a("tr",[a("td",[s._v("\\d")]),s._v(" "),a("td",[s._v("查找数字。")])]),s._v(" "),a("tr",[a("td",[s._v("\\D")]),s._v(" "),a("td",[s._v("查找非数字字符。")])]),s._v(" "),a("tr",[a("td",[s._v("\\s")]),s._v(" "),a("td",[s._v("查找空白字符。")])]),s._v(" "),a("tr",[a("td",[s._v("\\S")]),s._v(" "),a("td",[s._v("查找非空白字符。")])]),s._v(" "),a("tr",[a("td",[s._v("\\b")]),s._v(" "),a("td",[s._v("匹配单词边界。一个单词旁边必须是有空白字符作为边界。比如判断是否含有child单词,用/\\bchild\\b/ 判断是否有一个独立的单词")])]),s._v(" "),a("tr",[a("td",[s._v("\\B")]),s._v(" "),a("td",[s._v("匹配非单词边界。单词左右两边没有空白字符")])]),s._v(" "),a("tr",[a("td",[s._v("\\0")]),s._v(" "),a("td",[s._v("查找 NULL 字符。")])]),s._v(" "),a("tr",[a("td",[s._v("\\n")]),s._v(" "),a("td",[s._v("查找换行符。")])]),s._v(" "),a("tr",[a("td",[s._v("\\f")]),s._v(" "),a("td",[s._v("查找换页符。")])]),s._v(" "),a("tr",[a("td",[s._v("\\r")]),s._v(" "),a("td",[s._v("查找回车符。")])]),s._v(" "),a("tr",[a("td",[s._v("\\t")]),s._v(" "),a("td",[s._v("查找制表符。")])]),s._v(" "),a("tr",[a("td",[s._v("\\v")]),s._v(" "),a("td",[s._v("查找垂直制表符。")])]),s._v(" "),a("tr",[a("td",[s._v("\\xxx")]),s._v(" "),a("td",[s._v("查找以八进制数 xxx 规定的字符。")])]),s._v(" "),a("tr",[a("td",[s._v("\\xdd")]),s._v(" "),a("td",[s._v("查找以十六进制数 dd 规定的字符。")])]),s._v(" "),a("tr",[a("td",[s._v("\\uxxxx")]),s._v(" "),a("td",[s._v("查找以十六进制数 xxxx 规定的 Unicode 字符。")])])])]),s._v(" "),a("p",[s._v("注意:")]),s._v(" "),a("ol",[a("li",[a("p",[a("strong",[s._v("在正则表达式中\\表示转义字符，但是js中任何地方\\都是转义字符，所以要验证\\也必须输入两个(字面量中)")]),s._v(" **如:**正则表达式.表示任意字符/./只会表示是否有任意字符，如果要判断有没有.(点这个符号),需要用/\\ ./来表示")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("如果用构造函数的方法，由于它的参数是一个字符串，而\\是字符串中的转义字符，如果要使用\\则需要使用\\ \\代替(相当于用了三个\\ )，这样相当于把他们先化为字面量，再自变量转换，而因为\\ .其实就是.，所以没有作用")])])])]),s._v(" "),a("p",[s._v("量词：通过量词可以设置一个内容出现的次数用{}里面写需要的数量,量词只对它前边的一个内容起作用")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("量词")]),s._v(" "),a("th",[s._v("描述")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("n+")]),s._v(" "),a("td",[s._v('匹配任何包含至少一个 n 的字符串。例如，/a+/ 匹配 "candy" 中的 "a"，"caaaaaaandy" 中所有的 "a"。')])]),s._v(" "),a("tr",[a("td",[s._v("n*")]),s._v(" "),a("td",[s._v('匹配任何包含零个或多个 n 的字符串。例如，/bo*/ 匹配 "A ghost booooed" 中的 "boooo"，"A bird warbled" 中的 "b"，但是不匹配 "A goat grunted"。')])]),s._v(" "),a("tr",[a("td",[s._v("n?")]),s._v(" "),a("td",[s._v('匹配任何包含零个或一个 n 的字符串。例如，/e?le?/ 匹配 "angel" 中的 "el"，"angle" 中的 "le"。')])]),s._v(" "),a("tr",[a("td",[s._v("n{X}")]),s._v(" "),a("td",[s._v('匹配包含 X 个 n 的序列的字符串。例如，/a{2}/ 不匹配 "candy," 中的 "a"，但是匹配 "caandy," 中的两个 "a"，且匹配 "caaandy." 中的前两个 "a"。')])]),s._v(" "),a("tr",[a("td",[s._v("n{X,}")]),s._v(" "),a("td",[s._v('X 是一个正整数。前面的模式 n 连续出现至少 X 次时匹配。例如，/a{2,}/ 不匹配 "candy" 中的 "a"，但是匹配 "caandy" 和 "caaaaaaandy." 中所有的 "a"。')])]),s._v(" "),a("tr",[a("td",[s._v("n{X,Y}")]),s._v(" "),a("td",[s._v('X 和 Y 为正整数。前面的模式 n 连续出现至少 X 次，至多 Y 次时匹配。例如，/a{1,3}/ 不匹配 "cndy"，匹配 "candy," 中的 "a"，"caandy," 中的两个 "a"，匹配 "caaaaaaandy" 中的前面三个 "a"。注意，当匹配 "caaaaaaandy" 时，即使原始字符串拥有更多的 "a"，匹配项也是 "aaa"。')])]),s._v(" "),a("tr",[a("td",[s._v("n$")]),s._v(" "),a("td",[s._v("匹配任何结尾为 n 的字符串。")])]),s._v(" "),a("tr",[a("td",[s._v("^n")]),s._v(" "),a("td",[s._v("匹配任何开头为 n 的字符串。注意与[^]作对比")])]),s._v(" "),a("tr",[a("td",[s._v("?=n")]),s._v(" "),a("td",[s._v("匹配任何其后紧接指定字符串 n 的字符串。")])]),s._v(" "),a("tr",[a("td",[s._v("?!n")]),s._v(" "),a("td",[s._v("匹配任何其后没有紧接指定字符串 n 的字符串。")])])])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/a{3}/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//表示aaa,但ab{3}只表示abbb,如果要ab一起出现3次，需要/(ab){3}/")]),s._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*注意：这里面只要就会true正确执行，比如b{3}但是bbbb依然是正确的，因为包含了3个b*/")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("注：在正则表达式中同时使用^ $则要求字符串必须完全符合正则表达式")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg1"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/^a$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//表示既要有a开头同时这个开头的a还必须是结尾")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*上式说明只能有一个a，aaa这种是不行的，因为结尾的a不是开头的a*/")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg2"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/^a|a$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//表示以a开头或者以a结尾")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg3"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/^b([0-9A-z]){0,}b$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//表示以b开头同时以b结尾同时中间可以跟任意数字或者字母")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("子集：用圆括号()包起来的属于一个整体,叫做一个子集")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//通过子集可以很轻松的实现顺序互换")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" str"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abcd"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//要改成"cdab"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("g；\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" result"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$2$1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("；\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//此时的$1和$2有特别的含有,$1代表第一个子集,$2代表第二个子集")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" str"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"111223333"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/d)\\1+/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//所有相同数字分为一组")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//["111","22","3333"]')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"正则断言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则断言"}},[s._v("#")]),s._v(" 正则断言")]),s._v(" "),a("p",[a("strong",[s._v("所谓断言，就是指明某个字符串前边或者后边，将会出现满足某种规律的字符串")])]),s._v(" "),a("p",[s._v("在将断言前.先将子集的捕获与捕获,一般的子集通过()括住都会被捕获,这时可以通过$1等来使用被捕获的子集,而如果不想要子集被捕获,只是用做一个匹配模式,就可以让子集不被捕获到,一般是通过(?:)来括住一个子集")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("模式")]),s._v(" "),a("th",[s._v("描述")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("(?:X)")]),s._v(" "),a("td",[s._v("不捕获匹配,不能通过$符号进行捕获到该子集,包括下面的所有都是捕获匹配。")])]),s._v(" "),a("tr",[a("td",[s._v("(?=X )")]),s._v(" "),a("td",[s._v("零宽度正先行断言。仅当子表达式 X 在 此位置的右侧匹配时才继续匹配。例如，\\w+(?=\\d) 与后跟数字的单词匹配，而不与该数字匹配。此构造不会回溯。")])]),s._v(" "),a("tr",[a("td",[s._v("(?!X)")]),s._v(" "),a("td",[s._v("零宽度负先行断言。仅当子表达式 X 不在 此位置的右侧匹配时才继续匹配。例如，例如，\\w+(?!\\d) 与后不跟数字的单词匹配，而不与该数字匹配 。")])]),s._v(" "),a("tr",[a("td",[s._v("(?<=X)")]),s._v(" "),a("td",[s._v("零宽度正后发断言。仅当子表达式 X 在 此位置的左侧匹配时才继续匹配。例如，(?<=19)99 与跟在 19 后面的 99 的实例匹配。此构造不会回溯。")])]),s._v(" "),a("tr",[a("td",[s._v("(?<!X)")]),s._v(" "),a("td",[s._v("零宽度负后发断言。仅当子表达式 X 不在此位置的左侧匹配时才继续匹配。例如，(?<!19)99 与不跟在 19 后面的 99 的实例匹配")])])])]),s._v(" "),a("p",[a("strong",[s._v("例子:是否为浮点数")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("isFloat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    number"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("number"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/^-?\\d+\\.\\d+$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//\\.连在一起表示就是一个(.),没有其他意思")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("isFloat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//false")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("isFloat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//true")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("isFloat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//false，false是由于JS内部的储存机制,当浮点数后全是0时就被看成一个整数")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("isFloat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1.0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//true,这时因为传入的就是一个1.0的字符串,所以为true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[a("strong",[s._v("例子:手机号规则")])]),s._v(" "),a("ul",[a("li",[s._v("以1开头")]),s._v(" "),a("li",[s._v("第二位3-9任意数字")]),s._v(" "),a("li",[s._v("三位以后任意数字9位")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/^1[3-9][0-9]{9}$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("例子:邮箱格式")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" reg"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/^\\w{3,}(.\\w+)*@[A-z0-9]+(.[A-z]{2,5}{1,2}$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"u-修饰符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#u-修饰符"}},[s._v("#")]),s._v(" u 修饰符")]),s._v(" "),a("p",[s._v("ES6 对正则表达式添加了"),a("code",[s._v("u")]),s._v("修饰符，含义为“Unicode 模式”，用来正确处理大于"),a("code",[s._v("\\uFFFF")]),s._v("的 Unicode 字符。也就是说，会正确处理四个字节的 UTF-16 编码。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/^\\uD83D/u")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\uD83D\\uDC2A'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\\uD83D"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\uD83D\\uDC2A'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("\\uD83D\\uDC2A")]),s._v("是一个四个字节的 UTF-16 编码，代表一个字符。但是，ES5 不支持四个字节的 UTF-16 编码，会将其识别为两个字符，导致第二行代码结果为"),a("code",[s._v("true")]),s._v("。加了"),a("code",[s._v("u")]),s._v("修饰符以后，ES6 就会识别其为一个字符，所以第一行代码结果为"),a("code",[s._v("false")]),s._v("。")]),s._v(" "),a("p",[s._v("一旦加上"),a("code",[s._v("u")]),s._v("修饰符号，就会修改下面这些正则表达式的行为。")]),s._v(" "),a("p",[a("strong",[s._v("（1）点字符")])]),s._v(" "),a("p",[s._v("点（"),a("code",[s._v(".")]),s._v("）字符在正则表达式中，含义是除了换行符以外的任意单个字符。对于码点大于"),a("code",[s._v("0xFFFF")]),s._v("的 Unicode 字符，点字符不能识别，必须加上"),a("code",[s._v("u")]),s._v("修饰符。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'𠮷'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/^.$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("$"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("u"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("上面代码表示，如果不添加"),a("code",[s._v("u")]),s._v("修饰符，正则表达式就会认为字符串为两个字符，从而匹配失败。")]),s._v(" "),a("p",[a("strong",[s._v("（2）Unicode 字符表示法")])]),s._v(" "),a("p",[s._v("ES6 新增了使用大括号表示 Unicode 字符，这种表示法在正则表达式中必须加上"),a("code",[s._v("u")]),s._v("修饰符，才能识别当中的大括号，否则会被解读为量词。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/\\u{61}/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("\\u"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("61")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("u"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("\\u"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("BB7"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("u"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'𠮷'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("上面代码表示，如果不加"),a("code",[s._v("u")]),s._v("修饰符，正则表达式无法识别"),a("code",[s._v("\\u{61}")]),s._v("这种表示法，只会认为这匹配 61 个连续的"),a("code",[s._v("u")]),s._v("。")]),s._v(" "),a("p",[a("strong",[s._v("（3）量词")])]),s._v(" "),a("p",[s._v("使用"),a("code",[s._v("u")]),s._v("修饰符后，所有量词都会正确识别码点大于"),a("code",[s._v("0xFFFF")]),s._v("的 Unicode 字符。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/a{2}/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'aa'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("u"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'aa'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("𠮷"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'𠮷𠮷'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("𠮷"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("u"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'𠮷𠮷'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("（4）预定义模式")])]),s._v(" "),a("p",[a("code",[s._v("u")]),s._v("修饰符也影响到预定义模式，能否正确识别码点大于"),a("code",[s._v("0xFFFF")]),s._v("的 Unicode 字符。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/^\\S$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'𠮷'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\\"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("S")]),s._v("$"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("u"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'𠮷'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码的"),a("code",[s._v("\\S")]),s._v("是预定义模式，匹配所有非空白字符。只有加了"),a("code",[s._v("u")]),s._v("修饰符，它才能正确匹配码点大于"),a("code",[s._v("0xFFFF")]),s._v("的 Unicode 字符。")]),s._v(" "),a("p",[s._v("利用这一点，可以写出一个正确返回字符串长度的函数。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("codePointLength")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("text")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/[\\s\\S]/gu")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'𠮷𠮷'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\ns"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 4")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("codePointLength")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[a("strong",[s._v("（5）i 修饰符")])]),s._v(" "),a("p",[s._v("有些 Unicode 字符的编码不同，但是字型很相近，比如，"),a("code",[s._v("\\u004B")]),s._v("与"),a("code",[s._v("\\u212A")]),s._v("都是大写的"),a("code",[s._v("K")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/[a-z]/i")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\u212A'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("iu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\u212A'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码中，不加"),a("code",[s._v("u")]),s._v("修饰符，就无法识别非规范的"),a("code",[s._v("K")]),s._v("字符。")]),s._v(" "),a("p",[a("strong",[s._v("（6）转义")])]),s._v(" "),a("p",[s._v("没有"),a("code",[s._v("u")]),s._v("修饰符的情况下，正则中没有定义的转义（如逗号的转义"),a("code",[s._v("\\,")]),s._v("）无效，而在"),a("code",[s._v("u")]),s._v("模式会报错。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/\\,/")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// /\\,/")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("\\"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("u "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 报错")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码中，没有"),a("code",[s._v("u")]),s._v("修饰符时，逗号前面的反斜杠是无效的，加了"),a("code",[s._v("u")]),s._v("修饰符就报错。")]),s._v(" "),a("h2",{attrs:{id:"regexp-prototype-unicode-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-unicode-属性"}},[s._v("#")]),s._v(" RegExp.prototype.unicode 属性")]),s._v(" "),a("p",[s._v("正则实例对象新增"),a("code",[s._v("unicode")]),s._v("属性，表示是否设置了"),a("code",[s._v("u")]),s._v("修饰符。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" r1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/hello/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" r2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/hello/u")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nr1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("unicode "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\nr2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("unicode "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("上面代码中，正则表达式是否设置了"),a("code",[s._v("u")]),s._v("修饰符，可以从"),a("code",[s._v("unicode")]),s._v("属性看出来。")]),s._v(" "),a("h2",{attrs:{id:"y-修饰符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#y-修饰符"}},[s._v("#")]),s._v(" y 修饰符")]),s._v(" "),a("p",[s._v("除了"),a("code",[s._v("u")]),s._v("修饰符，ES6 还为正则表达式添加了"),a("code",[s._v("y")]),s._v("修饰符，叫做“粘连”（sticky）修饰符。")]),s._v(" "),a("p",[a("code",[s._v("y")]),s._v("修饰符的作用与"),a("code",[s._v("g")]),s._v("修饰符类似，也是全局匹配，后一次匹配都从上一次匹配成功的下一个位置开始。不同之处在于，"),a("code",[s._v("g")]),s._v("修饰符只要剩余位置中存在匹配就可，而"),a("code",[s._v("y")]),s._v("修饰符确保匹配必须从剩余的第一个位置开始，这也就是“粘连”的涵义。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'aaa_aa_a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/a+/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/a+/y")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nr1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["aaa"]')]),s._v("\nr2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["aaa"]')]),s._v("\n\nr1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["aa"]')]),s._v("\nr2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// null")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("上面代码有两个正则表达式，一个使用"),a("code",[s._v("g")]),s._v("修饰符，另一个使用"),a("code",[s._v("y")]),s._v("修饰符。这两个正则表达式各执行了两次，第一次执行的时候，两者行为相同，剩余字符串都是"),a("code",[s._v("_aa_a")]),s._v("。由于"),a("code",[s._v("g")]),s._v("修饰没有位置要求，所以第二次执行会返回结果，而"),a("code",[s._v("y")]),s._v("修饰符要求匹配必须从头部开始，所以返回"),a("code",[s._v("null")]),s._v("。")]),s._v(" "),a("p",[s._v("如果改一下正则表达式，保证每次都能头部匹配，"),a("code",[s._v("y")]),s._v("修饰符就会返回结果了。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'aaa_aa_a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/a+_/y")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["aaa_"]')]),s._v("\nr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["aa_"]')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("上面代码每次匹配，都是从剩余字符串的头部开始。")]),s._v(" "),a("p",[s._v("使用"),a("code",[s._v("lastIndex")]),s._v("属性，可以更好地说明"),a("code",[s._v("y")]),s._v("修饰符。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("REGEX")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/a/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指定从2号位置（y）开始匹配")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("REGEX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lastIndex "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 匹配成功")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" match "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("REGEX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'xaya'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在3号位置匹配成功")]),s._v("\nmatch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("index "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 下一次匹配从4号位开始")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("REGEX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lastIndex "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 4")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 4号位开始匹配失败")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("REGEX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'xaya'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// null")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("lastIndex")]),s._v("属性指定每次搜索的开始位置，"),a("code",[s._v("g")]),s._v("修饰符从这个位置开始向后搜索，直到发现匹配为止。")]),s._v(" "),a("p",[a("code",[s._v("y")]),s._v("修饰符同样遵守"),a("code",[s._v("lastIndex")]),s._v("属性，但是要求必须在"),a("code",[s._v("lastIndex")]),s._v("指定的位置发现匹配。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("REGEX")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/a/y")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指定从2号位置开始匹配")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("REGEX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lastIndex "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 不是粘连，匹配失败")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("REGEX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'xaya'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// null")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指定从3号位置开始匹配")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("REGEX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lastIndex "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3号位置是粘连，匹配成功")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" match "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("REGEX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'xaya'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nmatch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("index "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("REGEX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lastIndex "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 4")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("实际上，"),a("code",[s._v("y")]),s._v("修饰符号隐含了头部匹配的标志"),a("code",[s._v("^")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/b/y")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'aba'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// null")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码由于不能保证头部匹配，所以返回"),a("code",[s._v("null")]),s._v("。"),a("code",[s._v("y")]),s._v("修饰符的设计本意，就是让头部匹配的标志"),a("code",[s._v("^")]),s._v("在全局匹配中都有效。")]),s._v(" "),a("p",[s._v("下面是字符串对象的"),a("code",[s._v("replace")]),s._v("方法的例子。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("REGEX")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/a/gy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'aaxa'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("REGEX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'-'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// '--xa'")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码中，最后一个"),a("code",[s._v("a")]),s._v("因为不是出现在下一次匹配的头部，所以不会被替换。")]),s._v(" "),a("p",[s._v("单单一个"),a("code",[s._v("y")]),s._v("修饰符对"),a("code",[s._v("match")]),s._v("方法，只能返回第一个匹配，必须与"),a("code",[s._v("g")]),s._v("修饰符联用，才能返回所有匹配。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a1a2a3'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/a\\d/y")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["a1"]')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a1a2a3'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/a\\d/gy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["a1", "a2", "a3"]')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("code",[s._v("y")]),s._v("修饰符的一个应用，是从字符串提取 token（词元），"),a("code",[s._v("y")]),s._v("修饰符确保了匹配之间不会有漏掉的字符。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TOKEN_Y")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/\\s*(\\+|[0-9]+)\\s*/y")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TOKEN_G")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/\\s*(\\+|[0-9]+)\\s*/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tokenize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TOKEN_Y")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'3 + 4'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// [ '3', '+', '4' ]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tokenize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TOKEN_G")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'3 + 4'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// [ '3', '+', '4' ]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tokenize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TOKEN_REGEX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("match "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TOKEN_REGEX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("上面代码中，如果字符串里面没有非法字符，"),a("code",[s._v("y")]),s._v("修饰符与"),a("code",[s._v("g")]),s._v("修饰符的提取结果是一样的。但是，一旦出现非法字符，两者的行为就不一样了。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tokenize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TOKEN_Y")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'3x + 4'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// [ '3' ]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tokenize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TOKEN_G")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'3x + 4'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// [ '3', '+', '4' ]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("g")]),s._v("修饰符会忽略非法字符，而"),a("code",[s._v("y")]),s._v("修饰符不会，这样就很容易发现错误。")]),s._v(" "),a("h2",{attrs:{id:"regexp-prototype-sticky-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-sticky-属性"}},[s._v("#")]),s._v(" RegExp.prototype.sticky 属性")]),s._v(" "),a("p",[s._v("与"),a("code",[s._v("y")]),s._v("修饰符相匹配，ES6 的正则实例对象多了"),a("code",[s._v("sticky")]),s._v("属性，表示是否设置了"),a("code",[s._v("y")]),s._v("修饰符。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/hello\\d/y")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sticky "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"regexp-prototype-flags-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-flags-属性"}},[s._v("#")]),s._v(" RegExp.prototype.flags 属性")]),s._v(" "),a("p",[s._v("ES6 为正则表达式新增了"),a("code",[s._v("flags")]),s._v("属性，会返回正则表达式的修饰符。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ES5 的 source 属性")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 返回正则表达式的正文")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("abc"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("ig"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("source\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "abc"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ES6 的 flags 属性")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 返回正则表达式的修饰符")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("abc"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("ig"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("flags\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 'gi'")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h2",{attrs:{id:"s-修饰符：dotall-模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#s-修饰符：dotall-模式"}},[s._v("#")]),s._v(" s 修饰符：dotAll 模式")]),s._v(" "),a("p",[s._v("正则表达式中，点（"),a("code",[s._v(".")]),s._v("）是一个特殊字符，代表任意的单个字符，但是有两个例外。一个是四个字节的 UTF-16 字符，这个可以用"),a("code",[s._v("u")]),s._v("修饰符解决；另一个是行终止符（line terminator character）。")]),s._v(" "),a("p",[s._v("所谓行终止符，就是该字符表示一行的终结。以下四个字符属于“行终止符”。")]),s._v(" "),a("ul",[a("li",[s._v("U+000A 换行符（"),a("code",[s._v("\\n")]),s._v("）")]),s._v(" "),a("li",[s._v("U+000D 回车符（"),a("code",[s._v("\\r")]),s._v("）")]),s._v(" "),a("li",[s._v("U+2028 行分隔符（line separator）")]),s._v(" "),a("li",[s._v("U+2029 段分隔符（paragraph separator）")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/foo.bar/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'foo\\nbar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码中，因为"),a("code",[s._v(".")]),s._v("不匹配"),a("code",[s._v("\\n")]),s._v("，所以正则表达式返回"),a("code",[s._v("false")]),s._v("。")]),s._v(" "),a("p",[s._v("但是，很多时候我们希望匹配的是任意单个字符，这时有一种变通的写法。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/foo[^]bar/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'foo\\nbar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("这种解决方案毕竟不太符合直觉，ES2018 "),a("a",{attrs:{href:"https://github.com/tc39/proposal-regexp-dotall-flag",target:"_blank",rel:"noopener noreferrer"}},[s._v("引入"),a("OutboundLink")],1),a("code",[s._v("s")]),s._v("修饰符，使得"),a("code",[s._v(".")]),s._v("可以匹配任意单个字符。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/foo.bar/s")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'foo\\nbar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这被称为"),a("code",[s._v("dotAll")]),s._v("模式，即点（dot）代表一切字符。所以，正则表达式还引入了一个"),a("code",[s._v("dotAll")]),s._v("属性，返回一个布尔值，表示该正则表达式是否处在"),a("code",[s._v("dotAll")]),s._v("模式。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" re "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/foo.bar/s")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 另一种写法")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// const re = new RegExp('foo.bar', 's');")]),s._v("\n\nre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'foo\\nbar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\nre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("dotAll "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\nre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("flags "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 's'")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[a("code",[s._v("/s")]),s._v("修饰符和多行修饰符"),a("code",[s._v("/m")]),s._v("不冲突，两者一起使用的情况下，"),a("code",[s._v(".")]),s._v("匹配所有字符，而"),a("code",[s._v("^")]),s._v("和"),a("code",[s._v("$")]),s._v("匹配每一行的行首和行尾。")]),s._v(" "),a("h2",{attrs:{id:"后行断言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#后行断言"}},[s._v("#")]),s._v(" 后行断言")]),s._v(" "),a("p",[s._v("JavaScript 语言的正则表达式，只支持先行断言（lookahead）和先行否定断言（negative lookahead），不支持后行断言（lookbehind）和后行否定断言（negative lookbehind）。ES2018 引入"),a("a",{attrs:{href:"https://github.com/tc39/proposal-regexp-lookbehind",target:"_blank",rel:"noopener noreferrer"}},[s._v("后行断言"),a("OutboundLink")],1),s._v("，V8 引擎 4.9 版（Chrome 62）已经支持。")]),s._v(" "),a("p",[s._v("“先行断言”指的是，"),a("code",[s._v("x")]),s._v("只有在"),a("code",[s._v("y")]),s._v("前面才匹配，必须写成"),a("code",[s._v("/x(?=y)/")]),s._v("。比如，只匹配百分号之前的数字，要写成"),a("code",[s._v("/\\d+(?=%)/")]),s._v("。“先行否定断言”指的是，"),a("code",[s._v("x")]),s._v("只有不在"),a("code",[s._v("y")]),s._v("前面才匹配，必须写成"),a("code",[s._v("/x(?!y)/")]),s._v("。比如，只匹配不在百分号之前的数字，要写成"),a("code",[s._v("/\\d+(?!%)/")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/\\d+(?=%)/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'100% of US presidents have been male'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["100"]')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("\\d"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'that’s all 44 of them'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["44"]')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面两个字符串，如果互换正则表达式，就不会得到相同结果。另外，还可以看到，“先行断言”括号之中的部分（"),a("code",[s._v("(?=%)")]),s._v("），是不计入返回结果的。")]),s._v(" "),a("p",[s._v("“后行断言”正好与“先行断言”相反，"),a("code",[s._v("x")]),s._v("只有在"),a("code",[s._v("y")]),s._v("后面才匹配，必须写成"),a("code",[s._v("/(?<=y)x/")]),s._v("。比如，只匹配美元符号之后的数字，要写成"),a("code",[s._v("/(?<=\\$)\\d+/")]),s._v("。“后行否定断言”则与“先行否定断言”相反，"),a("code",[s._v("x")]),s._v("只有不在"),a("code",[s._v("y")]),s._v("后面才匹配，必须写成"),a("code",[s._v("/(?<!y)x/")]),s._v("。比如，只匹配不在美元符号后面的数字，要写成"),a("code",[s._v("/(?<!\\$)\\d+/")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/(?<=\\$)\\d+/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Benjamin Franklin is on the $100 bill'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["100"]')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\\$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\\d"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'it’s is worth about €90'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("                "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["90"]')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面的例子中，“后行断言”的括号之中的部分（"),a("code",[s._v("(?<=\\$)")]),s._v("），也是不计入返回结果。")]),s._v(" "),a("p",[s._v("下面的例子是使用后行断言进行字符串替换。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RE_DOLLAR_PREFIX")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/(?<=\\$)foo/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'$foo %foo foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RE_DOLLAR_PREFIX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'bar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// '$bar %foo foo'")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("上面代码中，只有在美元符号后面的"),a("code",[s._v("foo")]),s._v("才会被替换。")]),s._v(" "),a("p",[s._v("“后行断言”的实现，需要先匹配"),a("code",[s._v("/(?<=y)x/")]),s._v("的"),a("code",[s._v("x")]),s._v("，然后再回到左边，匹配"),a("code",[s._v("y")]),s._v("的部分。这种“先右后左”的执行顺序，与所有其他正则操作相反，导致了一些不符合预期的行为。")]),s._v(" "),a("p",[s._v("首先，后行断言的组匹配，与正常情况下结果是不一样的。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/(?<=(\\d+)(\\d+))$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1053'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["", "1", "053"]')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\\d"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\\d"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("$"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1053'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["1053", "105", "3"]')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码中，需要捕捉两个组匹配。没有“后行断言”时，第一个括号是贪婪模式，第二个括号只能捕获一个字符，所以结果是"),a("code",[s._v("105")]),s._v("和"),a("code",[s._v("3")]),s._v("。而“后行断言”时，由于执行顺序是从右到左，第二个括号是贪婪模式，第一个括号只能捕获一个字符，所以结果是"),a("code",[s._v("1")]),s._v("和"),a("code",[s._v("053")]),s._v("。")]),s._v(" "),a("p",[s._v("其次，“后行断言”的反斜杠引用，也与通常的顺序相反，必须放在对应的那个括号之前。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/(?<=(o)d\\1)r/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hodor'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// null")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v("\\"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("d")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("r"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hodor'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["r", "o"]')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码中，如果后行断言的反斜杠引用（"),a("code",[s._v("\\1")]),s._v("）放在括号的后面，就不会得到匹配结果，必须放在前面才可以。因为后行断言是先从左到右扫描，发现匹配以后再回过头，从右到左完成反斜杠引用。")]),s._v(" "),a("h2",{attrs:{id:"unicode-属性类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unicode-属性类"}},[s._v("#")]),s._v(" Unicode 属性类")]),s._v(" "),a("p",[s._v("ES2018 "),a("a",{attrs:{href:"https://github.com/tc39/proposal-regexp-unicode-property-escapes",target:"_blank",rel:"noopener noreferrer"}},[s._v("引入"),a("OutboundLink")],1),s._v("了一种新的类的写法"),a("code",[s._v("\\p{...}")]),s._v("和"),a("code",[s._v("\\P{...}")]),s._v("，允许正则表达式匹配符合 Unicode 某种属性的所有字符。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" regexGreekSymbol "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/\\p{Script=Greek}/u")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nregexGreekSymbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'π'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("\\p{Script=Greek}")]),s._v("指定匹配一个希腊文字母，所以匹配"),a("code",[s._v("π")]),s._v("成功。")]),s._v(" "),a("p",[s._v("Unicode 属性类要指定属性名和属性值。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("\\p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("UnicodePropertyName"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("UnicodePropertyValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("对于某些属性，可以只写属性名，或者只写属性值。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("\\p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("UnicodePropertyName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\\p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("UnicodePropertyValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("code",[s._v("\\P{…}")]),s._v("是"),a("code",[s._v("\\p{…}")]),s._v("的反向匹配，即匹配不满足条件的字符。")]),s._v(" "),a("p",[s._v("注意，这两种类只对 Unicode 有效，所以使用的时候一定要加上"),a("code",[s._v("u")]),s._v("修饰符。如果不加"),a("code",[s._v("u")]),s._v("修饰符，正则表达式使用"),a("code",[s._v("\\p")]),s._v("和"),a("code",[s._v("\\P")]),s._v("会报错，ECMAScript 预留了这两个类。")]),s._v(" "),a("p",[s._v("由于 Unicode 的各种属性非常多，所以这种新的类的表达能力非常强。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/^\\p{Decimal_Number}+$/u")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nregex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'𝟏𝟐𝟑𝟜𝟝𝟞𝟩𝟪𝟫𝟬𝟭𝟮𝟯𝟺𝟻𝟼'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码中，属性类指定匹配所有十进制字符，可以看到各种字型的十进制字符都会匹配成功。")]),s._v(" "),a("p",[a("code",[s._v("\\p{Number}")]),s._v("甚至能匹配罗马数字。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 匹配所有数字")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/^\\p{Number}+$/u")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nregex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'²³¹¼½¾'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\nregex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'㉛㉜㉝'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\nregex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("下面是其他一些例子。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 匹配所有空格")]),s._v("\n\\p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("White_Space"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 匹配各种文字的所有字母，等同于 Unicode 版的 \\w")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\\p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("Alphabetic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\\p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("Mark"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\\p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("Decimal_Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\\p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("Connector_Punctuation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\\p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("Join_Control"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 匹配各种文字的所有非字母的字符，等同于 Unicode 版的 \\W")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\\p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("Alphabetic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\\p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("Mark"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\\p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("Decimal_Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\\p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("Connector_Punctuation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\\p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("Join_Control"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 匹配 Emoji")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("\\p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("Emoji_Modifier_Base"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\\p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("Emoji_Modifier"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\\p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("Emoji_Presentation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\\p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("Emoji"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\\uFE0F"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("gu\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 匹配所有的箭头字符")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" regexArrows "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/^\\p{Block=Arrows}+$/u")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nregexArrows"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'←↑→↓↔↕↖↗↘↙⇏⇐⇑⇒⇓⇔⇕⇖⇗⇘⇙⇧⇩'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("h2",{attrs:{id:"具名组匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#具名组匹配"}},[s._v("#")]),s._v(" 具名组匹配")]),s._v(" "),a("h3",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[s._v("#")]),s._v(" 简介")]),s._v(" "),a("p",[s._v("正则表达式使用圆括号进行组匹配。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RE_DATE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/(\\d{4})-(\\d{2})-(\\d{2})/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面代码中，正则表达式里面有三组圆括号。使用"),a("code",[s._v("exec")]),s._v("方法，就可以将这三组匹配结果提取出来。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RE_DATE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/(\\d{4})-(\\d{2})-(\\d{2})/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" matchObj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RE_DATE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1999-12-31'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" year "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" matchObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1999")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" month "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" matchObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 12")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" day "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" matchObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 31")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("组匹配的一个问题是，每一组的匹配含义不容易看出来，而且只能用数字序号（比如"),a("code",[s._v("matchObj[1]")]),s._v("）引用，要是组的顺序变了，引用的时候就必须修改序号。")]),s._v(" "),a("p",[s._v("ES2018 引入了"),a("a",{attrs:{href:"https://github.com/tc39/proposal-regexp-named-groups",target:"_blank",rel:"noopener noreferrer"}},[s._v("具名组匹配"),a("OutboundLink")],1),s._v("（Named Capture Groups），允许为每一个组匹配指定一个名字，既便于阅读代码，又便于引用。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RE_DATE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" matchObj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RE_DATE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1999-12-31'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" year "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" matchObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("groups"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("year"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "1999"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" month "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" matchObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("groups"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("month"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "12"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" day "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" matchObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("groups"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("day"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "31"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("上面代码中，“具名组匹配”在圆括号内部，模式的头部添加“问号 + 尖括号 + 组名”（"),a("code",[s._v("?<year>")]),s._v("），然后就可以在"),a("code",[s._v("exec")]),s._v("方法返回结果的"),a("code",[s._v("groups")]),s._v("属性上引用该组名。同时，数字序号（"),a("code",[s._v("matchObj[1]")]),s._v("）依然有效。")]),s._v(" "),a("p",[s._v("具名组匹配等于为每一组匹配加上了 ID，便于描述匹配的目的。如果组的顺序变了，也不用改变匹配后的处理代码。")]),s._v(" "),a("p",[s._v("如果具名组没有匹配，那么对应的"),a("code",[s._v("groups")]),s._v("对象属性会是"),a("code",[s._v("undefined")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RE_OPT_A")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/^(?<as>a+)?$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" matchObj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RE_OPT_A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nmatchObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("groups"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("as "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// undefined")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'as'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" matchObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("groups "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("上面代码中，具名组"),a("code",[s._v("as")]),s._v("没有找到匹配，那么"),a("code",[s._v("matchObj.groups.as")]),s._v("属性值就是"),a("code",[s._v("undefined")]),s._v("，并且"),a("code",[s._v("as")]),s._v("这个键名在"),a("code",[s._v("groups")]),s._v("是始终存在的。")]),s._v(" "),a("h3",{attrs:{id:"解构赋值和替换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解构赋值和替换"}},[s._v("#")]),s._v(" 解构赋值和替换")]),s._v(" "),a("p",[s._v("有了具名组匹配以后，可以使用解构赋值直接从匹配结果上为变量赋值。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("groups"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("one"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" two"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/^(?<one>.*):(?<two>.*)$/u")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'foo:bar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\none  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// foo")]),s._v("\ntwo  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// bar")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("字符串替换时，使用"),a("code",[s._v("$<组名>")]),s._v("引用具名组。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" re "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/u")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2015-01-02'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'$<day>/$<month>/$<year>'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// '02/01/2015'")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("replace")]),s._v("方法的第二个参数是一个字符串，而不是正则表达式。")]),s._v(" "),a("p",[a("code",[s._v("replace")]),s._v("方法的第二个参数也可以是函数，该函数的参数序列如下。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2015-01-02'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n   matched"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 整个匹配结果 2015-01-02")]),s._v("\n   capture1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 第一个组匹配 2015")]),s._v("\n   capture2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 第二个组匹配 01")]),s._v("\n   capture3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 第三个组匹配 02")]),s._v("\n   position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 匹配开始的位置 0")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("S")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 原字符串 2015-01-02")]),s._v("\n   groups "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 具名组构成的一个对象 {year, month, day}")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("day"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" month"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" year"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" groups"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("${")]),s._v("day"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("${")]),s._v("month"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("${")]),s._v("year"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("具名组匹配在原来的基础上，新增了最后一个函数参数：具名组构成的一个对象。函数内部可以直接对这个对象进行解构赋值。")]),s._v(" "),a("h3",{attrs:{id:"引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用"}},[s._v("#")]),s._v(" 引用")]),s._v(" "),a("p",[s._v("如果要在正则表达式内部引用某个“具名组匹配”，可以使用"),a("code",[s._v("\\k<组名>")]),s._v("的写法。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RE_TWICE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/^(?<word>[a-z]+)!\\k<word>$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RE_TWICE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'abc!abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RE_TWICE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'abc!ab'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("数字引用（"),a("code",[s._v("\\1")]),s._v("）依然有效。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RE_TWICE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/^(?<word>[a-z]+)!\\1$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RE_TWICE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'abc!abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RE_TWICE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'abc!ab'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("这两种引用语法还可以同时使用。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RE_TWICE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/^(?<word>[a-z]+)!\\k<word>!\\1$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RE_TWICE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'abc!abc!abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RE_TWICE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'abc!abc!ab'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"正则匹配索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则匹配索引"}},[s._v("#")]),s._v(" 正则匹配索引")]),s._v(" "),a("p",[s._v("正则匹配结果的开始位置和结束位置，目前获取并不是很方便。正则实例的"),a("code",[s._v("exec()")]),s._v("方法，返回结果有一个"),a("code",[s._v("index")]),s._v("属性，可以获取整个匹配结果的开始位置，但是如果包含组匹配，每个组匹配的开始位置，很难拿到。")]),s._v(" "),a("p",[s._v("现在有一个"),a("a",{attrs:{href:"https://github.com/tc39/proposal-regexp-match-Indices",target:"_blank",rel:"noopener noreferrer"}},[s._v("第三阶段提案"),a("OutboundLink")],1),s._v("，为"),a("code",[s._v("exec()")]),s._v("方法的返回结果加上"),a("code",[s._v("indices")]),s._v("属性，在这个属性上面可以拿到匹配的开始位置和结束位置。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" text "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'zabbcdef'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" re "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/ab/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nresult"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("index "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1")]),s._v("\nresult"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("indices "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// [ [1, 3] ]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("上面例子中，"),a("code",[s._v("exec()")]),s._v("方法的返回结果"),a("code",[s._v("result")]),s._v("，它的"),a("code",[s._v("index")]),s._v("属性是整个匹配结果（"),a("code",[s._v("ab")]),s._v("）的开始位置，而它的"),a("code",[s._v("indices")]),s._v("属性是一个数组，成员是每个匹配的开始位置和结束位置的数组。由于该例子的正则表达式没有组匹配，所以"),a("code",[s._v("indices")]),s._v("数组只有一个成员，表示整个匹配的开始位置是"),a("code",[s._v("1")]),s._v("，结束位置是"),a("code",[s._v("3")]),s._v("。")]),s._v(" "),a("p",[s._v("注意，开始位置包含在匹配结果之中，但是结束位置不包含在匹配结果之中。比如，匹配结果为"),a("code",[s._v("ab")]),s._v("，分别是原始字符串的第1位和第2位，那么结束位置就是第3位。")]),s._v(" "),a("p",[s._v("如果正则表达式包含组匹配，那么"),a("code",[s._v("indices")]),s._v("属性对应的数组就会包含多个成员，提供每个组匹配的开始位置和结束位置。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" text "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'zabbcdef'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" re "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/ab+(cd)/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nresult"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("indices "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// [ [ 1, 6 ], [ 4, 6 ] ]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("上面例子中，正则表达式包含一个组匹配，那么"),a("code",[s._v("indices")]),s._v("属性数组就有两个成员，第一个成员是整个匹配结果（"),a("code",[s._v("abbcd")]),s._v("）的开始位置和结束位置，第二个成员是组匹配（"),a("code",[s._v("cd")]),s._v("）的开始位置和结束位置。")]),s._v(" "),a("p",[s._v("下面是多个组匹配的例子。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" text "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'zabbcdef'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" re "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/ab+(cd(ef))/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nresult"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("indices "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// [ [1, 8], [4, 8], [6, 8] ]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("上面例子中，正则表达式包含两个组匹配，所以"),a("code",[s._v("indices")]),s._v("属性数组就有三个成员。")]),s._v(" "),a("p",[s._v("如果正则表达式包含具名组匹配，"),a("code",[s._v("indices")]),s._v("属性数组还会有一个"),a("code",[s._v("groups")]),s._v("属性。该属性是一个对象，可以从该对象获取具名组匹配的开始位置和结束位置。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" text "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'zabbcdef'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" re "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/ab+(?<Z>cd)/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nresult"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("indices"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("groups "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// { Z: [ 4, 6 ] }")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("上面例子中，"),a("code",[s._v("exec()")]),s._v("方法返回结果的"),a("code",[s._v("indices.groups")]),s._v("属性是一个对象，提供具名组匹配"),a("code",[s._v("Z")]),s._v("的开始位置和结束位置。")]),s._v(" "),a("p",[s._v("如果获取组匹配不成功，"),a("code",[s._v("indices")]),s._v("属性数组的对应成员则为"),a("code",[s._v("undefined")]),s._v("，"),a("code",[s._v("indices.groups")]),s._v("属性对象的对应成员也是"),a("code",[s._v("undefined")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" text "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'zabbcdef'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" re "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/ab+(?<Z>ce)?/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nresult"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("indices"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// undefined")]),s._v("\nresult"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("indices"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("groups"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Z'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// undefined")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("上面例子中，由于组匹配不成功，所以"),a("code",[s._v("indices")]),s._v("属性数组和"),a("code",[s._v("indices.groups")]),s._v("属性对象对应的组匹配成员都是"),a("code",[s._v("undefined")]),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"string-prototype-matchall"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-matchall"}},[s._v("#")]),s._v(" String.prototype.matchAll()")]),s._v(" "),a("p",[s._v("如果一个正则表达式在字符串里面有多个匹配，现在一般使用"),a("code",[s._v("g")]),s._v("修饰符或"),a("code",[s._v("y")]),s._v("修饰符，在循环里面逐一取出。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/t(e)(st(\\d?))/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" string "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'test1test2test3'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" matches "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("match "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  matches"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\nmatches\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// [")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//   ["test1", "e", "st1", "1", index: 0, input: "test1test2test3"],')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//   ["test2", "e", "st2", "2", index: 5, input: "test1test2test3"],')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//   ["test3", "e", "st3", "3", index: 10, input: "test1test2test3"]')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("上面代码中，"),a("code",[s._v("while")]),s._v("循环取出每一轮的正则匹配，一共三轮。")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tc39/proposal-string-matchall",target:"_blank",rel:"noopener noreferrer"}},[s._v("ES2020"),a("OutboundLink")],1),s._v(" 增加了"),a("code",[s._v("String.prototype.matchAll()")]),s._v("方法，可以一次性取出所有匹配。不过，它返回的是一个遍历器（Iterator），而不是数组。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" string "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'test1test2test3'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/t(e)(st(\\d?))/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" match "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("of")]),s._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("matchAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["test1", "e", "st1", "1", index: 0, input: "test1test2test3"]')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["test2", "e", "st2", "2", index: 5, input: "test1test2test3"]')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// ["test3", "e", "st3", "3", index: 10, input: "test1test2test3"]')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("上面代码中，由于"),a("code",[s._v("string.matchAll(regex)")]),s._v("返回的是遍历器，所以可以用"),a("code",[s._v("for...of")]),s._v("循环取出。相对于返回数组，返回遍历器的好处在于，如果匹配结果是一个很大的数组，那么遍历器比较节省资源。")]),s._v(" "),a("p",[s._v("遍历器转为数组是非常简单的，使用"),a("code",[s._v("...")]),s._v("运算符和"),a("code",[s._v("Array.from()")]),s._v("方法就可以了。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 转为数组的方法一")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("matchAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 转为数组的方法二")]),s._v("\nArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("matchAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])])}),[],!1,null,null,null);t.default=e.exports}}]);