(window.webpackJsonp=window.webpackJsonp||[]).push([[149],{732:function(s,a,e){"use strict";e.r(a);var t=e(1),n=Object(t.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("p",[s._v("Python 是一种计算机编程语言。计算机编程语言和我们日常使用的自然语言有所不同，最大的区别就是，自然语言在不同的语境下有不同的理解，而计算机要根据编程语言执行任务，就必须保证编程语言写出的程序决不能有歧义，所以，任何一种编程语言都有自己的一套语法，编译器或者解释器就是负责把符合语法的程序代码转换成 CPU 能够执行的机器码，然后执行。Python 也不例外。")]),s._v(" "),e("p",[s._v("Python 的语法比较简单，采用缩进方式，写出来的代码就像下面的样子:")]),s._v(" "),e("div",{staticClass:"language-py line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# print absolute value of an integer:")]),s._v("\na "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("以 "),e("code",[s._v("#")]),s._v(" 开头的语句是注释，注释是给人看的，可以是任意内容，解释器会忽略掉注释。其他每一行都是一个语句，当语句以冒号 "),e("code",[s._v(":")]),s._v(" 结尾时，缩进的语句视为代码块。")]),s._v(" "),e("p",[s._v("缩进有利有弊。好处是强迫您写出格式化的代码，但没有规定缩进是几个空格还是 Tab。按照约定俗成的惯例，应该始终坚持使用 4 个空格的缩进。")]),s._v(" "),e("p",[s._v("缩进的另一个好处是强迫您写出缩进较少的代码，您会倾向于把一段很长的代码拆分成若干函数，从而得到缩进较少的代码。")]),s._v(" "),e("p",[s._v("缩进的坏处就是“复制－粘贴”功能失效了，这是最坑爹的地方。当您重构代码时，粘贴过去的代码必须重新检查缩进是否正确。此外，IDE 很难像格式化 Java 代码那样格式化 Python 代码。")]),s._v(" "),e("p",[s._v("最后，请务必注意，Python 程序是大小写敏感的，如果写错了大小写，程序会报错。")]),s._v(" "),e("h2",{attrs:{id:"数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[s._v("#")]),s._v(" 数据类型")]),s._v(" "),e("p",[s._v("计算机顾名思义就是可以做数学计算的机器，因此，计算机程序理所当然地可以处理各种数值。但是，计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据，不同的数据，需要定义不同的数据类型。在 Python 中，能够直接处理的数据类型有以下几种:")]),s._v(" "),e("h3",{attrs:{id:"整数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#整数"}},[s._v("#")]),s._v(" 整数")]),s._v(" "),e("p",[s._v("Python 可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样，例如: "),e("code",[s._v("1")]),s._v("，"),e("code",[s._v("100")]),s._v("，"),e("code",[s._v("-8080")]),s._v("，"),e("code",[s._v("0")]),s._v("，等等。")]),s._v(" "),e("p",[s._v("计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，十六进制用 "),e("code",[s._v("0x")]),s._v(" 前缀和 "),e("code",[s._v("0-9")]),s._v("，"),e("code",[s._v("a-f")]),s._v(" 表示，例如: "),e("code",[s._v("0xff00")]),s._v("，"),e("code",[s._v("0xa5b4c3d2")]),s._v("，等等。")]),s._v(" "),e("h3",{attrs:{id:"浮点数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浮点数"}},[s._v("#")]),s._v(" 浮点数")]),s._v(" "),e("p",[s._v("浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x10"),e("sup",[s._v("9")]),s._v(" 和 "),e("code",[s._v("12.3x108")]),s._v(" 是完全相等的。浮点数可以用数学写法，如 "),e("code",[s._v("1.23")]),s._v("，"),e("code",[s._v("3.14")]),s._v("，"),e("code",[s._v("-9.01")]),s._v("，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把 "),e("code",[s._v("10")]),s._v(" 用 "),e("code",[s._v("e")]),s._v(" 替代，1.23x10"),e("sup",[s._v("9")]),s._v(" 就是 "),e("code",[s._v("1.23e9")]),s._v("，或者 "),e("code",[s._v("12.3e8")]),s._v("，"),e("code",[s._v("0.000012")]),s._v(" 可以写成 "),e("code",[s._v("1.2e-5")]),s._v("，等等。")]),s._v(" "),e("p",[s._v("整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的(除法难道也是精确的？是的！)，而浮点数运算则可能会有四舍五入的误差。")]),s._v(" "),e("h3",{attrs:{id:"字符串"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[s._v("#")]),s._v(" 字符串")]),s._v(" "),e("h4",{attrs:{id:"简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[s._v("#")]),s._v(" 简介")]),s._v(" "),e("p",[s._v("字符串是以单引号 "),e("code",[s._v("'")]),s._v(" 或双引号 "),e("code",[s._v('"')]),s._v(" 括起来的任意文本，比如 "),e("code",[s._v("'abc'")]),s._v("，"),e("code",[s._v('"xyz"')]),s._v(" 等等。请注意，"),e("code",[s._v("''")]),s._v(" 或 "),e("code",[s._v('""')]),s._v(" 本身只是一种表示方式，不是字符串的一部分，因此，字符串 "),e("code",[s._v("'abc'")]),s._v(" 只有 "),e("code",[s._v("a")]),s._v("，"),e("code",[s._v("b")]),s._v("，"),e("code",[s._v("c")]),s._v(" 这 3 个字符。如果 "),e("code",[s._v("'")]),s._v(" 本身也是一个字符，那就可以用 "),e("code",[s._v('""')]),s._v(" 括起来，比如 "),e("code",[s._v('"I\'m OK"')]),s._v(" 包含的字符是 "),e("code",[s._v("I")]),s._v("，"),e("code",[s._v("'")]),s._v("，"),e("code",[s._v("m")]),s._v("，空格，"),e("code",[s._v("O")]),s._v("，"),e("code",[s._v("K")]),s._v(" 这 6 个字符。")]),s._v(" "),e("h4",{attrs:{id:"转义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#转义"}},[s._v("#")]),s._v(" 转义")]),s._v(" "),e("p",[s._v("如果字符串内部既包含"),e("code",[s._v("'")]),s._v("又包含 "),e("code",[s._v('"')]),s._v(" 怎么办？可以用转义字符 "),e("code",[s._v("\\")]),s._v(" 来标识，比如:")]),s._v(" "),e("div",{staticClass:"language-py line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'I\\'m \\\"OK\\\"!'")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("表示的字符串内容是:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('I\'m "OK"!\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("转义字符 "),e("code",[s._v("\\")]),s._v(" 可以转义很多字符，比如 "),e("code",[s._v("\\n")]),s._v(" 表示换行，"),e("code",[s._v("\\t")]),s._v(" 表示制表符，字符 "),e("code",[s._v("\\")]),s._v(" 本身也要转义，所以 "),e("code",[s._v("\\\\")]),s._v(" 表示的字符就是 "),e("code",[s._v("\\")]),s._v("，可以在 Python 的交互式命令行用 "),e("code",[s._v("print()")]),s._v(" 打印字符串看看:")]),s._v(" "),e("div",{staticClass:"language-py line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'I\\'m ok.'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nI'm ok"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'I\\'m learning\\nPython.'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nI'm learning\nPython"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\\\\\n\\\\'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\\\n\\\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("h3",{attrs:{id:"非转义字符串"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#非转义字符串"}},[s._v("#")]),s._v(" 非转义字符串")]),s._v(" "),e("p",[s._v("如果字符串里面有很多字符都需要转义，就需要加很多 "),e("code",[s._v("\\")]),s._v("，为了简化，Python 还允许用 "),e("code",[s._v("r''")]),s._v(" 表示 "),e("code",[s._v("''")]),s._v(" 内部的字符串默认不转义，可以自己试试:")]),s._v(" "),e("div",{staticClass:"language-py line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\\\\\t\\\\'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\\       \\\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("r'\\\\\\t\\\\'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\\\\\\t\\\\\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("h3",{attrs:{id:"多行字符串"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多行字符串"}},[s._v("#")]),s._v(" 多行字符串")]),s._v(" "),e("p",[s._v("如果字符串内部有很多换行，用 "),e("code",[s._v("\\n")]),s._v(" 写在一行里不好阅读，为了简化，Python 允许用 "),e("code",[s._v("'''...'''")]),s._v(" 的格式表示多行内容，可以自己试试:")]),s._v(" "),e("div",{staticClass:"language-py line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v("'''line1\n... line2\n... line3'''")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nline1\nline2\nline3\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("上面是在交互式命令行内输入，注意在输入多行内容时，提示符由 "),e("code",[s._v(">>>")]),s._v(" 变为 "),e("code",[s._v("...")]),s._v("，提示您可以接着上一行输入，注意 "),e("code",[s._v("...")]),s._v(" 是提示符，不是代码的一部分:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("┌────────────────────────────────────────────────────────┐\n│Command Prompt - python                           _ □ x │\n├────────────────────────────────────────────────────────┤\n│>>> print('''line1                                      │\n│... line2                                               │\n│... line3''')                                           │\n│line1                                                   │\n│line2                                                   │\n│line3                                                   │\n│                                                        │\n│>>>_                                                    │\n│                                                        │\n└────────────────────────────────────────────────────────┘\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br")])]),e("p",[s._v("当输入完结束符 "),e("code",[s._v("```")]),s._v(" 和括号 "),e("code",[s._v(")")]),s._v(" 后，执行该语句并打印结果。")]),s._v(" "),e("p",[s._v("如果写成程序并存为 "),e("code",[s._v(".py")]),s._v(" 文件，就是:")]),s._v(" "),e("div",{staticClass:"language-py line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v("'''line1\nline2\nline3'''")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("多行字符串 "),e("code",[s._v("'''...'''")]),s._v(" 还可以在前面加上 "),e("code",[s._v("r")]),s._v(" 使用，请自行测试:")]),s._v(" "),e("h3",{attrs:{id:"布尔值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#布尔值"}},[s._v("#")]),s._v(" 布尔值")]),s._v(" "),e("p",[s._v("布尔值和布尔代数的表示完全一致，一个布尔值只有 "),e("code",[s._v("True")]),s._v("、"),e("code",[s._v("False")]),s._v(" 两种值，在 Python 中，可以直接用 "),e("code",[s._v("True")]),s._v("、"),e("code",[s._v("False")]),s._v(" 表示布尔值(请注意大小写)，也可以通过布尔运算计算出来:")]),s._v(" "),e("div",{staticClass:"language-py line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("布尔值可以用 "),e("code",[s._v("and")]),s._v("、"),e("code",[s._v("or")]),s._v(" 和 "),e("code",[s._v("not")]),s._v(" 运算。")]),s._v(" "),e("p",[e("code",[s._v("and")]),s._v(" 运算是与运算，只有所有都为 "),e("code",[s._v("True")]),s._v("，"),e("code",[s._v("and")]),s._v(" 运算结果才是 "),e("code",[s._v("True")]),s._v(":")]),s._v(" "),e("div",{staticClass:"language-py line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[e("code",[s._v("or")]),s._v(" 运算是或运算，只要其中有一个为 "),e("code",[s._v("True")]),s._v("，"),e("code",[s._v("or")]),s._v(" 运算结果就是 "),e("code",[s._v("True")]),s._v(":")]),s._v(" "),e("div",{staticClass:"language-py line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("or")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("or")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("or")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("or")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[e("code",[s._v("not")]),s._v(" 运算是非运算，它是一个单目运算符，把 "),e("code",[s._v("True")]),s._v(" 变成 "),e("code",[s._v("False")]),s._v("，"),e("code",[s._v("False")]),s._v(" 变成 "),e("code",[s._v("True")]),s._v(":")]),s._v(" "),e("div",{staticClass:"language-py line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("布尔值经常用在条件判断中，比如:")]),s._v(" "),e("div",{staticClass:"language-py line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" age "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'adult'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'teenager'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("h3",{attrs:{id:"空值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#空值"}},[s._v("#")]),s._v(" 空值")]),s._v(" "),e("p",[s._v("空值是 Python 里一个特殊的值，用 "),e("code",[s._v("None")]),s._v(" 表示。"),e("code",[s._v("None")]),s._v(" 不能理解为 "),e("code",[s._v("0")]),s._v("，因为 "),e("code",[s._v("0")]),s._v(" 是有意义的，而 "),e("code",[s._v("None")]),s._v(" 是一个特殊的空值。")]),s._v(" "),e("p",[s._v("此外，Python 还提供了列表、字典等多种数据类型，还允许创建自定义数据类型，我们后面会继续讲到。")]),s._v(" "),e("h2",{attrs:{id:"变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[s._v("#")]),s._v(" 变量")]),s._v(" "),e("p",[s._v("变量的概念基本上和初中代数的方程变量是一致的，只是在计算机程序中，变量不仅可以是数字，还可以是任意数据类型。")]),s._v(" "),e("p",[s._v("变量在程序中就是用一个变量名表示了，变量名必须是大小写英文、数字和 "),e("code",[s._v("_")]),s._v(" 的组合，且不能用数字开头，比如:")]),s._v(" "),e("div",{staticClass:"language-py line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[s._v("a "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("变量 "),e("code",[s._v("a")]),s._v(" 是一个整数。")]),s._v(" "),e("div",{staticClass:"language-py line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[s._v("t_007 "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'T007'")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("变量 "),e("code",[s._v("t_007")]),s._v(" 是一个字符串。")]),s._v(" "),e("div",{staticClass:"language-py line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[s._v("Answer "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("变量 "),e("code",[s._v("Answer")]),s._v(" 是一个布尔值 "),e("code",[s._v("True")]),s._v("。")]),s._v(" "),e("p",[s._v("在 Python 中，等号 "),e("code",[s._v("=")]),s._v(" 是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，例如:")]),s._v(" "),e("div",{staticClass:"language-py line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -*- coding: utf-8 -*-")]),s._v("\n\na "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# a是整数")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\na "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ABC'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# a变为字符串")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如 Java 是静态语言，赋值语句如下("),e("code",[s._v("//")]),s._v(" 表示注释):")]),s._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// a是整数类型变量")]),s._v("\na "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ABC"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 错误:不能把字符串赋给整型变量")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("和静态语言相比，动态语言更灵活，就是这个原因。")]),s._v(" "),e("p",[s._v("请不要把赋值语句的等号等同于数学的等号。比如下面的代码:")]),s._v(" "),e("div",{staticClass:"language-py line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[s._v("x "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\nx "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("如果从数学上理解 "),e("code",[s._v("x = x + 2")]),s._v(" 那无论如何是不成立的，在程序中，赋值语句先计算右侧的表达式 "),e("code",[s._v("x + 2")]),s._v("，得到结果 "),e("code",[s._v("12")]),s._v("，再赋给变量 "),e("code",[s._v("x")]),s._v("。由于 "),e("code",[s._v("x")]),s._v(" 之前的值是 "),e("code",[s._v("10")]),s._v("，重新赋值后，"),e("code",[s._v("x")]),s._v(" 的值变成 "),e("code",[s._v("12")]),s._v("。")]),s._v(" "),e("p",[s._v("最后，理解变量在计算机内存中的表示也非常重要。当我们写:")]),s._v(" "),e("div",{staticClass:"language-py line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[s._v("a "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ABC'")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("时，Python 解释器干了两件事情:")]),s._v(" "),e("ol",[e("li",[e("p",[s._v("在内存中创建了一个 "),e("code",[s._v("'ABC'")]),s._v(" 的字符串；")])]),s._v(" "),e("li",[e("p",[s._v("在内存中创建了一个名为 a 的变量，并把它指向 "),e("code",[s._v("'ABC'")]),s._v("。")])])]),s._v(" "),e("p",[s._v("也可以把一个变量 a 赋值给另一个变量 b，这个操作实际上是把变量 b 指向变量 a 所指向的数据，例如下面的代码:")]),s._v(" "),e("div",{staticClass:"language-py line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -*- coding: utf-8 -*-")]),s._v("\n\na "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ABC'")]),s._v("\nb "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a\na "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'XYZ'")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("最后一行打印出变量 b 的内容到底是 "),e("code",[s._v("'ABC'")]),s._v(" 呢还是 "),e("code",[s._v("'XYZ'")]),s._v("？如果从数学意义上理解，就会错误地得出 b 和 a 相同，也应该是 "),e("code",[s._v("'XYZ'")]),s._v("，但实际上 b 的值是 "),e("code",[s._v("'ABC'")]),s._v("，让我们一行一行地执行代码，就可以看到到底发生了什么事:")]),s._v(" "),e("ol",[e("li",[e("p",[s._v("执行 "),e("code",[s._v("a = 'ABC")]),s._v("'，解释器创建了字符串 "),e("code",[s._v("'ABC'")]),s._v("和变量 a，并把 a 指向 "),e("code",[s._v("'ABC'")])])]),s._v(" "),e("li",[e("p",[s._v("执行 "),e("code",[s._v("b = a")]),s._v("，解释器创建了变量 b，并把 b 指向 a 指向的字符串 "),e("code",[s._v("'ABC'")])])]),s._v(" "),e("li",[e("p",[s._v("执行 "),e("code",[s._v("a = 'XYZ'")]),s._v("，解释器创建了字符串 "),e("code",[s._v("'XYZ'")]),s._v("，并把 a 的指向改为 "),e("code",[s._v("'XYZ'")]),s._v("，但 b 并没有更改")])]),s._v(" "),e("li",[e("p",[s._v("所以，最后打印变量 b 的结果自然是 "),e("code",[s._v("'ABC'")]),s._v("了。")])])]),s._v(" "),e("h3",{attrs:{id:"常量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常量"}},[s._v("#")]),s._v(" 常量")]),s._v(" "),e("p",[s._v("所谓常量就是不能变的变量，比如常用的数学常数 π 就是一个常量。在 Python 中，通常用全部大写的变量名表示常量:")]),s._v(" "),e("div",{staticClass:"language-py line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[s._v("PI "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.14159265359")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("但事实上 PI 仍然是一个变量，Python 根本没有任何机制保证 PI 不会被改变，所以，用全部大写的变量名表示常量只是一个习惯上的用法，如果您一定要改变变量 PI 的值，也没人能拦住您。")]),s._v(" "),e("p",[s._v("最后解释一下整数的除法为什么也是精确的。在 Python 中，有两种除法，一种除法是 "),e("code",[s._v("/")]),s._v(":")]),s._v(" "),e("div",{staticClass:"language-py line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.3333333333333335")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[e("code",[s._v("/")]),s._v(" 除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数:")]),s._v(" "),e("div",{staticClass:"language-py line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.0")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("还有一种除法是 "),e("code",[s._v("//")]),s._v("，称为地板除，两个整数的除法仍然是整数:")]),s._v(" "),e("div",{staticClass:"language-py line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("您没有看错，整数的地板除 "),e("code",[s._v("//")]),s._v(" 永远是整数，即使除不尽。要做精确的除法，使用 "),e("code",[s._v("/")]),s._v(" 就可以。")]),s._v(" "),e("p",[s._v("因为 "),e("code",[s._v("//")]),s._v(" 除法只取结果的整数部分，所以 Python 还提供一个余数运算 "),e("code",[s._v("%")]),s._v("，可以得到两个整数相除的余数:")]),s._v(" "),e("div",{staticClass:"language-py line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("无论整数做 "),e("code",[s._v("//")]),s._v(" 除法还是取余数，结果永远是整数，所以，整数运算结果永远是精确的。")]),s._v(" "),e("h2",{attrs:{id:"小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),e("p",[s._v("Python 支持多种数据类型，在计算机内部，可以把任何数据都看成一个“对象”，而变量就是在程序中用来指向这些数据对象的，对变量赋值就是把数据和变量给关联起来。")]),s._v(" "),e("p",[s._v("对变量赋值 "),e("code",[s._v("x = y")]),s._v(" 是把变量 x 指向真正的对象，该对象是变量 y 所指向的。随后对变量 y 的赋值不影响变量 x 的指向。")]),s._v(" "),e("p",[s._v("注意:Python 的整数没有大小限制，而某些语言的整数根据其存储长度是有大小限制的，例如 Java 对 32 位整数的范围限制在 -2147483648 - 2147483647。")]),s._v(" "),e("p",[s._v("Python 的浮点数也没有大小限制，但是超出一定范围就直接表示为 "),e("code",[s._v("inf")]),s._v("(无限大)。")])])}),[],!1,null,null,null);a.default=n.exports}}]);