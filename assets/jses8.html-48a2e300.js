const e=JSON.parse('{"key":"v-df44119a","path":"/zh/front-end/advanced-js/jses8.html","title":"8.Class","lang":"zh-CN","frontmatter":{"icon":"js","category":"Web 前端","tag":"JS 进阶教程","date":"2021-08-01T00:00:00.000Z","title":"8.Class","description":"Class 的由来 JavaScript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子。 上面这种写法跟传统的面向对象语言（比如 C++ 和 Java）差异很大，很容易让新学习这门语言的程序员感到困惑。 ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。 基本上，ES...","head":[["meta",{"property":"og:url","content":"https://harryxiong24.github.io/zh/front-end/advanced-js/jses8.html"}],["meta",{"property":"og:site_name","content":"Harry Xiong"}],["meta",{"property":"og:title","content":"8.Class"}],["meta",{"property":"og:description","content":"Class 的由来 JavaScript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子。 上面这种写法跟传统的面向对象语言（比如 C++ 和 Java）差异很大，很容易让新学习这门语言的程序员感到困惑。 ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。 基本上，ES..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-11T06:59:35.000Z"}],["meta",{"property":"article:author","content":"Harry Xiong"}],["meta",{"property":"article:tag","content":"JS 进阶教程"}],["meta",{"property":"article:published_time","content":"2021-08-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-11T06:59:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"8.Class\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-08-01T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-11T06:59:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Harry Xiong\\",\\"url\\":\\"https://harryxiong24.github.io\\"}]}"]]},"headers":[{"level":2,"title":"Class 的由来","slug":"class-的由来","link":"#class-的由来","children":[]},{"level":2,"title":"Class 的本质","slug":"class-的本质","link":"#class-的本质","children":[{"level":3,"title":"与JS类的转化","slug":"与js类的转化","link":"#与js类的转化","children":[]},{"level":3,"title":"注意点","slug":"注意点","link":"#注意点","children":[]}]},{"level":2,"title":"基本语法","slug":"基本语法","link":"#基本语法","children":[{"level":3,"title":"Class 表达式","slug":"class-表达式","link":"#class-表达式","children":[]},{"level":3,"title":"constructor 方法","slug":"constructor-方法","link":"#constructor-方法","children":[]},{"level":3,"title":"取值函数（getter）和存值函数（setter）","slug":"取值函数-getter-和存值函数-setter","link":"#取值函数-getter-和存值函数-setter","children":[]},{"level":3,"title":"实例属性的新写法","slug":"实例属性的新写法","link":"#实例属性的新写法","children":[]},{"level":3,"title":"属性表达式","slug":"属性表达式","link":"#属性表达式","children":[]},{"level":3,"title":"注意点","slug":"注意点-1","link":"#注意点-1","children":[]}]},{"level":2,"title":"类的实例","slug":"类的实例","link":"#类的实例","children":[]},{"level":2,"title":"静态方法","slug":"静态方法","link":"#静态方法","children":[{"level":3,"title":"基本使用","slug":"基本使用","link":"#基本使用","children":[]},{"level":3,"title":"注意点","slug":"注意点-2","link":"#注意点-2","children":[]},{"level":3,"title":"静态方法继承问题","slug":"静态方法继承问题","link":"#静态方法继承问题","children":[]}]},{"level":2,"title":"静态属性","slug":"静态属性","link":"#静态属性","children":[]},{"level":2,"title":"new.target 属性","slug":"new-target-属性","link":"#new-target-属性","children":[{"level":3,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[]},{"level":3,"title":"实现必须继承后使用的类","slug":"实现必须继承后使用的类","link":"#实现必须继承后使用的类","children":[]}]},{"level":2,"title":"私有方法和私有属性","slug":"私有方法和私有属性","link":"#私有方法和私有属性","children":[{"level":3,"title":"现有的解决方案","slug":"现有的解决方案","link":"#现有的解决方案","children":[]},{"level":3,"title":"私有属性的提案","slug":"私有属性的提案","link":"#私有属性的提案","children":[]},{"level":3,"title":"in 运算符","slug":"in-运算符","link":"#in-运算符","children":[]}]},{"level":2,"title":"继承的实现","slug":"继承的实现","link":"#继承的实现","children":[{"level":3,"title":"基本使用","slug":"基本使用-1","link":"#基本使用-1","children":[]},{"level":3,"title":"本质","slug":"本质","link":"#本质","children":[]},{"level":3,"title":"获取父类","slug":"获取父类","link":"#获取父类","children":[]}]},{"level":2,"title":"super 关键字","slug":"super-关键字","link":"#super-关键字","children":[{"level":3,"title":"作为函数使用","slug":"作为函数使用","link":"#作为函数使用","children":[]},{"level":3,"title":"作为对象使用","slug":"作为对象使用","link":"#作为对象使用","children":[]}]},{"level":2,"title":"ES6 继承机制","slug":"es6-继承机制","link":"#es6-继承机制","children":[{"level":3,"title":"基本概述","slug":"基本概述","link":"#基本概述","children":[]},{"level":3,"title":"extends 关键字","slug":"extends-关键字","link":"#extends-关键字","children":[]},{"level":3,"title":"实例的 proto 属性","slug":"实例的-proto-属性","link":"#实例的-proto-属性","children":[]}]},{"level":2,"title":"继承原生构造函数","slug":"继承原生构造函数","link":"#继承原生构造函数","children":[]},{"level":2,"title":"Mixin 模式的实现","slug":"mixin-模式的实现","link":"#mixin-模式的实现","children":[]}],"git":{"createdTime":1686825018000,"updatedTime":1689058775000,"contributors":[{"name":"harryxiong24","email":"harryxiong24@gmail.com","commits":3}]},"readingTime":{"minutes":33.59,"words":10078},"filePathRelative":"zh/front-end/advanced-js/jses8.md","localizedDate":"2021年8月1日","excerpt":"","autoDesc":true}');export{e as data};
