import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as n,e as l}from"./app-06216ea5.js";const s={},a=l(`<h2 id="请求与响应" tabindex="-1"><a class="header-anchor" href="#请求与响应" aria-hidden="true">#</a> 请求与响应</h2><h3 id="_4-1-理解" tabindex="-1"><a class="header-anchor" href="#_4-1-理解" aria-hidden="true">#</a> 4.1 理解</h3><p><img src="https://github.com/HarryXiong24/HarryXiong24.github.io/blob/main/public/zh/back-end/servlet/6.png?raw=true" alt="img" loading="lazy"></p><h3 id="_4-2-request" tabindex="-1"><a class="header-anchor" href="#_4-2-request" aria-hidden="true">#</a> 4.2 Request</h3><p>HttpServletRequest对象方法</p><table><thead><tr><th style="text-align:left;">序号</th><th style="text-align:left;">方法 &amp; 描述</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;"><strong>Cookie[] getCookies()</strong> 返回一个数组，包含客户端发送该请求的所有的 Cookie 对象。</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;"><strong>Enumeration getAttributeNames()</strong> 返回一个枚举，包含提供给该请求可用的属性名称。</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;"><strong>Enumeration getHeaderNames()</strong> 返回一个枚举，包含在该请求中包含的所有的头名。</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;"><strong>Enumeration getParameterNames()</strong> 返回一个 String 对象的枚举，包含在该请求中包含的参数的名称。</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;"><strong>HttpSession getSession()</strong> 返回与该请求关联的当前 session 会话，或者如果请求没有 session 会话，则创建一个。</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;"><strong>HttpSession getSession(boolean create)</strong> 返回与该请求关联的当前 HttpSession，或者如果没有当前会话，且创建是真的，则返回一个新的 session 会话。</td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;"><strong>Locale getLocale()</strong> 基于 Accept-Language 头，返回客户端接受内容的首选的区域设置。</td></tr><tr><td style="text-align:left;">8</td><td style="text-align:left;"><strong>Object getAttribute(String name)</strong> 以对象形式返回已命名属性的值，如果没有给定名称的属性存在，则返回 null。</td></tr><tr><td style="text-align:left;">9</td><td style="text-align:left;"><strong>ServletInputStream getInputStream()</strong> 使用 ServletInputStream，以二进制数据形式检索请求的主体。</td></tr><tr><td style="text-align:left;">10</td><td style="text-align:left;"><strong>String getAuthType()</strong> 返回用于保护 Servlet 的身份验证方案的名称，例如，&quot;BASIC&quot; 或 &quot;SSL&quot;，如果JSP没有受到保护则返回 null。</td></tr><tr><td style="text-align:left;">11</td><td style="text-align:left;"><strong>String getCharacterEncoding()</strong> 返回请求主体中使用的字符编码的名称。</td></tr><tr><td style="text-align:left;">12</td><td style="text-align:left;"><strong>String getContentType()</strong> 返回请求主体的 MIME 类型，如果不知道类型则返回 null。</td></tr><tr><td style="text-align:left;">13</td><td style="text-align:left;"><strong>String getContextPath()</strong> 返回指示请求上下文的请求 URI 部分。</td></tr><tr><td style="text-align:left;">14</td><td style="text-align:left;"><strong>String getHeader(String name)</strong> 以字符串形式返回指定的请求头的值。</td></tr><tr><td style="text-align:left;">15</td><td style="text-align:left;"><strong>String getMethod()</strong> 返回请求的 HTTP 方法的名称，例如，GET、POST 或 PUT。</td></tr><tr><td style="text-align:left;">16</td><td style="text-align:left;"><strong>String getParameter(String name)</strong> 以字符串形式返回请求参数的值，或者如果参数不存在则返回 null。</td></tr><tr><td style="text-align:left;">17</td><td style="text-align:left;"><strong>String getPathInfo()</strong> 当请求发出时，返回与客户端发送的 URL 相关的任何额外的路径信息。</td></tr><tr><td style="text-align:left;">18</td><td style="text-align:left;"><strong>String getProtocol()</strong> 返回请求协议的名称和版本。</td></tr><tr><td style="text-align:left;">19</td><td style="text-align:left;"><strong>String getQueryString()</strong> 返回包含在路径后的请求 URL 中的查询字符串。</td></tr><tr><td style="text-align:left;">20</td><td style="text-align:left;"><strong>String getRemoteAddr()</strong> 返回发送请求的客户端的互联网协议（IP）地址。</td></tr><tr><td style="text-align:left;">21</td><td style="text-align:left;"><strong>String getRemoteHost()</strong> 返回发送请求的客户端的完全限定名称。</td></tr><tr><td style="text-align:left;">22</td><td style="text-align:left;"><strong>String getRemoteUser()</strong> 如果用户已通过身份验证，则返回发出请求的登录用户，或者如果用户未通过身份验证，则返回 null。</td></tr><tr><td style="text-align:left;">23</td><td style="text-align:left;"><strong>String getRequestURI()</strong> 从协议名称直到 HTTP 请求的第一行的查询字符串中，返回该请求的 URL 的一部分。</td></tr><tr><td style="text-align:left;">24</td><td style="text-align:left;"><strong>String getRequestedSessionId()</strong> 返回由客户端指定的 session 会话 ID。</td></tr><tr><td style="text-align:left;">25</td><td style="text-align:left;"><strong>String getServletPath()</strong> 返回调用 JSP 的请求的 URL 的一部分。</td></tr><tr><td style="text-align:left;">26</td><td style="text-align:left;"><strong>String[] getParameterValues(String name)</strong> 返回一个字符串对象的数组，包含所有给定的请求参数的值，如果参数不存在则返回 null。</td></tr><tr><td style="text-align:left;">27</td><td style="text-align:left;"><strong>boolean isSecure()</strong> 返回一个布尔值，指示请求是否使用安全通道，如 HTTPS。</td></tr><tr><td style="text-align:left;">28</td><td style="text-align:left;"><strong>int getContentLength()</strong> 以字节为单位返回请求主体的长度，并提供输入流，或者如果长度未知则返回 -1。</td></tr><tr><td style="text-align:left;">29</td><td style="text-align:left;"><strong>int getIntHeader(String name)</strong> 返回指定的请求头的值为一个 int 值。</td></tr><tr><td style="text-align:left;">30</td><td style="text-align:left;"><strong>int getServerPort()</strong> 返回接收到这个请求的端口号。</td></tr><tr><td style="text-align:left;">31</td><td style="text-align:left;"><strong>setCharacterEncoding()</strong> 设置被发送到服务端的响应的字符编码。例如，UTF-8。</td></tr></tbody></table><h3 id="_4-3-response" tabindex="-1"><a class="header-anchor" href="#_4-3-response" aria-hidden="true">#</a> 4.3 response</h3><p><strong>HttpServletResponse对象方法</strong></p><table><thead><tr><th style="text-align:left;">序号</th><th style="text-align:left;">方法 &amp; 描述</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;"><strong>String encodeRedirectURL(String url)</strong> 为 sendRedirect 方法中使用的指定的 URL 进行编码，或者如果编码不是必需的，则返回 URL 未改变。</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;"><strong>String encodeURL(String url)</strong> 对包含 session 会话 ID 的指定 URL 进行编码，或者如果编码不是必需的，则返回 URL 未改变。</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;"><strong>boolean containsHeader(String name)</strong> 返回一个布尔值，指示是否已经设置已命名的响应报头。</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;"><strong>boolean isCommitted()</strong> 返回一个布尔值，指示响应是否已经提交。</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;"><strong>void addCookie(Cookie cookie)</strong> 把指定的 cookie 添加到响应。</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;"><strong>void addDateHeader(String name, long date)</strong> 添加一个带有给定的名称和日期值的响应报头。</td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;"><strong>void addHeader(String name, String value)</strong> 添加一个带有给定的名称和值的响应报头。</td></tr><tr><td style="text-align:left;">8</td><td style="text-align:left;"><strong>void addIntHeader(String name, int value)</strong> 添加一个带有给定的名称和整数值的响应报头。</td></tr><tr><td style="text-align:left;">9</td><td style="text-align:left;"><strong>void flushBuffer()</strong> 强制任何在缓冲区中的内容被写入到客户端。</td></tr><tr><td style="text-align:left;">10</td><td style="text-align:left;"><strong>void reset()</strong> 清除缓冲区中存在的任何数据，包括状态码和头。</td></tr><tr><td style="text-align:left;">11</td><td style="text-align:left;"><strong>void resetBuffer()</strong> 清除响应中基础缓冲区的内容，不清除状态码和头。</td></tr><tr><td style="text-align:left;">12</td><td style="text-align:left;"><strong>void sendError(int sc)</strong> 使用指定的状态码发送错误响应到客户端，并清除缓冲区。</td></tr><tr><td style="text-align:left;">13</td><td style="text-align:left;"><strong>void sendError(int sc, String msg)</strong> 使用指定的状态发送错误响应到客户端。</td></tr><tr><td style="text-align:left;">14</td><td style="text-align:left;"><strong>void sendRedirect(String location)</strong> 使用指定的重定向位置 URL 发送临时重定向响应到客户端。</td></tr><tr><td style="text-align:left;">15</td><td style="text-align:left;"><strong>void setBufferSize(int size)</strong> 为响应主体设置首选的缓冲区大小。</td></tr><tr><td style="text-align:left;">16</td><td style="text-align:left;"><strong>void setCharacterEncoding(String charset)</strong> 设置被发送到客户端的响应的字符编码（MIME 字符集）例如，UTF-8。</td></tr><tr><td style="text-align:left;">17</td><td style="text-align:left;"><strong>void setContentLength(int len)</strong> 设置在 HTTP Servlet 响应中的内容主体的长度，该方法设置 HTTP Content-Length 头。</td></tr><tr><td style="text-align:left;">18</td><td style="text-align:left;"><strong>void setContentType(String type)</strong> 如果响应还未被提交，设置被发送到客户端的响应的内容类型。</td></tr><tr><td style="text-align:left;">19</td><td style="text-align:left;"><strong>void setDateHeader(String name, long date)</strong> 设置一个带有给定的名称和日期值的响应报头。</td></tr><tr><td style="text-align:left;">20</td><td style="text-align:left;"><strong>void setHeader(String name, String value)</strong> 设置一个带有给定的名称和值的响应报头。</td></tr><tr><td style="text-align:left;">21</td><td style="text-align:left;"><strong>void setIntHeader(String name, int value)</strong> 设置一个带有给定的名称和整数值的响应报头。</td></tr><tr><td style="text-align:left;">22</td><td style="text-align:left;"><strong>void setLocale(Locale loc)</strong> 如果响应还未被提交，设置响应的区域。</td></tr><tr><td style="text-align:left;">23</td><td style="text-align:left;"><strong>void setStatus(int sc)</strong> 为该响应设置状态码。</td></tr></tbody></table><h3 id="_4-4-http状态码" tabindex="-1"><a class="header-anchor" href="#_4-4-http状态码" aria-hidden="true">#</a> 4.4 http状态码</h3><h4 id="_4-4-1-状态码" tabindex="-1"><a class="header-anchor" href="#_4-4-1-状态码" aria-hidden="true">#</a> 4.4.1 状态码</h4><table><thead><tr><th style="text-align:left;">代码</th><th style="text-align:left;">消息</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">100</td><td style="text-align:left;">Continue</td><td style="text-align:left;">只有请求的一部分已经被服务器接收，但只要它没有被拒绝，客户端应继续该请求。</td></tr><tr><td style="text-align:left;">101</td><td style="text-align:left;">Switching Protocols</td><td style="text-align:left;">服务器切换协议。</td></tr><tr><td style="text-align:left;">200</td><td style="text-align:left;">OK</td><td style="text-align:left;">请求成功。</td></tr><tr><td style="text-align:left;">201</td><td style="text-align:left;">Created</td><td style="text-align:left;">该请求是完整的，并创建一个新的资源。</td></tr><tr><td style="text-align:left;">202</td><td style="text-align:left;">Accepted</td><td style="text-align:left;">该请求被接受处理，但是该处理是不完整的。</td></tr><tr><td style="text-align:left;">203</td><td style="text-align:left;">Non-authoritative Information</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">204</td><td style="text-align:left;">No Content</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">205</td><td style="text-align:left;">Reset Content</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">206</td><td style="text-align:left;">Partial Content</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">300</td><td style="text-align:left;">Multiple Choices</td><td style="text-align:left;">链接列表。用户可以选择一个链接，进入到该位置。最多五个地址。</td></tr><tr><td style="text-align:left;">301</td><td style="text-align:left;">Moved Permanently</td><td style="text-align:left;">所请求的页面已经转移到一个新的 URL。</td></tr><tr><td style="text-align:left;">302</td><td style="text-align:left;">Found</td><td style="text-align:left;">所请求的页面已经临时转移到一个新的 URL。</td></tr><tr><td style="text-align:left;">303</td><td style="text-align:left;">See Other</td><td style="text-align:left;">所请求的页面可以在另一个不同的 URL 下被找到。</td></tr><tr><td style="text-align:left;">304</td><td style="text-align:left;">Not Modified</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">305</td><td style="text-align:left;">Use Proxy</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">306</td><td style="text-align:left;"><em>Unused</em></td><td style="text-align:left;">在以前的版本中使用该代码。现在已不再使用它，但代码仍被保留。</td></tr><tr><td style="text-align:left;">307</td><td style="text-align:left;">Temporary Redirect</td><td style="text-align:left;">所请求的页面已经临时转移到一个新的 URL。</td></tr><tr><td style="text-align:left;">400</td><td style="text-align:left;">Bad Request</td><td style="text-align:left;">服务器不理解请求。</td></tr><tr><td style="text-align:left;">401</td><td style="text-align:left;">Unauthorized</td><td style="text-align:left;">所请求的页面需要用户名和密码。</td></tr><tr><td style="text-align:left;">402</td><td style="text-align:left;">Payment Required</td><td style="text-align:left;"><em>您还不能使用该代码。</em></td></tr><tr><td style="text-align:left;">403</td><td style="text-align:left;">Forbidden</td><td style="text-align:left;">禁止访问所请求的页面。</td></tr><tr><td style="text-align:left;">404</td><td style="text-align:left;">Not Found</td><td style="text-align:left;">服务器无法找到所请求的页面。.</td></tr><tr><td style="text-align:left;">405</td><td style="text-align:left;">Method Not Allowed</td><td style="text-align:left;">在请求中指定的方法是不允许的。</td></tr><tr><td style="text-align:left;">406</td><td style="text-align:left;">Not Acceptable</td><td style="text-align:left;">服务器只生成一个不被客户端接受的响应。</td></tr><tr><td style="text-align:left;">407</td><td style="text-align:left;">Proxy Authentication Required</td><td style="text-align:left;">在请求送达之前，您必须使用代理服务器的验证。</td></tr><tr><td style="text-align:left;">408</td><td style="text-align:left;">Request Timeout</td><td style="text-align:left;">请求需要的时间比服务器能够等待的时间长，超时。</td></tr><tr><td style="text-align:left;">409</td><td style="text-align:left;">Conflict</td><td style="text-align:left;">请求因为冲突无法完成。</td></tr><tr><td style="text-align:left;">410</td><td style="text-align:left;">Gone</td><td style="text-align:left;">所请求的页面不再可用。</td></tr><tr><td style="text-align:left;">411</td><td style="text-align:left;">Length Required</td><td style="text-align:left;">&quot;Content-Length&quot; 未定义。服务器无法处理客户端发送的不带 Content-Length 的请求信息。</td></tr><tr><td style="text-align:left;">412</td><td style="text-align:left;">Precondition Failed</td><td style="text-align:left;">请求中给出的先决条件被服务器评估为 false。</td></tr><tr><td style="text-align:left;">413</td><td style="text-align:left;">Request Entity Too Large</td><td style="text-align:left;">服务器不接受该请求，因为请求实体过大。</td></tr><tr><td style="text-align:left;">414</td><td style="text-align:left;">Request-url Too Long</td><td style="text-align:left;">服务器不接受该请求，因为 URL 太长。当您转换一个 &quot;post&quot; 请求为一个带有长的查询信息的 &quot;get&quot; 请求时发生。</td></tr><tr><td style="text-align:left;">415</td><td style="text-align:left;">Unsupported Media Type</td><td style="text-align:left;">服务器不接受该请求，因为媒体类型不被支持。</td></tr><tr><td style="text-align:left;">417</td><td style="text-align:left;">Expectation Failed</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">500</td><td style="text-align:left;">Internal Server Error</td><td style="text-align:left;">未完成的请求。服务器遇到了一个意外的情况。</td></tr><tr><td style="text-align:left;">501</td><td style="text-align:left;">Not Implemented</td><td style="text-align:left;">未完成的请求。服务器不支持所需的功能。</td></tr><tr><td style="text-align:left;">502</td><td style="text-align:left;">Bad Gateway</td><td style="text-align:left;">未完成的请求。服务器从上游服务器收到无效响应。</td></tr><tr><td style="text-align:left;">503</td><td style="text-align:left;">Service Unavailable</td><td style="text-align:left;">未完成的请求。服务器暂时超载或死机。</td></tr><tr><td style="text-align:left;">504</td><td style="text-align:left;">Gateway Timeout</td><td style="text-align:left;">网关超时。</td></tr><tr><td style="text-align:left;">505</td><td style="text-align:left;">HTTP Version Not Supported</td><td style="text-align:left;">服务器不支持&quot;HTTP协议&quot;版本。</td></tr></tbody></table><h4 id="_4-4-2-设置-http-状态代码的方法" tabindex="-1"><a class="header-anchor" href="#_4-4-2-设置-http-状态代码的方法" aria-hidden="true">#</a> 4.4.2 设置 HTTP 状态代码的方法</h4><p>下面的方法可用于在 Servlet 程序中设置 HTTP 状态码。这些方法通过 <em>HttpServletResponse</em> 对象可用。</p><table><thead><tr><th style="text-align:left;">序号</th><th style="text-align:left;">方法 &amp; 描述</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;"><strong>public void setStatus ( int statusCode )</strong> 该方法设置一个任意的状态码。setStatus 方法接受一个 int（状态码）作为参数。如果您的反应包含了一个特殊的状态码和文档，请确保在使用 <em>PrintWriter</em> 实际返回任何内容之前调用 setStatus。</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;"><strong>public void sendRedirect(String url)</strong> 该方法生成一个 302 响应，连同一个带有新文档 URL 的 <em>Location</em> 头。</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;"><strong>public void sendError(int code, String message)</strong> 该方法发送一个状态码（通常为 404），连同一个在 HTML 文档内部自动格式化并发送到客户端的短消息。</td></tr></tbody></table><p><strong>HTTP 状态码实例</strong></p><p>下面的例子把 407 错误代码发送到客户端浏览器，浏览器会显示 &quot;Need authentication!!!&quot; 消息。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 导入必需的 java 库</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token comment">// 扩展 HttpServlet 类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> showError <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
 
  <span class="token comment">// 处理 GET 方法请求的方法</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>
                    <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span>
  <span class="token punctuation">{</span>
      <span class="token comment">// 设置错误代码和原因</span>
      response<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span><span class="token number">407</span><span class="token punctuation">,</span> <span class="token string">&quot;Need authentication!!!&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 处理 POST 方法请求的方法</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>
                     <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span>
      <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
     <span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，调用上面的 Servlet 将显示以下结果：</p><p>HTTP Status 407 - Need authentication!!!<strong>type</strong> Status report<strong>message</strong> Need authentication!!!<strong>description</strong> The client must first authenticate itself with the proxy (Need authentication!!!).Apache Tomcat/5.5.29</p>`,20),d=[a];function r(i,o){return e(),n("div",null,d)}const y=t(s,[["render",r],["__file","s4.html.vue"]]);export{y as default};
