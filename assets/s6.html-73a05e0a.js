import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,e as t}from"./app-4b15eca5.js";const e={},p=t(`<h2 id="网页跳转与重定向" tabindex="-1"><a class="header-anchor" href="#网页跳转与重定向" aria-hidden="true">#</a> 网页跳转与重定向</h2><h3 id="_6-1-跳转" tabindex="-1"><a class="header-anchor" href="#_6-1-跳转" aria-hidden="true">#</a> 6.1 跳转</h3><p><code>request.getRequestDispatcher(&quot;你要跳转的页面&quot;).forward(request, response)</code></p><ol><li><p>属于转发，也是服务器跳转，相当于方法调用，在执行当前文件的过程中转向执行目标文件，<strong>两个文件(当前文件和目标文件)属于同一次请求，前后页共用一个request，可以通过此来传递一些数据或者session信息，request.setAttribute()和request.getAttribute()。</strong></p></li><li><p>在前后两次执行后，地址栏不变，仍是当前文件的地址。</p></li><li><p><strong>不能转向到本web应用之外的页面和网站，所以转向的速度要快。</strong></p></li><li><p>URL中所包含的“/”表示应用程序(项目)的路径。</p></li></ol><h3 id="_6-2-重定向" tabindex="-1"><a class="header-anchor" href="#_6-2-重定向" aria-hidden="true">#</a> 6.2 重定向</h3><p>当文档移动到新的位置，我们需要向客户端发送这个新位置时，我们需要用到网页重定向。当然，也可能是为了负载均衡，或者只是为了简单的随机，这些情况都有可能用到网页重定向。</p><p>重定向请求到另一个网页的最简单的方式是使用 response 对象的 <code>sendRedirect()</code> 方法。</p><p>下面是该方法的定义： 将请求重定向到另一页的最简单的方法是，用方法的<code>sendRedirect()</code>的响应对象。以下是这种方法的定义：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">HttpServletResponse</span><span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token class-name">String</span> location<span class="token punctuation">)</span>
<span class="token keyword">throws</span> <span class="token class-name">IOException</span> 
</code></pre></div><p>该方法把响应连同状态码和新的网页位置发送回浏览器。您也可以通过把 setStatus() 和 setHeader() 方法一起使用来达到同样的效果：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token class-name">String</span> site <span class="token operator">=</span> <span class="token string">&quot;http://www.newpage.com&quot;</span> <span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token constant">SC_MOVED_TEMPORARILY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Location&quot;</span><span class="token punctuation">,</span> site<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre></div><p>注意：</p><ol><li><p>是客户端跳转，相当于客户端向服务端发送请求之后，服务器返回一个响应，客户端接收到响应之后又向服务端发送一次请求，一共是2次请求，前后页不共用一个request，不能读取转向前通过request.setAttribute()设置的属性值。</p></li><li><p>在前后两次执行后，地址栏发生改变，是目标文件的地址。</p></li><li><p>可以转向到本web应用之外的页面和网站，所以转向的速度相对要慢。</p></li><li><p>URL种所包含的&quot;/&quot;表示根目录的路径。</p></li></ol><p>特殊的应用：对数据进行修改、删除、添加操作的时候，应该用response.sendRedirect()。如果是采用了request.getRequestDispatcher().forward(request,response)，那么操作前后的地址栏都不会发生改变，仍然是修改的控制器，如果此时再对当前页面刷新的话，就会重新发送一次请求对数据进行修改，这也就是有的人在刷新一次页面就增加一条数据的原因。</p>`,14),o=[p];function c(i,u){return n(),a("div",null,o)}const d=s(e,[["render",c],["__file","s6.html.vue"]]);export{d as default};
