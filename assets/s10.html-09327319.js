import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as a,e as s}from"./app-4b15eca5.js";const l="/assets/7-0a4fcaca.jpg",n="/assets/8-5dc5ec8d.png",p={},d=s('<h2 id="jsp" tabindex="-1"><a class="header-anchor" href="#jsp" aria-hidden="true">#</a> JSP</h2><h3 id="_10-1-jsp生命周期" tabindex="-1"><a class="header-anchor" href="#_10-1-jsp生命周期" aria-hidden="true">#</a> 10.1 JSP生命周期</h3><p>理解JSP底层功能的关键就是去理解它们所遵守的生命周期。</p><p>JSP生命周期就是从创建到销毁的整个过程，类似于servlet生命周期，区别在于JSP生命周期还包括将JSP文件编译成servlet。</p><p>以下是JSP生命周期中所走过的几个阶段：</p><ul><li><p><strong>编译阶段：</strong></p><p>servlet容器编译servlet源文件，生成servlet类</p></li><li><p>初始化阶段：</p><p>加载与JSP对应的servlet类，创建其实例，并调用它的初始化方法</p></li><li><p>执行阶段：</p><p>调用与JSP对应的servlet实例的服务方法</p></li><li><p>销毁阶段：</p><p>调用与JSP对应的servlet实例的销毁方法，然后销毁servlet实例</p></li></ul><p>很明显，JSP生命周期的四个主要阶段和servlet生命周期非常相似，下面给出图示：</p><p><img src="'+l+`" alt="img" loading="lazy"></p><h4 id="_10-1-1-jsp编译" tabindex="-1"><a class="header-anchor" href="#_10-1-1-jsp编译" aria-hidden="true">#</a> 10.1.1 JSP编译</h4><p>当浏览器请求JSP页面时，JSP引擎会首先去检查是否需要编译这个文件。如果这个文件没有被编译过，或者在上次编译后被更改过，则编译这个JSP文件。</p><p>编译的过程包括三个步骤：</p><ul><li>解析JSP文件。</li><li>将JSP文件转为servlet。</li><li>编译servlet。</li></ul><h4 id="_10-1-2-jsp初始化" tabindex="-1"><a class="header-anchor" href="#_10-1-2-jsp初始化" aria-hidden="true">#</a> 10.1.2 JSP初始化</h4><p>容器载入JSP文件后，它会在为请求提供任何服务前调用jspInit()方法。如果您需要执行自定义的JSP初始化任务，复写jspInit()方法就行了，就像下面这样：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jspInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// 初始化代码</span>
<span class="token punctuation">}</span>
</code></pre></div><p>一般来讲程序只初始化一次，servlet也是如此。通常情况下您可以在jspInit()方法中初始化数据库连接、打开文件和创建查询表。</p><h4 id="_10-1-3-jsp执行" tabindex="-1"><a class="header-anchor" href="#_10-1-3-jsp执行" aria-hidden="true">#</a> 10.1.3 JSP执行</h4><p>这一阶段描述了JSP生命周期中一切与请求相关的交互行为，直到被销毁。</p><p>当JSP网页完成初始化后，JSP引擎将会调用_jspService()方法。</p><p>_jspService()方法需要一个HttpServletRequest对象和一个HttpServletResponse对象作为它的参数，就像下面这样：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">_jspService</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>
                 <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token comment">// 服务端处理代码</span>
<span class="token punctuation">}</span>
</code></pre></div><p>_jspService()方法在每个request中被调用一次并且负责产生与之相对应的response，并且它还负责产生所有7个HTTP方法的回应，比如GET、POST、DELETE等等。</p><h4 id="_10-1-4-jsp清理" tabindex="-1"><a class="header-anchor" href="#_10-1-4-jsp清理" aria-hidden="true">#</a> 10.1.4 JSP清理</h4><p>JSP生命周期的销毁阶段描述了当一个JSP网页从容器中被移除时所发生的一切。</p><p>jspDestroy()方法在JSP中等价于servlet中的销毁方法。当您需要执行任何清理工作时复写jspDestroy()方法，比如释放数据库连接或者关闭文件夹等等。</p><p>jspDestroy()方法的格式如下：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jspDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token comment">// 清理代码</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="_10-2-jsp指令" tabindex="-1"><a class="header-anchor" href="#_10-2-jsp指令" aria-hidden="true">#</a> 10.2 JSP指令</h3><h4 id="_10-2-1-指令" tabindex="-1"><a class="header-anchor" href="#_10-2-1-指令" aria-hidden="true">#</a> 10.2.1 指令</h4><p>JSP指令用来设置整个JSP页面相关的属性，如网页的编码方式和脚本语言。</p><p>语法格式如下：</p><div class="language-jsp" data-ext="jsp"><pre class="language-jsp"><code>&lt;%@ directive attribute=&quot;value&quot; %&gt;
</code></pre></div><p>指令可以有很多个属性，它们以键值对的形式存在，并用逗号隔开。</p><p>JSP中的三种指令标签：</p><table><thead><tr><th style="text-align:left;"><strong>指令</strong></th><th style="text-align:left;"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left;">&lt;%@ page ... %&gt;</td><td style="text-align:left;">定义网页依赖属性，比如脚本语言、error页面、缓存需求等等</td></tr><tr><td style="text-align:left;">&lt;%@ include ... %&gt;</td><td style="text-align:left;">包含其他文件</td></tr><tr><td style="text-align:left;">&lt;%@ taglib ... %&gt;</td><td style="text-align:left;">引入标签库的定义</td></tr></tbody></table><h4 id="_10-2-2-page指令" tabindex="-1"><a class="header-anchor" href="#_10-2-2-page指令" aria-hidden="true">#</a> 10.2.2 Page指令</h4><p>Page指令为容器提供当前页面的使用说明。一个JSP页面可以包含多个page指令。</p><p>Page指令的语法格式：</p><div class="language-jsp" data-ext="jsp"><pre class="language-jsp"><code>&lt;%@ page attribute=&quot;value&quot; %&gt;
</code></pre></div><p>等价的XML格式：</p><div class="language-jsp" data-ext="jsp"><pre class="language-jsp"><code>&lt;jsp:directive.page attribute=&quot;value&quot; /&gt;
</code></pre></div><p><strong>属性</strong></p><p>下表列出与Page指令相关的属性：说</p><table><thead><tr><th style="text-align:left;"><strong>属性</strong></th><th style="text-align:left;"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left;">buffer</td><td style="text-align:left;">指定out对象使用缓冲区的大小</td></tr><tr><td style="text-align:left;">autoFlush</td><td style="text-align:left;">控制out对象的 缓存区</td></tr><tr><td style="text-align:left;">contentType</td><td style="text-align:left;">指定当前JSP页面的MIME类型和字符编码</td></tr><tr><td style="text-align:left;">errorPage</td><td style="text-align:left;">指定当JSP页面发生异常时需要转向的错误处理页面</td></tr><tr><td style="text-align:left;">isErrorPage</td><td style="text-align:left;">指定当前页面是否可以作为另一个JSP页面的错误处理页面</td></tr><tr><td style="text-align:left;">extends</td><td style="text-align:left;">指定servlet从哪一个类继承</td></tr><tr><td style="text-align:left;">import</td><td style="text-align:left;">导入要使用的Java类</td></tr><tr><td style="text-align:left;">info</td><td style="text-align:left;">定义JSP页面的描述信息</td></tr><tr><td style="text-align:left;">isThreadSafe</td><td style="text-align:left;">指定对JSP页面的访问是否为线程安全</td></tr><tr><td style="text-align:left;">language</td><td style="text-align:left;">定义JSP页面所用的脚本语言，默认是Java</td></tr><tr><td style="text-align:left;">session</td><td style="text-align:left;">指定JSP页面是否使用session</td></tr><tr><td style="text-align:left;">isELIgnored</td><td style="text-align:left;">指定是否执行EL表达式</td></tr><tr><td style="text-align:left;">isScriptingEnabled</td><td style="text-align:left;">确定脚本元素能否被使用</td></tr></tbody></table><h4 id="_10-2-3-include指令" tabindex="-1"><a class="header-anchor" href="#_10-2-3-include指令" aria-hidden="true">#</a> 10.2.3 Include指令</h4><p>JSP可以通过include指令来包含其他文件。被包含的文件可以是JSP文件、HTML文件或文本文件。包含的文件就好像是该JSP文件的一部分，会被同时编译执行。</p><p>Include指令的语法格式如下：</p><div class="language-jsp" data-ext="jsp"><pre class="language-jsp"><code>&lt;%@ include file=&quot;relative url&quot; %&gt;
</code></pre></div><p>Include指令中的文件名实际上是一个相对的URL。如果您没有给文件关联一个路径，JSP编译器默认在当前路径下寻找。</p><p>等价的XML语法：</p><div class="language-jsp" data-ext="jsp"><pre class="language-jsp"><code>&lt;jsp:directive.include file=&quot;relative url&quot; /&gt;
</code></pre></div><h4 id="_10-2-4-taglib指令" tabindex="-1"><a class="header-anchor" href="#_10-2-4-taglib指令" aria-hidden="true">#</a> 10.2.4 Taglib指令</h4><p>JSP API允许用户自定义标签，一个自定义标签库就是自定义标签的集合。</p><p>Taglib指令引入一个自定义标签集合的定义，包括库路径、自定义标签。</p><p>Taglib指令的语法：</p><div class="language-jsp" data-ext="jsp"><pre class="language-jsp"><code>&lt;%@ taglib uri=&quot;uri&quot; prefix=&quot;prefixOfTag&quot; %&gt;
</code></pre></div><p>uri属性确定标签库的位置，prefix属性指定标签库的前缀。</p><p>等价的XML语法：</p><div class="language-jsp" data-ext="jsp"><pre class="language-jsp"><code>&lt;jsp:directive.taglib uri=&quot;uri&quot; prefix=&quot;prefixOfTag&quot; /&gt;
</code></pre></div><h3 id="_10-3-jsp-动作元素" tabindex="-1"><a class="header-anchor" href="#_10-3-jsp-动作元素" aria-hidden="true">#</a> 10.3 JSP 动作元素</h3><p>与JSP指令元素不同的是，JSP动作元素在请求处理阶段起作用。JSP动作元素是用XML语法写成的。</p><p>利用JSP动作可以动态地插入文件、重用JavaBean组件、把用户重定向到另外的页面、为Java插件生成HTML代码。</p><p>动作元素只有一种语法，它符合XML标准：</p><div class="language-jsp" data-ext="jsp"><pre class="language-jsp"><code>&lt;jsp:action_name attribute=&quot;value&quot; /&gt;
</code></pre></div><p>动作元素基本上都是预定义的函数，JSP规范定义了一系列的标准动作，它用JSP作为前缀，可用的标准动作元素如下：</p><table><thead><tr><th style="text-align:left;">语法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">jsp:include</td><td style="text-align:left;">在页面被请求的时候引入一个文件。</td></tr><tr><td style="text-align:left;">jsp:useBean</td><td style="text-align:left;">寻找或者实例化一个JavaBean。</td></tr><tr><td style="text-align:left;">jsp:setProperty</td><td style="text-align:left;">设置JavaBean的属性。</td></tr><tr><td style="text-align:left;">jsp:getProperty</td><td style="text-align:left;">输出某个JavaBean的属性。</td></tr><tr><td style="text-align:left;">jsp:forward</td><td style="text-align:left;">把请求转到一个新的页面。</td></tr><tr><td style="text-align:left;">jsp:plugin</td><td style="text-align:left;">根据浏览器类型为Java插件生成OBJECT或EMBED标记。</td></tr><tr><td style="text-align:left;">jsp:element</td><td style="text-align:left;">定义动态XML元素</td></tr><tr><td style="text-align:left;">jsp:attribute</td><td style="text-align:left;">设置动态定义的XML元素属性。</td></tr><tr><td style="text-align:left;">jsp:body</td><td style="text-align:left;">设置动态定义的XML元素内容。</td></tr><tr><td style="text-align:left;">jsp:text</td><td style="text-align:left;">在JSP页面和文档中使用写入文本的模板</td></tr></tbody></table><hr><h4 id="_10-3-1-常见的属性" tabindex="-1"><a class="header-anchor" href="#_10-3-1-常见的属性" aria-hidden="true">#</a> 10.3.1 常见的属性</h4><p>所有的动作要素都有两个属性：id属性和scope属性。</p><ul><li><p>id属性：</p><p>id属性是动作元素的唯一标识，可以在JSP页面中引用。动作元素创建的id值可以通过PageContext来调用。</p></li><li><p>scope属性：</p><p>该属性用于识别动作元素的生命周期。 id属性和scope属性有直接关系，scope属性定义了相关联id对象的寿命。 scope属性有四个可能的值： (a) page, (b)request, (c)session, 和 (d) application。</p></li></ul><hr><h4 id="_10-3-2-jsp-include动作元素" tabindex="-1"><a class="header-anchor" href="#_10-3-2-jsp-include动作元素" aria-hidden="true">#</a> 10.3.2 <a href="jsp:include">jsp:include</a>动作元素</h4><p><a href="jsp:include">jsp:include</a>动作元素用来包含静态和动态的文件。该动作把指定文件插入正在生成的页面。语法格式如下：</p><div class="language-jsp" data-ext="jsp"><pre class="language-jsp"><code>&lt;jsp:include page=&quot;relative URL&quot; flush=&quot;true&quot; /&gt;
</code></pre></div><p>前面已经介绍过include指令，它是在JSP文件被转换成Servlet的时候引入文件，而这里的jsp:include动作不同，插入文件的时间是在页面被请求的时候。</p><p>以下是include动作相关的属性列表。</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">page</td><td style="text-align:left;">包含在页面中的相对URL地址。</td></tr><tr><td style="text-align:left;">flush</td><td style="text-align:left;">布尔属性，定义在包含资源前是否刷新缓存区。</td></tr></tbody></table><h4 id="_10-3-3-jsp-usebean动作元素" tabindex="-1"><a class="header-anchor" href="#_10-3-3-jsp-usebean动作元素" aria-hidden="true">#</a> 10.3.3 <a href="jsp:useBean">jsp:useBean</a>动作元素</h4><p>jsp:useBean动作用来装载一个将在JSP页面中使用的JavaBean。</p><p>这个功能非常有用，因为它使得我们既可以发挥Java组件重用的优势，同时也避免了损失JSP区别于Servlet的方便性。</p><p>jsp:useBean动作最简单的语法为：</p><div class="language-jsp" data-ext="jsp"><pre class="language-jsp"><code>&lt;jsp:useBean id=&quot;name&quot; class=&quot;package.class&quot; /&gt;
</code></pre></div><p>在类载入后，我们既可以通过 jsp:setProperty 和 jsp:getProperty 动作来修改和检索bean的属性。</p><p>以下是useBean动作相关的属性列表。</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">class</td><td style="text-align:left;">指定Bean的完整包名。</td></tr><tr><td style="text-align:left;">type</td><td style="text-align:left;">指定将引用该对象变量的类型。</td></tr><tr><td style="text-align:left;">beanName</td><td style="text-align:left;">通过 java.beans.Beans 的 instantiate() 方法指定Bean的名字。</td></tr></tbody></table><p>在给出具体实例前，让我们先来看下 jsp:setProperty 和 jsp:getProperty 动作元素：</p><h4 id="_10-3-4-jsp-setproperty动作元素" tabindex="-1"><a class="header-anchor" href="#_10-3-4-jsp-setproperty动作元素" aria-hidden="true">#</a> 10.3.4 <a href="jsp:setProperty">jsp:setProperty</a>动作元素</h4><p>jsp:setProperty用来设置已经实例化的Bean对象的属性，有两种用法。首先，你可以在jsp:useBean元素的外面（后面）使用jsp:setProperty，如下所示：</p><div class="language-jsp" data-ext="jsp"><pre class="language-jsp"><code>&lt;jsp:useBean id=&quot;myName&quot; ... /&gt;
...
&lt;jsp:setProperty name=&quot;myName&quot; property=&quot;someProperty&quot; .../&gt;
</code></pre></div><p>此时，不管jsp:useBean是找到了一个现有的Bean，还是新创建了一个Bean实例，jsp:setProperty都会执行。第二种用法是把jsp:setProperty放入jsp:useBean元素的内部，如下所示：</p><div class="language-jsp" data-ext="jsp"><pre class="language-jsp"><code>&lt;jsp:useBean id=&quot;myName&quot; ... &gt;
...
   &lt;jsp:setProperty name=&quot;myName&quot; property=&quot;someProperty&quot; .../&gt;
&lt;/jsp:useBean&gt;
</code></pre></div><p>此时，jsp:setProperty只有在新建Bean实例时才会执行，如果是使用现有实例则不执行jsp:setProperty。</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">name</td><td style="text-align:left;">name属性是必需的。它表示要设置属性的是哪个Bean。</td></tr><tr><td style="text-align:left;">property</td><td style="text-align:left;">property属性是必需的。它表示要设置哪个属性。有一个特殊用法：如果property的值是&quot;*&quot;，表示所有名字和Bean属性名字匹配的请求参数都将被传递给相应的属性set方法。</td></tr><tr><td style="text-align:left;">value</td><td style="text-align:left;">value 属性是可选的。该属性用来指定Bean属性的值。字符串数据会在目标类中通过标准的valueOf方法自动转换成数字、boolean、Boolean、 byte、Byte、char、Character。例如，boolean和Boolean类型的属性值（比如&quot;true&quot;）通过 Boolean.valueOf转换，int和Integer类型的属性值（比如&quot;42&quot;）通过Integer.valueOf转换。 　　value和param不能同时使用，但可以使用其中任意一个。</td></tr><tr><td style="text-align:left;">param</td><td style="text-align:left;">param 是可选的。它指定用哪个请求参数作为Bean属性的值。如果当前请求没有参数，则什么事情也不做，系统不会把null传递给Bean属性的set方法。因此，你可以让Bean自己提供默认属性值，只有当请求参数明确指定了新值时才修改默认属性值。</td></tr></tbody></table><h4 id="_10-3-5-jsp-getproperty动作元素" tabindex="-1"><a class="header-anchor" href="#_10-3-5-jsp-getproperty动作元素" aria-hidden="true">#</a> 10.3.5 <a href="jsp:getProperty">jsp:getProperty</a>动作元素</h4><p>jsp:getProperty动作提取指定Bean属性的值，转换成字符串，然后输出。语法格式如下：</p><div class="language-jsp" data-ext="jsp"><pre class="language-jsp"><code>&lt;jsp:useBean id=&quot;myName&quot; ... /&gt;
...
&lt;jsp:getProperty name=&quot;myName&quot; property=&quot;someProperty&quot; .../&gt;
</code></pre></div><p>下表是与getProperty相关联的属性：</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">name</td><td style="text-align:left;">要检索的Bean属性名称。Bean必须已定义。</td></tr><tr><td style="text-align:left;">property</td><td style="text-align:left;">表示要提取Bean属性的值</td></tr></tbody></table><h4 id="_10-3-6-jsp-forward-动作元素" tabindex="-1"><a class="header-anchor" href="#_10-3-6-jsp-forward-动作元素" aria-hidden="true">#</a> 10.3.6 <a href="jsp:forward">jsp:forward</a> 动作元素</h4><p>jsp:forward动作把请求转到另外的页面。jsp:forward标记只有一个属性page。语法格式如下所示：</p><div class="language-jsp" data-ext="jsp"><pre class="language-jsp"><code>&lt;jsp:forward page=&quot;Relative URL&quot; /&gt;
</code></pre></div><p>以下是forward相关联的属性：</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">page</td><td style="text-align:left;">page属性包含的是一个相对URL。page的值既可以直接给出，也可以在请求的时候动态计算，可以是一个JSP页面或者一个 Java Servlet.</td></tr></tbody></table><h4 id="_10-3-7-jsp-plugin动作元素" tabindex="-1"><a class="header-anchor" href="#_10-3-7-jsp-plugin动作元素" aria-hidden="true">#</a> 10.3.7 <a href="jsp:plugin">jsp:plugin</a>动作元素</h4><p>jsp:plugin动作用来根据浏览器的类型，插入通过Java插件 运行Java Applet所必需的OBJECT或EMBED元素。</p><p>如果需要的插件不存在，它会下载插件，然后执行Java组件。 Java组件可以是一个applet或一个JavaBean。</p><p>plugin动作有多个对应HTML元素的属性用于格式化Java 组件。param元素可用于向Applet 或 Bean 传递参数。</p><p>以下是使用plugin 动作元素的典型实例:</p><div class="language-jsp" data-ext="jsp"><pre class="language-jsp"><code>&lt;jsp:plugin type=&quot;applet&quot; codebase=&quot;dirname&quot; code=&quot;MyApplet.class&quot;                            width=&quot;60&quot; height=&quot;80&quot;&gt;
   &lt;jsp:param name=&quot;fontcolor&quot; value=&quot;red&quot; /&gt;
   &lt;jsp:param name=&quot;background&quot; value=&quot;black&quot; /&gt;
 
   &lt;jsp:fallback&gt;
      Unable to initialize Java Plugin
   &lt;/jsp:fallback&gt;
 
&lt;/jsp:plugin&gt;
</code></pre></div><p>如果你有兴趣可以尝试使用applet来测试jsp:plugin动作元素，<code>&lt;fallback&gt;</code>元素是一个新元素，在组件出现故障的错误是发送给用户错误信息。</p><hr><h4 id="_10-3-8-jsp-element-、-jsp-attribute-、-jsp-body-动作元素" tabindex="-1"><a class="header-anchor" href="#_10-3-8-jsp-element-、-jsp-attribute-、-jsp-body-动作元素" aria-hidden="true">#</a> 10.3.8 <code>&lt;jsp:element&gt;</code> 、 <code>&lt;jsp:attribute&gt;</code>、 <code>&lt;jsp:body&gt;</code>动作元素</h4><p><code>&lt;jsp:element&gt;</code> 、 <code>&lt;jsp:attribute&gt;</code>、 <code>&lt;jsp:body&gt;</code>动作元素动态定义XML元素。动态是非常重要的，这就意味着XML元素在编译时是动态生成的而非静态。</p><p>以下实例动态定义了XML元素：</p><div class="language-jsp line-numbers-mode" data-ext="jsp"><pre class="language-jsp"><code>&lt;%@page language=&quot;java&quot; contentType=&quot;text/html&quot;%&gt;
&lt;html xmlns=&quot;http://www.w3c.org/1999/xhtml&quot;       xmlns:jsp=&quot;http://java.sun.com/JSP/Page&quot;&gt;

&lt;head&gt;&lt;title&gt;Generate XML Element&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
&lt;jsp:element name=&quot;xmlElement&quot;&gt;
&lt;jsp:attribute name=&quot;xmlElementAttr&quot;&gt;
   Value for the attribute
&lt;/jsp:attribute&gt;
&lt;jsp:body&gt;
   Body for XML element
&lt;/jsp:body&gt;
&lt;/jsp:element&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行时生成HTML代码如下：</p><div class="language-jsp" data-ext="jsp"><pre class="language-jsp"><code>&lt;html xmlns=&quot;http://www.w3c.org/1999/xhtml&quot;       xmlns:jsp=&quot;http://java.sun.com/JSP/Page&quot;&gt;
 
&lt;head&gt;&lt;title&gt;Generate XML Element&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
&lt;xmlElement xmlElementAttr=&quot;Value for the attribute&quot;&gt;
   Body for XML element
&lt;/xmlElement&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre></div><h4 id="_10-3-9-jsp-text-动作元素" tabindex="-1"><a class="header-anchor" href="#_10-3-9-jsp-text-动作元素" aria-hidden="true">#</a> 10.3.9 <code>&lt;jsp:text&gt;</code>动作元素</h4><p><code>&lt;jsp:text&gt;</code>动作元素允许在JSP页面和文档中使用写入文本的模板，语法格式如下：</p><div class="language-jsp" data-ext="jsp"><pre class="language-jsp"><code>&lt;jsp:text&gt;Template data&lt;/jsp:text&gt;
</code></pre></div><p>以上文本模板不能包含其他元素，只能只能包含文本和EL表达式（注：EL表达式将在后续章节中介绍）。请注 意，在XML文件中，您不能使用表达式如 \${whatever &gt; 0}，因为&gt;符号是非法的。 你可以使用 \${whatever gt 0}表达式或者嵌入在一个CDATA部分的值。</p><div class="language-jsp" data-ext="jsp"><pre class="language-jsp"><code>&lt;jsp:text&gt;&lt;![CDATA[&lt;br&gt;]]&gt;&lt;/jsp:text&gt;
</code></pre></div><p>如果你需要在 XHTML 中声明 DOCTYPE,必须使用到<code>&lt;jsp:text&gt;</code>动作元素，实例如下：</p><div class="language-jsp line-numbers-mode" data-ext="jsp"><pre class="language-jsp"><code>&lt;jsp:text&gt;&lt;![CDATA[&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;DTD/xhtml1-strict.dtd&quot;&gt;]]&gt;
&lt;/jsp:text&gt;
&lt;head&gt;&lt;title&gt;jsp:text action&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;

&lt;books&gt;&lt;book&gt;&lt;jsp:text&gt;  
    Welcome to JSP Programming
&lt;/jsp:text&gt;&lt;/book&gt;&lt;/books&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以对以上实例尝试使用 <code>&lt;jsp:text&gt;</code>及不使用该动作元素执行结果的区别。</p><h3 id="_10-4-jsp-隐式对象" tabindex="-1"><a class="header-anchor" href="#_10-4-jsp-隐式对象" aria-hidden="true">#</a> 10.4 JSP 隐式对象</h3><p>JSP隐式对象是JSP容器为每个页面提供的Java对象，开发者可以直接使用它们而不用显式声明。JSP隐式对象也被称为预定义变量。</p><p>JSP所支持的九大隐式对象：</p><table><thead><tr><th style="text-align:left;"><strong>对象</strong></th><th style="text-align:left;"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left;">request</td><td style="text-align:left;"><strong>HttpServletRequest</strong>类的实例</td></tr><tr><td style="text-align:left;">response</td><td style="text-align:left;"><strong>HttpServletResponse</strong>类的实例</td></tr><tr><td style="text-align:left;">out</td><td style="text-align:left;"><strong>PrintWriter</strong>类的实例，用于把结果输出至网页上</td></tr><tr><td style="text-align:left;">session</td><td style="text-align:left;"><strong>HttpSession</strong>类的实例</td></tr><tr><td style="text-align:left;">application</td><td style="text-align:left;"><strong>ServletContext</strong>类的实例，与应用上下文有关</td></tr><tr><td style="text-align:left;">config</td><td style="text-align:left;"><strong>ServletConfig</strong>类的实例</td></tr><tr><td style="text-align:left;">pageContext</td><td style="text-align:left;"><strong>PageContext</strong>类的实例，提供对JSP页面所有对象以及命名空间的访问</td></tr><tr><td style="text-align:left;">page</td><td style="text-align:left;">类似于Java类中的this关键字</td></tr><tr><td style="text-align:left;">Exception</td><td style="text-align:left;"><strong>Exception</strong>类的对象，代表发生错误的JSP页面中对应的异常对象</td></tr></tbody></table><hr><h4 id="_10-4-1-request对象" tabindex="-1"><a class="header-anchor" href="#_10-4-1-request对象" aria-hidden="true">#</a> 10.4.1 request对象</h4><p>request对象是javax.servlet.http.HttpServletRequest 类的实例。每当客户端请求一个JSP页面时，JSP引擎就会制造一个新的request对象来代表这个请求。</p><p>request对象提供了一系列方法来获取HTTP头信息，cookies，HTTP方法等等。</p><hr><h4 id="_10-4-2-response对象" tabindex="-1"><a class="header-anchor" href="#_10-4-2-response对象" aria-hidden="true">#</a> 10.4.2 response对象</h4><p>response对象是javax.servlet.http.HttpServletResponse类的实例。当服务器创建request对象时会同时创建用于响应这个客户端的response对象。</p><p>response对象也定义了处理HTTP头模块的接口。通过这个对象，开发者们可以添加新的cookies，时间戳，HTTP状态码等等。</p><hr><h4 id="_10-4-3-out对象" tabindex="-1"><a class="header-anchor" href="#_10-4-3-out对象" aria-hidden="true">#</a> 10.4.3 out对象</h4><p>out对象是 javax.servlet.jsp.JspWriter 类的实例，用来在response对象中写入内容。</p><p>最初的JspWriter类对象根据页面是否有缓存来进行不同的实例化操作。可以在page指令中使用buffered=&#39;false&#39;属性来轻松关闭缓存。</p><p>JspWriter类包含了大部分java.io.PrintWriter类中的方法。不过，JspWriter新增了一些专为处理缓存而设计的方法。还有就是，JspWriter类会抛出IOExceptions异常，而PrintWriter不会。</p><p>下表列出了我们将会用来输出boolean，char，int，double，Srtring，object等类型数据的重要方法：</p><table><thead><tr><th style="text-align:left;"><strong>方法</strong></th><th style="text-align:left;"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>out.print(dataType dt)</strong></td><td style="text-align:left;">输出Type类型的值</td></tr><tr><td style="text-align:left;"><strong>out.println(dataType dt)</strong></td><td style="text-align:left;">输出Type类型的值然后换行</td></tr><tr><td style="text-align:left;"><strong>out.flush()</strong></td><td style="text-align:left;">刷新输出流</td></tr></tbody></table><hr><h4 id="_10-4-4-session对象" tabindex="-1"><a class="header-anchor" href="#_10-4-4-session对象" aria-hidden="true">#</a> 10.4.4 session对象</h4><p>session对象是 javax.servlet.http.HttpSession 类的实例。和Java Servlets中的session对象有一样的行为。</p><p>session对象用来跟踪在各个客户端请求间的会话。</p><hr><h4 id="_10-4-5-application对象" tabindex="-1"><a class="header-anchor" href="#_10-4-5-application对象" aria-hidden="true">#</a> 10.4.5 application对象</h4><p>application对象直接包装了servlet的ServletContext类的对象，是javax.servlet.ServletContext 类的实例。</p><p>这个对象在JSP页面的整个生命周期中都代表着这个JSP页面。这个对象在JSP页面初始化时被创建，随着jspDestroy()方法的调用而被移除。</p><p>通过向application中添加属性，则所有组成您web应用的JSP文件都能访问到这些属性。</p><hr><h4 id="_10-4-6-config对象" tabindex="-1"><a class="header-anchor" href="#_10-4-6-config对象" aria-hidden="true">#</a> 10.4.6 config对象</h4><p>config对象是 javax.servlet.ServletConfig 类的实例，直接包装了servlet的ServletConfig类的对象。</p><p>这个对象允许开发者访问Servlet或者JSP引擎的初始化参数，比如文件路径等。</p><p>以下是config对象的使用方法，不是很重要，所以不常用：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>config<span class="token punctuation">.</span><span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>它返回包含在<code>&lt;servlet-name&gt;</code>元素中的servlet名字，注意，<code>&lt;servlet-name&gt;</code>元素在 WEB-INF\\web.xml 文件中定义。</p><hr><h4 id="_10-4-7-pagecontext-对象" tabindex="-1"><a class="header-anchor" href="#_10-4-7-pagecontext-对象" aria-hidden="true">#</a> 10.4.7 pageContext 对象</h4><p>pageContext对象是javax.servlet.jsp.PageContext 类的实例，用来代表整个JSP页面。</p><p>这个对象主要用来访问页面信息，同时过滤掉大部分实现细节。</p><p>这个对象存储了request对象和response对象的引用。application对象，config对象，session对象，out对象可以通过访问这个对象的属性来导出。</p><p>pageContext对象也包含了传给JSP页面的指令信息，包括缓存信息，ErrorPage URL,页面scope等。</p><p>PageContext类定义了一些字段，包括PAGE_SCOPE，REQUEST_SCOPE，SESSION_SCOPE， APPLICATION_SCOPE。它也提供了40余种方法，有一半继承自javax.servlet.jsp.JspContext 类。</p><p>其中一个重要的方法就是removeArribute()，它可接受一个或两个参数。比如，pageContext.removeArribute(&quot;attrName&quot;)移除四个scope中相关属性，但是下面这种方法只移除特定scope中的相关属性：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>pageContext<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;attrName&quot;</span><span class="token punctuation">,</span> <span class="token constant">PAGE_SCOPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><hr><h4 id="_10-4-8-page-对象" tabindex="-1"><a class="header-anchor" href="#_10-4-8-page-对象" aria-hidden="true">#</a> 10.4.8 page 对象</h4><p>这个对象就是页面实例的引用。它可以被看做是整个JSP页面的代表。</p><p>page 对象就是this对象的同义词。</p><hr><h4 id="_10-4-9-exception-对象" tabindex="-1"><a class="header-anchor" href="#_10-4-9-exception-对象" aria-hidden="true">#</a> 10.4.9 exception 对象</h4><p>exception 对象包装了从先前页面中抛出的异常信息。它通常被用来产生对出错条件的适当响应。</p><h3 id="_10-5-el语法" tabindex="-1"><a class="header-anchor" href="#_10-5-el语法" aria-hidden="true">#</a> 10.5 EL语法</h3><h4 id="_10-5-1-语法格式" tabindex="-1"><a class="header-anchor" href="#_10-5-1-语法格式" aria-hidden="true">#</a> 10.5.1 语法格式</h4><p><strong>\${ expression }</strong></p><p>要在页面中输出，则可用\${}</p><p>{“Hello World”}</p><h4 id="_10-5-2-el隐含对象" tabindex="-1"><a class="header-anchor" href="#_10-5-2-el隐含对象" aria-hidden="true">#</a> 10.5.2 EL隐含对象</h4><p><img src="`+n+`" alt="image-20200407211445131" loading="lazy"></p><h3 id="_10-6-jstl" tabindex="-1"><a class="header-anchor" href="#_10-6-jstl" aria-hidden="true">#</a> 10.6 JSTL</h3><h4 id="_10-6-1-引入" tabindex="-1"><a class="header-anchor" href="#_10-6-1-引入" aria-hidden="true">#</a> 10.6.1 引入</h4><div class="language-jsp" data-ext="jsp"><pre class="language-jsp"><code>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;
</code></pre></div><h4 id="_10-6-2-常用标签" tabindex="-1"><a class="header-anchor" href="#_10-6-2-常用标签" aria-hidden="true">#</a> 10.6.2 常用标签</h4><p><code>&lt;c:out&gt;</code> 用于在JSP中显示数据，就像&lt;%= ... &gt; <code>&lt;c:set&gt;</code> 用于保存数据 <code>&lt;c:remove&gt;</code> 用于删除数据 <code>&lt;c:catch&gt;</code> 用来处理产生错误的异常状况，并且将错误信息储存起来 <code>&lt;c:if&gt;</code> 与我们在一般程序中用的if一样 <code>&lt;c:choose&gt;</code> 本身只当做<code>&lt;c:when&gt;</code>和<code>&lt;c:otherwise&gt;</code>的父标签 <code>&lt;c:when&gt;</code> <code>&lt;c:choose&gt;</code>的子标签，用来判断条件是否成立 <code>&lt;c:otherwise&gt;</code> <code>&lt;c:choose&gt;</code>的子标签，接在<code>&lt;c:when&gt;</code>标签后，当<code>&lt;c:when&gt;</code>标签判断为false时被执行 <code>&lt;c:import&gt;</code> 检索一个绝对或相对 URL，然后将其内容暴露给页面 <code>&lt;c:forEach&gt;</code> 基础迭代标签，接受多种集合类型 <code>&lt;c:forTokens&gt;</code> 根据指定的分隔符来分隔内容并迭代输出 <code>&lt;c:param&gt;</code> 用来给包含或重定向的页面传递参数 <code>&lt;c:redirect&gt;</code> 重定向至一个新的URL. <code>&lt;c:url&gt;</code> 使用可选的查询参数来创造一个URL</p>`,188),r=[d];function i(o,c){return e(),a("div",null,r)}const h=t(p,[["render",i],["__file","s10.html.vue"]]);export{h as default};
