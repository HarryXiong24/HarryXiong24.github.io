import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-621ebf19.js";const e={},p=t(`<h2 id="事件的绑定" tabindex="-1"><a class="header-anchor" href="#事件的绑定" aria-hidden="true">#</a> 事件的绑定</h2><h3 id="_8-1-绑定事件" tabindex="-1"><a class="header-anchor" href="#_8-1-绑定事件" aria-hidden="true">#</a> 8.1 绑定事件</h3><p>通过 <strong>对象.事件=函数</strong> 的形式绑定的响应函数，只能同时为一个元素的一个事件绑定一个响应函数，不能够绑定多个，如果绑定了多个，则后边绑定的响应函数会覆盖掉前边的</p><ul><li><p><strong>通过addEventListener()方法(不支持IE8及以下浏览器)可以为元素绑定多个响应函数</strong>,该方法有三个参数 <strong>参数</strong></p></li><li><ul><li>代表事件的字符串,不要加on</li></ul></li><li><ul><li>回调函数，当事件触发时该函数会被调用</li></ul></li><li><ul><li>是否在捕获或冒泡阶段触发事件，需要一个布尔值，true表示事件在捕获阶段执行,flase表示在冒泡阶段执行,默认值为false(可选),如果想要这两个事件都可以在同一个对象上发生必须添加两次事件</li></ul></li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span>
</code></pre></div><p>addEventListene0r()方法可以同时为一个元素的相同事件绑定响应函数，这样当事件被触发时，响应函数将<strong>会按照函数的绑定顺序执行</strong></p><ul><li><p><strong>在IE8及以下浏览器中可以通过attachEvent()方法为元素绑定多个响应函数</strong>,该方法有两个参数 <strong>参数</strong></p></li><li><ul><li>事件的字符串，要加on</li></ul></li><li><ul><li>回调函数</li></ul></li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>btn<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">&quot;onclick&quot;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>​ attachEvent()方法也可以同时为一个元素的相同事件绑定响应函数，不同的是该方法是<strong>后绑定的响应函数先执行</strong></p><p><strong>注:</strong></p><ul><li><p><strong>大部分时候响应函数的执行顺序都不重要，如果需要对顺序要求就写成一个响应函数，要用这种方法添加的响应函数都是顺序不重要的函数</strong></p></li><li><p><strong>事件的绑定和委派等最好都是通过addEventListener()方法等来绑定,以免和别人的发生冲突</strong></p></li></ul><p>**注意:**addEventListener()方法中的this是绑定事件的对象，attachEvent()方法中的this是window对象</p><p><strong>兼容写法</strong></p><p>注意:addEventListener()中的this是绑定事件的对象，attachEvent()中的this是window，需要统一两个方法的this</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
参数:obj 要绑定事件的对象
    eventStr 事件的字符串
    callback 回调函数
*/</span>
<span class="token keyword">function</span> <span class="token function">addEvent</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span>eventStr<span class="token punctuation">,</span>callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span><span class="token punctuation">{</span>
        obj<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventStr<span class="token punctuation">,</span>callback<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        obj<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">&quot;on&quot;</span><span class="token operator">+</span>eventStr<span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">callback</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
因为this的不统一必须在attchEvent()中加一个回调函数，浏览器自动调用函数，然后我们自己手动调用函数，这样我们就能控制callback方法中的this了
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-2-移除绑定" tabindex="-1"><a class="header-anchor" href="#_8-2-移除绑定" aria-hidden="true">#</a> 8.2 移除绑定</h3><ul><li><p><strong>通过removeEventListener()方法(不支持IE8及以下浏览器)可以为元素移除响应函数</strong>,该方法有三个参数 <strong>参数</strong></p></li><li><ul><li>代表事件的字符串,不要加on</li></ul></li><li><ul><li>需要被移除的事件函数</li></ul></li><li><ul><li>是否在捕获或冒泡阶段取消绑定事件，需要一个布尔值，true表示事件在捕获阶段执行,flase表示在冒泡阶段执行,默认值为false(可选)</li></ul></li><li><p><strong>在IE8及以下浏览器中可以通过detachEvent()方法为元素移除响应函数</strong>,该方法有两个参数 <strong>参数</strong></p></li><li><ul><li>事件的字符串，要加on</li></ul></li><li><ul><li>回调函数</li></ul></li></ul><p><strong>注意:</strong></p><ul><li><p>如果要使用移除绑定,那么绑定时需要必须通过函数赋值的方式来绑定,因为如果是匿名函数移除的函数并不是同一个对象</p></li><li><p>如果不为removeEventListener()方法传入第三个参数会默认是移除冒泡状态的事件函数,不会移除捕获阶段的,因为这其实是两个不同的事件</p></li><li><p>移除绑定只能对用上述方法绑定的函数器作用,不会对用onclick属性等绑定的函数起作用</p></li></ul><p><strong>兼容写法</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
参数:obj 要绑定事件的对象
    eventStr 事件的字符串
    callback 回调函数
*/</span>
<span class="token keyword">function</span> <span class="token function">removeEvent</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span>eventStr<span class="token punctuation">,</span>callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>removeEventListener<span class="token punctuation">)</span><span class="token punctuation">{</span>
        obj<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>eventStr<span class="token punctuation">,</span>callback<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        obj<span class="token punctuation">.</span><span class="token function">detachEven</span><span class="token punctuation">(</span><span class="token string">&quot;on&quot;</span><span class="token operator">+</span>eventStr<span class="token punctuation">,</span>callback<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),l=[p];function o(i,c){return s(),a("div",null,l)}const d=n(e,[["render",o],["__file","db8.html.vue"]]);export{d as default};
