import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-430054e9.js";const p={},o=t(`<h2 id="字符串方法" tabindex="-1"><a class="header-anchor" href="#字符串方法" aria-hidden="true">#</a> 字符串方法</h2><h3 id="_9-1-length" tabindex="-1"><a class="header-anchor" href="#_9-1-length" aria-hidden="true">#</a> 9.1 length</h3><p><strong>在底层字符串是以字符数组的形式保存的,所以字符串其实是有length属性的,并且也可以使用索引(低版本IE不</strong></p><p><strong>支持直接用索引,所以用charAt()代替)</strong></p><p>**注意:**与数组的length不同,字符串的length是只读的,不能修改</p><h3 id="_9-2-charat-charcodeat与fromcharcode方法" tabindex="-1"><a class="header-anchor" href="#_9-2-charat-charcodeat与fromcharcode方法" aria-hidden="true">#</a> 9.2 charAt,charCodeAt与fromCharCode方法</h3><ul><li><strong>charAt()方法可以返回字符串中指定位置的字符,根据索引获取指定的字符</strong></li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">&quot;Hello&quot;</span>
<span class="token keyword">var</span> result<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">//会打印出H字符</span>
</code></pre></div><ul><li><strong>charCodeAt()方法会返回指定字符串中指定字符的Unicode编码</strong></li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">&quot;123&quot;</span>
<span class="token keyword">var</span> result<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">//打印出49(1的unicode编码)</span>
</code></pre></div><ul><li><strong>fromCharCode()方法可以根据字符编码去获取字符</strong>,这个方法由String来调用</li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> result<span class="token operator">=</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">72</span><span class="token punctuation">)</span><span class="token comment">//result的值为字符串H</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="_9-3-concat方法" tabindex="-1"><a class="header-anchor" href="#_9-3-concat方法" aria-hidden="true">#</a> 9.3 concat方法</h3><p>**concat()方法用于连接两个或多个字符串(中间,隔开),**作用和+一样,但是+更加简便,所以一般字符串拼接还是用+</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str1<span class="token operator">=</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str2<span class="token operator">=</span><span class="token string">&quot;456&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str3<span class="token operator">=</span>str1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通str1+str2</span>
<span class="token comment">//新字符串中的顺序还是先是调用者,然后后面是参数传入的顺序</span>
</code></pre></div><h3 id="_9-4-indexof与lastindexof方法" tabindex="-1"><a class="header-anchor" href="#_9-4-indexof与lastindexof方法" aria-hidden="true">#</a> 9.4 indexOf与lastIndexOf方法</h3><ul><li><p>indexOf()方法可以检索一个字符串中是否含有指定的字符</p><p>找到返回该字符在字符串中的索引位置,没有找到则</p><p>返回-1</p><p>该方法可以指定第二个参数,第二个参数是指定开始查找的位置(0是第一个位置)</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">&quot;hello&quot;</span>
<span class="token keyword">var</span> result<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;h&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
result<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;h&quot;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>lastIndexOf()方法用法和IndexOf()类似,不同的是检索字符时是<strong>从右到左</strong>检索,也可以指定开始查找的位置 **注意:**虽然是从右往左检索,但是在设置第二个参数的时候指定开始查找的位置还是从左往右数的,只是查找的时 候是从右往左</p></li></ul><h3 id="_9-5-strartswith-endswith与includes方法" tabindex="-1"><a class="header-anchor" href="#_9-5-strartswith-endswith与includes方法" aria-hidden="true">#</a> 9.5 strartsWith,endsWith与includes方法</h3><ul><li><p>**includes()：**返回布尔值，表示是否找到了参数字符串，支持第二个参数，表示开始搜索的位置</p></li><li><p>**startsWith()：**返回布尔值,表示参数字符串是否在查找字符串的头部,支持第二个参数，表示开始搜索的位置</p></li><li><p>endsWith()：</p><p>返回布尔值，表示参数字符串是否在查找字符串的尾部,一般用做后缀名判断,支持第二个参数，</p><p>表示前n个字符,与前两个的表现形式不同</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;Hello world!&#39;</span><span class="token punctuation">;</span>
str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>

str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;world&#39;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
str <span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre></div></li></ul><h3 id="_9-6-slice方法" tabindex="-1"><a class="header-anchor" href="#_9-6-slice方法" aria-hidden="true">#</a> 9.6 slice方法</h3><p><strong>slice()方法可以从字符串中截取指定的内容</strong>,截取完成后会将截取到的字符串作为返回值返回</p><p>该方法有**两个参数,**第一个参数是开始位置,第二个参数是结束位置(但查找时不包括结束位置),可以不写第二个参数,这样会将从开始到后面所有的字符截取</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回hel(不包含索引为3的l)</span>
</code></pre></div><p><strong>注意:</strong></p><ul><li><p>该方法只能从左往右边截取,如果第一个数比第二个数大,则会返回空串</p></li><li><p>该方法接收负值,负值意味着从右往左数</p></li></ul><h3 id="_9-7-substring与substr方法" tabindex="-1"><a class="header-anchor" href="#_9-7-substring与substr方法" aria-hidden="true">#</a> 9.7 subString与substr方法</h3><ul><li><p><strong>subString()方法可以用来截取一个字符串，和slice()类似</strong>，也有两个参数,不同的是这个方法不能接收负值作 为参数，如果传递了一个负值，则默认变成0,而且它会自动调整参数的位置，如果第二个参数小于第二个，则 自动交换参数位置</p></li><li><p><strong>substr()方法也是用来截取字符串</strong>，该方法有两个参数,与slice()和subString()都不同,第一个参数是开始位置的 索引，<strong>第二个参数是要截取的长度</strong></p></li></ul><h3 id="_9-8-split方法" tabindex="-1"><a class="header-anchor" href="#_9-8-split方法" aria-hidden="true">#</a> 9.8 split方法</h3><p><strong>split()方法可以将一个字符串拆分为一个数组,<strong>需要一个</strong>字符串</strong>作为参数，该方法将会根据字符串去拆分数组</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">&quot;abc,bcd,efg,hij&quot;</span>

<span class="token keyword">var</span> result<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将str用,作为间隔去拆分字符串</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//result就变成了一个数组，第一个值是abc,第二个值是bcd</span>
</code></pre></div><p><strong>注意:</strong></p><ul><li><p>如果传递一个空串作为参数，则会将每个字符都拆分为数组中的一个值</p></li><li><p>如果不传入参数会返回一个只有一个整个字符串的值的数组</p></li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//split方法的妙用--&gt;字符倒序 </span>
<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">spilt</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//值为cba</span>
</code></pre></div><h3 id="_9-9-tolowercase与touppercase方法" tabindex="-1"><a class="header-anchor" href="#_9-9-tolowercase与touppercase方法" aria-hidden="true">#</a> 9.9 toLowerCase与toUpperCase方法</h3><ul><li><p><strong>toLowerCase()方法将字符串转换为小写并返回</strong></p></li><li><p><strong>toUpperCase()方法将字符串转换为大写并返回</strong></p></li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">&quot;aBc&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result1<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">lof</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//值为abc</span>

<span class="token keyword">var</span> result2<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">lof</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//值为ABC</span>

<span class="token comment">//这两种方法通常用做在进行无视大小写验证的时候使用</span>
</code></pre></div><h3 id="_9-10-valueof方法" tabindex="-1"><a class="header-anchor" href="#_9-10-valueof方法" aria-hidden="true">#</a> 9.10 valueOf方法</h3><p><strong>valueOf()方法返回字符串的原始值(就是字符串本身)</strong></p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token operator">===</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
</code></pre></div><h3 id="_9-11-trim方法" tabindex="-1"><a class="header-anchor" href="#_9-11-trim方法" aria-hidden="true">#</a> 9.11 trim方法</h3><p><strong>trim()方法用作删除字符串前后的空格(字符中间的空格不会删除),通常在用户输入验证的时候使用</strong></p><ul><li><p>直接使用,调用浏览器中的字符串自带的trim()方法(不兼容低版本IE)</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">&quot;   12  3   &quot;</span>
<span class="token keyword">var</span> result<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印出123</span>
</code></pre></div></li><li><p>间接使用,使用正则表达式</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myTrim</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s+|\\s+$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gm</span></span><span class="token punctuation">,</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token function">myTrim</span><span class="token punctuation">(</span><span class="token string">&quot;        Hello World!        &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li></ul><h3 id="_9-12-repeat方法" tabindex="-1"><a class="header-anchor" href="#_9-12-repeat方法" aria-hidden="true">#</a> 9.12 repeat方法</h3><p><strong>repeat()方法通过字符串调用,会返回一个新的字符串,该方法内传入的数值参数表示将该字符串复制几次,不会改变原字符串</strong></p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str3<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&quot;123&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&quot;123123&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&quot;&quot;空字符串</span>
</code></pre></div><p><strong>注意:</strong></p><ul><li><p>参数如果是浮点数,会向下取整</p></li><li><p>参数是负值或是Infinity会报错</p></li><li><p>参数为0到-1之间的小数等同于0，这是因为会先进行取整运算,0到-1之间的小数,取整以后等于-0,视同为0</p></li><li><p>参数为NaN等同于0</p></li><li><p>如果参数为字符串则会先转换为数值类型</p></li></ul><h3 id="_9-13-padstart与padend方法" tabindex="-1"><a class="header-anchor" href="#_9-13-padstart与padend方法" aria-hidden="true">#</a> 9.13 padStart与padEnd方法</h3><p><strong>ES8(ES2017)中引入了字符串的补全功能,如果某个字符串不够指定长度,会在头部会尾部补全该字符串,不会改变原字符串</strong></p><ul><li><p><strong>padStart()方法用于在头部补全</strong></p></li><li><p><strong>padEnd()方法用于在尾部补全</strong></p></li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str2<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&quot;ab&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str3<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&quot;123&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&quot;ab123&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&quot;123  &quot;</span>
</code></pre></div><p><strong>注意:</strong></p><ul><li><p>如果原字符串的长度等于或大于指定的最小长度,则返回原字符串</p></li><li><p>如果用来补全的字符串与原字符串,两者的长度之和超过了指定的最小长度,则会截去超出位数的补全字符串</p></li><li><p>如果省略第二个参数,默认使用空格补全长度</p></li></ul>`,53),e=[o];function c(l,u){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","js9.html.vue"]]);export{k as default};
