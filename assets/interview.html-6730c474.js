import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o,c,a as n,b as s,d as t,e as l}from"./app-3eac2b20.js";const u={},i=n("h1",{id:"面试题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#面试题","aria-hidden":"true"},"#"),s(" 面试题")],-1),r=n("h2",{id:"网络相关",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#网络相关","aria-hidden":"true"},"#"),s(" 网络相关")],-1),k={href:"https://zhuanlan.zhihu.com/p/72616216",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.cnblogs.com/kaishirenshi/p/12575847.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://segmentfault.com/a/1190000016199807",target:"_blank",rel:"noopener noreferrer"},v={href:"https://blog.csdn.net/weixin_45284354/article/details/113874941",target:"_blank",rel:"noopener noreferrer"},b={href:"https://developer.51cto.com/art/202006/618792.htm",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.cnblogs.com/0201zcr/p/4694945.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://blog.csdn.net/qq_38950316/article/details/81087809",target:"_blank",rel:"noopener noreferrer"},g={href:"https://blog.csdn.net/lyf_ldh/article/details/81806476",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.cnblogs.com/fundebug/p/differences-of-tcp-and-udp.html",target:"_blank",rel:"noopener noreferrer"},_={href:"https://zhuanlan.zhihu.com/p/37379780",target:"_blank",rel:"noopener noreferrer"},y={href:"https://tsejx.github.io/javascript-guidebook/computer-networks/computer-network-architecture/dns/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://fecommunity.github.io/front-end-interview/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/8.CDN.html",target:"_blank",rel:"noopener noreferrer"},j=n("h2",{id:"安全相关",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#安全相关","aria-hidden":"true"},"#"),s(" 安全相关")],-1),q={href:"https://zhuanlan.zhihu.com/p/83865185",target:"_blank",rel:"noopener noreferrer"},S={href:"https://segmentfault.com/a/1190000022398875",target:"_blank",rel:"noopener noreferrer"},z={href:"https://www.cnblogs.com/soyxiaobi/p/9616011.html",target:"_blank",rel:"noopener noreferrer"},C={href:"https://blog.csdn.net/wang_yu_shun/article/details/110790205",target:"_blank",rel:"noopener noreferrer"},E={href:"https://juejin.cn/post/6844903974156369927",target:"_blank",rel:"noopener noreferrer"},N=n("h2",{id:"技术相关",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#技术相关","aria-hidden":"true"},"#"),s(" 技术相关")],-1),B={href:"https://segmentfault.com/a/1190000005654451",target:"_blank",rel:"noopener noreferrer"},L={href:"https://zh.javascript.info/bubbling-and-capturing",target:"_blank",rel:"noopener noreferrer"},F={href:"https://www.cnblogs.com/snidget/articles/12673461.html",target:"_blank",rel:"noopener noreferrer"},A={href:"https://vue3js.cn/interview/JavaScript/event_agent.html#%E4%B8%80%E3%80%81%E6%98%AF%E4%BB%80%E4%B9%88",target:"_blank",rel:"noopener noreferrer"},I={href:"https://segmentfault.com/a/1190000021027154",target:"_blank",rel:"noopener noreferrer"},R={href:"https://www.harryxiong24.com/FrontEnd/indepth/Browser/",target:"_blank",rel:"noopener noreferrer"},V={href:"https://zhuanlan.zhihu.com/p/25736931",target:"_blank",rel:"noopener noreferrer"},O={href:"http://blog.itblood.com/2383.html",target:"_blank",rel:"noopener noreferrer"},T={href:"https://www.jianshu.com/p/19a8c1d76257",target:"_blank",rel:"noopener noreferrer"},P={href:"https://segmentfault.com/a/1190000020954429",target:"_blank",rel:"noopener noreferrer"},J={href:"https://juejin.cn/post/6844904033002455048",target:"_blank",rel:"noopener noreferrer"},D={href:"https://www.jianshu.com/p/825858259fd9",target:"_blank",rel:"noopener noreferrer"},M={href:"https://www.jianshu.com/p/be491bfbca0d",target:"_blank",rel:"noopener noreferrer"},U={href:"https://www.cnblogs.com/luoluo-snow/p/11505403.html",target:"_blank",rel:"noopener noreferrer"},X={href:"https://zhuanlan.zhihu.com/p/148152129",target:"_blank",rel:"noopener noreferrer"},H={href:"https://zhuanlan.zhihu.com/p/148462034",target:"_blank",rel:"noopener noreferrer"},K={href:"https://juejin.cn/post/6844903848981577735",target:"_blank",rel:"noopener noreferrer"},W={href:"https://www.php.cn/js-tutorial-411019.html",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://www.jianshu.com/p/8e94dd6c3bd2",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://segmentfault.com/a/1190000009026788",target:"_blank",rel:"noopener noreferrer"},G=n("h2",{id:"vue-与-react",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vue-与-react","aria-hidden":"true"},"#"),s(" Vue 与 react")],-1),Q={href:"https://zhuanlan.zhihu.com/p/149972619",target:"_blank",rel:"noopener noreferrer"},$={href:"https://www.chenhanpeng.com/interview-vue-reactivity-in-depth/",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://juejin.cn/post/6931984730761986056#heading-3",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://juejin.cn/post/6844903552519766029",target:"_blank",rel:"noopener noreferrer"},an={href:"https://juejin.cn/post/6844904134945030151",target:"_blank",rel:"noopener noreferrer"},tn={href:"https://juejin.cn/post/6995744573989322789",target:"_blank",rel:"noopener noreferrer"},pn={href:"https://juejin.cn/post/6875209402035634184#heading-8",target:"_blank",rel:"noopener noreferrer"},en=n("h2",{id:"前端场景相关",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前端场景相关","aria-hidden":"true"},"#"),s(" 前端场景相关")],-1),on={href:"https://blog.csdn.net/weixin_33812433/article/details/88708522",target:"_blank",rel:"noopener noreferrer"},cn={href:"https://zhuanlan.zhihu.com/p/57895541",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://blog.csdn.net/yiyueqinghui/article/details/109160921",target:"_blank",rel:"noopener noreferrer"},un={href:"https://segmentfault.com/q/1010000015669214",target:"_blank",rel:"noopener noreferrer"},rn={href:"https://zhuanlan.zhihu.com/p/266102548",target:"_blank",rel:"noopener noreferrer"},kn={href:"https://juejin.cn/post/6844904069958467592",target:"_blank",rel:"noopener noreferrer"},dn={href:"https://juejin.cn/post/6844904046436843527",target:"_blank",rel:"noopener noreferrer"},mn={href:"https://blog.csdn.net/weixin_33812433/article/details/88708522",target:"_blank",rel:"noopener noreferrer"},vn=n("h2",{id:"计算机基础相关",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#计算机基础相关","aria-hidden":"true"},"#"),s(" 计算机基础相关")],-1),bn={href:"https://zhuanlan.zhihu.com/p/60751152",target:"_blank",rel:"noopener noreferrer"},hn={href:"https://cloud.tencent.com/developer/article/1690556",target:"_blank",rel:"noopener noreferrer"},fn={href:"https://www.cnblogs.com/fanguangdexiaoyuer/p/10834737.html#_label6",target:"_blank",rel:"noopener noreferrer"},gn={href:"https://cloud.tencent.com/developer/article/1415705",target:"_blank",rel:"noopener noreferrer"},wn=n("h2",{id:"代码题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#代码题","aria-hidden":"true"},"#"),s(" 代码题")],-1),_n=n("h3",{id:"css相关",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#css相关","aria-hidden":"true"},"#"),s(" CSS相关")],-1),yn={href:"https://www.cnblogs.com/v-weiwang/p/5057588.html",target:"_blank",rel:"noopener noreferrer"},xn={href:"https://m.html.cn/qa/css3/12431.html",target:"_blank",rel:"noopener noreferrer"},jn={href:"https://blog.csdn.net/crystal6918/article/details/55224670",target:"_blank",rel:"noopener noreferrer"},qn={href:"https://www.cnblogs.com/formercoding/p/12826126.html",target:"_blank",rel:"noopener noreferrer"},Sn={href:"https://book.itheima.net/study/1258676978588860418/1267121692648452097/1274753751378305025",target:"_blank",rel:"noopener noreferrer"},zn={href:"https://www.harryxiong24.com/FrontEnd/htmlcss/hint/#%E6%96%87%E6%A1%A3%E6%B5%81",target:"_blank",rel:"noopener noreferrer"},Cn={href:"https://www.harryxiong24.com/FrontEnd/htmlcss/hint/#position",target:"_blank",rel:"noopener noreferrer"},En={href:"https://www.harryxiong24.com/FrontEnd/htmlcss/css/#_10-flex%E5%B8%83%E5%B1%80",target:"_blank",rel:"noopener noreferrer"},Nn=n("h3",{id:"js相关",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#js相关","aria-hidden":"true"},"#"),s(" JS相关")],-1),Bn={href:"https://juejin.cn/post/6844903911686406158#heading-9",target:"_blank",rel:"noopener noreferrer"},Ln={href:"https://juejin.cn/post/6847902219967135757",target:"_blank",rel:"noopener noreferrer"},Fn={href:"https://blog.csdn.net/wzc_coder/article/details/108722584",target:"_blank",rel:"noopener noreferrer"},An={href:"https://juejin.cn/post/6844904196706140168",target:"_blank",rel:"noopener noreferrer"},In={href:"https://www.cnblogs.com/ckAng/p/12390124.html",target:"_blank",rel:"noopener noreferrer"},Rn={href:"https://www.jianshu.com/p/90b6280dd1b6",target:"_blank",rel:"noopener noreferrer"},Vn=n("h3",{id:"算法相关",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#算法相关","aria-hidden":"true"},"#"),s(" 算法相关")],-1),On={href:"http://xxxbw.github.io/2016/03/03/sort/",target:"_blank",rel:"noopener noreferrer"},Tn={href:"https://blog.csdn.net/mzc_love/article/details/104823305",target:"_blank",rel:"noopener noreferrer"},Pn={href:"https://blog.csdn.net/buster2014/article/details/40050183",target:"_blank",rel:"noopener noreferrer"},Jn={href:"https://www.cnblogs.com/XiaoZhengYu/p/12492445.html",target:"_blank",rel:"noopener noreferrer"},Dn={href:"https://zhuanlan.zhihu.com/p/29520044",target:"_blank",rel:"noopener noreferrer"},Mn=l(`<h2 id="杂记" tabindex="-1"><a class="header-anchor" href="#杂记" aria-hidden="true">#</a> 杂记</h2><h3 id="有效的括号" tabindex="-1"><a class="header-anchor" href="#有效的括号" aria-hidden="true">#</a> 有效的括号</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">isValid</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> pairs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token punctuation">[</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token string">&#39;]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;[&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token string">&#39;}&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;{&#39;</span><span class="token punctuation">]</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> stk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> ch <span class="token keyword">of</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pairs<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stk<span class="token punctuation">.</span>length <span class="token operator">||</span> stk<span class="token punctuation">[</span>stk<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!==</span> pairs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">!</span>stk<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="判断this" tabindex="-1"><a class="header-anchor" href="#判断this" aria-hidden="true">#</a> 判断this</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> length <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
  <span class="token function-variable function">test1</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
obj1<span class="token punctuation">.</span>test2 <span class="token operator">=</span> fn<span class="token punctuation">;</span>
<span class="token keyword">let</span> res1 <span class="token operator">=</span> obj1<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> res2 <span class="token operator">=</span> obj1<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> res3 <span class="token operator">=</span> obj1<span class="token punctuation">.</span><span class="token function">test2</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> res4 <span class="token operator">=</span> obj1<span class="token punctuation">.</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res1<span class="token punctuation">,</span> res2<span class="token punctuation">,</span> res3<span class="token punctuation">,</span> res4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11 11 11 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="原型链判断" tabindex="-1"><a class="header-anchor" href="#原型链判断" aria-hidden="true">#</a> 原型链判断</h3><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span> <span class="token comment">//null</span>
<span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span> <span class="token comment">//Object.prototype</span>
Object<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span> <span class="token comment">//Function.prototype</span>
Object <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
Function <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
<span class="token class-name">Function</span><span class="token punctuation">.</span>prototype <span class="token operator">===</span> Function<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span> <span class="token comment">//true</span>
</code></pre></div><h3 id="比较版本号" tabindex="-1"><a class="header-anchor" href="#比较版本号" aria-hidden="true">#</a> 比较版本号</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token parameter">version1<span class="token punctuation">,</span> version2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> arr1 <span class="token operator">=</span> version1<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr2 <span class="token operator">=</span> version2<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> len1 <span class="token operator">=</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">,</span> len2 <span class="token operator">=</span> arr2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">const</span> len <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>len1<span class="token punctuation">,</span> len2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        arr1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        arr2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num2 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>num1 <span class="token operator">&lt;</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num1 <span class="token operator">&gt;</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token string">&quot;0.1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token string">&quot;1.0.1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token string">&quot;7.5.2.4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;7.5.3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token string">&quot;1.01&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1.001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token string">&quot;1.0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="说输出" tabindex="-1"><a class="header-anchor" href="#说输出" aria-hidden="true">#</a> 说输出</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ./a.js</span>
<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token function-variable function">setCount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
count<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
count<span class="token punctuation">,</span>
setCount
<span class="token punctuation">}</span>

<span class="token comment">//b.js</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./a.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

obj<span class="token punctuation">.</span><span class="token function">setCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span>count<span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;b next&#39;</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// b 1</span>
<span class="token comment">// a 2</span>
<span class="token comment">// b next 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="说输出2" tabindex="-1"><a class="header-anchor" href="#说输出2" aria-hidden="true">#</a> 说输出2</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">test</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">test</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> retA <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
retA<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
retA<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
retA<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> retB <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> retC <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;good&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;bad&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
retC<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;good&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
retC<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;bad&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// undefined</span>
<span class="token comment">// 0        </span>
<span class="token comment">// 0        </span>
<span class="token comment">// 0        </span>
<span class="token comment">// undefined</span>
<span class="token comment">// 0        </span>
<span class="token comment">// 2</span>
<span class="token comment">// 4</span>
<span class="token comment">// undefined</span>
<span class="token comment">// good</span>
<span class="token comment">// bad</span>
<span class="token comment">// bad</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mul函数" tabindex="-1"><a class="header-anchor" href="#mul函数" aria-hidden="true">#</a> mul函数</h3><p>写一个mul函数，使用方法如下：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mul</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output : 24 </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mul</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output : 48</span>
</code></pre></div><p>答案直接给出：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mul</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// anonymous function </span>
        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">z</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// anonymous function </span>
            <span class="token keyword">return</span> x <span class="token operator">*</span> y <span class="token operator">*</span> z<span class="token punctuation">;</span> 
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>mul 返回一个匿名函数，运行这个匿名函数又返回一个匿名函数，最里面的匿名函数可以访问 x,y,z 进而算出乘积返回即可。</p><p>对于JavaScript中的函数一般可以考察如下知识点：</p><ol><li>函数是一等公民</li><li>函数可以有属性，并且能连接到它的构造方法</li><li>函数可以像一个变量一样存在内存中</li><li>函数可以当做参数传给其他函数</li><li>函数可以返回其他函数</li></ol><h3 id="二分查找" tabindex="-1"><a class="header-anchor" href="#二分查找" aria-hidden="true">#</a> 二分查找</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 一般二分</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">nums</span><span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">target</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token literal-property property">left</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> <span class="token literal-property property">right</span><span class="token operator">:</span> number <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token literal-property property">middle</span><span class="token operator">:</span> number <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> middle<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      left <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      right <span class="token operator">=</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 左右二分</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">searchRange</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">nums</span><span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">target</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token literal-property property">left</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token function">searchBound</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> <span class="token literal-property property">right</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token function">searchBound</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>left<span class="token punctuation">,</span> right<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">searchBound</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">nums</span><span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">target</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">isLeft</span><span class="token operator">:</span> boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token literal-property property">left</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> <span class="token literal-property property">right</span><span class="token operator">:</span> number <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result <span class="token operator">=</span> mid<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>isLeft<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// test</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">searchRange</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="寻找单链表的倒数第-k-个元素" tabindex="-1"><a class="header-anchor" href="#寻找单链表的倒数第-k-个元素" aria-hidden="true">#</a> 寻找单链表的倒数第 k 个元素</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">val</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
  <span class="token literal-property property">next</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">,</span> next<span class="token operator">?</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token punctuation">(</span>val <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token punctuation">(</span>next <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 画图一目了然整个过程</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">head</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token literal-property property">k</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token literal-property property">fast</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> <span class="token literal-property property">slow</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  fast <span class="token operator">=</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span> k<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fast <span class="token operator">=</span> fast<span class="token operator">!</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next
    slow <span class="token operator">=</span> slow<span class="token operator">!</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> slow<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="寻找无环单链表的中点" tabindex="-1"><a class="header-anchor" href="#寻找无环单链表的中点" aria-hidden="true">#</a> 寻找无环单链表的中点</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">val</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
  <span class="token literal-property property">next</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">,</span> next<span class="token operator">?</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token punctuation">(</span>val <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token punctuation">(</span>next <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isMiddle</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">head</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span></span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token literal-property property">fast</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> <span class="token literal-property property">slow</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  fast <span class="token operator">=</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
  <span class="token comment">// 因为 fast 始终是 slow 的两倍，所以当 fast 走完的时候，slow 刚好是 fast 的一半，即链表中点</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    slow <span class="token operator">=</span> slow<span class="token operator">!</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> slow<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="有效三角形的个数" tabindex="-1"><a class="header-anchor" href="#有效三角形的个数" aria-hidden="true">#</a> 有效三角形的个数</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">triangleNumber</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>nums <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>
    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token comment">// 排序</span>
    nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span> 
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> k <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span> 
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                count <span class="token operator">+=</span> j <span class="token operator">-</span> i
                j<span class="token operator">--</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                i<span class="token operator">++</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>       
    <span class="token keyword">return</span> count
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="浮点数相乘" tabindex="-1"><a class="header-anchor" href="#浮点数相乘" aria-hidden="true">#</a> 浮点数相乘</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mut</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 
  <span class="token keyword">const</span> numStr1 <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> numStr2 <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>numStr1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> numStr2<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> num1 <span class="token operator">*</span> num2<span class="token punctuation">;</span>
 
  <span class="token keyword">const</span> <span class="token punctuation">[</span>a1<span class="token punctuation">,</span> a2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> numStr1<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>b1<span class="token punctuation">,</span> b2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> numStr2<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> res1 <span class="token operator">=</span> a1 <span class="token operator">*</span> b1<span class="token punctuation">;</span>
  <span class="token keyword">let</span> res2 <span class="token operator">=</span> a2 <span class="token operator">*</span> b2<span class="token punctuation">;</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> res1 <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> res2<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="防抖和节流" tabindex="-1"><a class="header-anchor" href="#防抖和节流" aria-hidden="true">#</a> 防抖和节流</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 防抖函数</span>
<span class="token keyword">const</span> <span class="token function-variable function">debounce</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 节流函数</span>
<span class="token keyword">const</span> <span class="token function-variable function">throttle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">500</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
      flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="转化为驼峰命名" tabindex="-1"><a class="header-anchor" href="#转化为驼峰命名" aria-hidden="true">#</a> 转化为驼峰命名</h3><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token string">&quot;get-element-by-id&quot;</span>

<span class="token comment">// 转化为 getElementById</span>
复制代码<span class="token keyword">var</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-\\w</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="模拟new" tabindex="-1"><a class="header-anchor" href="#模拟new" aria-hidden="true">#</a> 模拟new</h3><p>new操作符做了这些事：</p><ol><li>它创建了一个全新的对象</li><li>它会被执行[[Prototype]]（也就是__proto__）链接</li><li>它使this指向新创建的对象</li><li>通过new创建的每个对象将最终被[[Prototype]]链接到这个函数的prototype对象上</li><li>如果函数没有返回对象类型Object(包含Functoin, Array, Date, RegExg, Error)，那么new表达式中的函数调用将返回该对象引用</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// objectFactory(name, &#39;cxk&#39;, &#39;18&#39;)</span>
<span class="token keyword">function</span> <span class="token function">objectFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> Constructor <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>

  obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Constructor</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>

  <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token function">Constructor</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token keyword">typeof</span> ret <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">?</span> ret <span class="token operator">:</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="顺时针打印矩阵" tabindex="-1"><a class="header-anchor" href="#顺时针打印矩阵" aria-hidden="true">#</a> 顺时针打印矩阵</h3><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p><p>可以模拟打印矩阵的路径。初始位置是矩阵的左上角，初始方向是向右，当路径超出界限或者进入之前访问过的位置时，顺时针旋转，进入下一个方向。</p><p>判断路径是否进入之前访问过的位置需要使用一个与输入矩阵大小相同的辅助矩阵 \\textit{visited}visited，其中的每个元素表示该位置是否被访问过。当一个元素被访问时，将 \\textit{visited}visited 中的对应位置的元素设为已访问。</p><p>如何判断路径是否结束？由于矩阵中的每个元素都被访问一次，因此路径的长度即为矩阵中的元素数量，当路径的长度达到矩阵中的元素数量时即为完整路径，将该路径返回。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">spiralOrder</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">matrix</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matrix<span class="token punctuation">.</span>length <span class="token operator">||</span> <span class="token operator">!</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> rows <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">,</span> columns <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">const</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>columns<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> total <span class="token operator">=</span> rows <span class="token operator">*</span> columns<span class="token punctuation">;</span>
    <span class="token keyword">const</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> directionIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> directions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> total<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        order<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span><span class="token punctuation">;</span>
        visited<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> nextRow <span class="token operator">=</span> row <span class="token operator">+</span> directions<span class="token punctuation">[</span>directionIndex<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nextColumn <span class="token operator">=</span> column <span class="token operator">+</span> directions<span class="token punctuation">[</span>directionIndex<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;=</span> nextRow <span class="token operator">&amp;&amp;</span> nextRow <span class="token operator">&lt;</span> rows <span class="token operator">&amp;&amp;</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> nextColumn <span class="token operator">&amp;&amp;</span> nextColumn <span class="token operator">&lt;</span> columns <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>visited<span class="token punctuation">[</span>nextRow<span class="token punctuation">]</span><span class="token punctuation">[</span>nextColumn<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            directionIndex <span class="token operator">=</span> <span class="token punctuation">(</span>directionIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        row <span class="token operator">+=</span> directions<span class="token punctuation">[</span>directionIndex<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        column <span class="token operator">+=</span> directions<span class="token punctuation">[</span>directionIndex<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> order<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,46);function Un(Xn,Hn){const a=e("ExternalLinkIcon");return o(),c("div",null,[i,r,n("p",null,[n("a",k,[s("http&https"),t(a)])]),n("p",null,[n("a",d,[s("Http2和Http1.X的区别"),t(a)])]),n("p",null,[n("a",m,[s("强制缓存和协商缓存"),t(a)])]),n("p",null,[n("a",v,[s("cookie有哪些字段"),t(a)])]),n("p",null,[n("a",b,[s("options请求的理解"),t(a)])]),n("p",null,[n("a",h,[s("HTTP长连接和短连接"),t(a)])]),n("p",null,[n("a",f,[s("TCP三次握手四次挥手"),t(a)])]),n("p",null,[n("a",g,[s("计算机网络协议层次"),t(a)])]),n("p",null,[n("a",w,[s("TCP与UDP的区别"),t(a)])]),n("p",null,[n("a",_,[s("TCP流量控制和拥塞控制"),t(a)])]),n("p",null,[n("a",y,[s("DNS域名解析"),t(a)])]),n("p",null,[n("a",x,[s("CDN"),t(a)])]),j,n("p",null,[n("a",q,[s("前端安全"),t(a)])]),n("p",null,[n("a",S,[s("跨域问题"),t(a)])]),n("p",null,[n("a",z,[s("JSONP"),t(a)])]),n("p",null,[n("a",C,[s("前端监控"),t(a)])]),n("p",null,[n("a",E,[s("XSS和XSRF"),t(a)])]),N,n("p",null,[n("a",B,[s("事件冒泡与捕获"),t(a)])]),n("p",null,[n("a",L,[s("事件冒泡与捕获2"),t(a)])]),n("p",null,[n("a",F,[s("负载均衡的实现方式"),t(a)])]),n("p",null,[n("a",A,[s("事件代理与应用场景"),t(a)])]),n("p",null,[n("a",I,[s("前端性能优化"),t(a)])]),n("p",null,[n("a",R,[s("浏览器渲染原理"),t(a)])]),n("p",null,[n("a",V,[s("Node.js 中的内存泄漏"),t(a)])]),n("p",null,[n("a",O,[s("SSR优缺点"),t(a)])]),n("p",null,[n("a",T,[s("前端常见的9种设计模式"),t(a)])]),n("p",null,[n("a",P,[s("手写迭代器"),t(a)])]),n("p",null,[n("a",J,[s("token 加密原理"),t(a)])]),n("p",null,[n("a",D,[s("Webpack 相关"),t(a)])]),n("p",null,[n("a",M,[s("JS Bridge"),t(a)])]),n("p",null,[n("a",U,[s("标签语义化的理解"),t(a)])]),n("p",null,[n("a",X,[s("协程的理解"),t(a)])]),n("p",null,[n("a",H,[s("JavaScript中的协程"),t(a)])]),n("p",null,[n("a",K,[s("浏览器的帧、requestIdleCallback和requestAnimationFrame详解"),t(a)])]),n("p",null,[n("a",W,[s("Bom和Dom的区别总结"),t(a)])]),n("p",null,[n("a",Y,[s("给js对象添加迭代器"),t(a)])]),n("p",null,[n("a",Z,[s("js闭包的理解"),t(a)])]),G,n("p",null,[n("a",Q,[s("React、Vue2、Vue3 的 diff 算法"),t(a)])]),n("p",null,[n("a",$,[s("Vue 响应式原理"),t(a)])]),n("p",null,[n("a",nn,[s("React 与 Vue 框架的设计思路"),t(a)])]),n("p",null,[n("a",sn,[s("vue-router的两种模式的区别"),t(a)])]),n("p",null,[n("a",an,[s("为什么Vue3不使用时间切片"),t(a)])]),n("p",null,[n("a",tn,[s("React异步渲染（时间切片&渲染挂起)"),t(a)])]),n("p",null,[n("a",pn,[s("Vue3新特性"),t(a)])]),en,n("p",null,[n("a",on,[s("微信小程序登录鉴权流程图"),t(a)])]),n("p",null,[n("a",cn,[s("从URL输入到页面展现过程"),t(a)])]),n("p",null,[n("a",ln,[s("浏览器的两个页面之间通信的问题"),t(a)])]),n("p",null,[n("a",un,[s("网页白屏问题分析"),t(a)])]),n("p",null,[n("a",rn,[s("排查网页打开慢的方法"),t(a)])]),n("p",null,[n("a",kn,[s("前端下载文件的5种方法"),t(a)])]),n("p",null,[n("a",dn,[s("实现一个大文件上传和断点续传"),t(a)])]),n("p",null,[n("a",mn,[s("微信小程序登录鉴权流程图"),t(a)])]),vn,n("p",null,[n("a",bn,[s("计算机启动过程"),t(a)])]),n("p",null,[n("a",hn,[s("进程间8种通信方式"),t(a)])]),n("p",null,[n("a",fn,[s("进程间通信和线程间通信的几种方式"),t(a)])]),n("p",null,[n("a",gn,[s("数据库三大范式理解"),t(a)])]),wn,_n,n("p",null,[n("a",yn,[s("css将div画成三角形"),t(a)])]),n("p",null,[n("a",xn,[s("css画扇形"),t(a)])]),n("p",null,[n("a",jn,[s("CSS两栏布局、三栏布局"),t(a)])]),n("p",null,[n("a",qn,[s("css实现水平垂直居中"),t(a)])]),n("p",null,[n("a",Sn,[s("CSS动画和JS动画的区别"),t(a)])]),n("p",null,[n("a",zn,[s("高度塌陷&BFC"),t(a)])]),n("p",null,[n("a",Cn,[s("盒子定位"),t(a)])]),n("p",null,[n("a",En,[s("flex布局"),t(a)])]),Nn,n("p",null,[n("a",Bn,[s("JS常见手写笔试"),t(a)])]),n("p",null,[n("a",Ln,[s("vue-简易版message组件"),t(a)])]),n("p",null,[n("a",Fn,[s("解析 URL 提取 params 参数"),t(a)])]),n("p",null,[n("a",An,[s("斐波那契数列的js实现"),t(a)])]),n("p",null,[n("a",In,[s("求解topK--快排、大小堆顶"),t(a)])]),n("p",null,[n("a",Rn,[s("手写Promise.all和Promise.race"),t(a)])]),Vn,n("p",null,[n("a",On,[s("排序、查找JS实现"),t(a)])]),n("p",null,[n("a",Tn,[s("常见的排序和查找算法"),t(a)])]),n("p",null,[n("a",Pn,[s("平衡二叉树"),t(a)])]),n("p",null,[n("a",Jn,[s("大顶堆构造过程"),t(a)])]),n("p",null,[n("a",Dn,[s("hash冲突解决"),t(a)])]),Mn])}const Yn=p(u,[["render",Un],["__file","interview.html.vue"]]);export{Yn as default};
