import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-2e38cc08.js";const e={},o=t(`<h2 id="事件的冒泡-bubble" tabindex="-1"><a class="header-anchor" href="#事件的冒泡-bubble" aria-hidden="true">#</a> 事件的冒泡(Bubble)</h2><p>所谓的冒泡指的就是事件的向上传导，当后代元素上的事件被触发时，其祖先元素的相同事件也会被触发，在开发中大部分情况冒泡都是有用的，如果不希望发生事件冒泡，可以通过事件对象来取消冒泡，可以通过设置<code>event.cancelBubble=true</code>来取消冒泡，这个需要<strong>设置在子元素的事件中</strong>，并且大多数都是设置的可以冒泡，除了某些函数默认不冒泡</p><p><strong>如果在父元素里面设置了一个事件,而在子元素中也有相同的事件,不想要父元素的事件在子元素的范围内出现时，可以通过多种方式设置取消冒泡</strong></p><p><strong>1.event.cancelBubble=true(低版本IE都通过该方法)</strong></p><p><strong>2.因为这是默认行为，所以也可以直接在事件函数返回flase即可(return flase)</strong></p><p>**注意:**这种方法阻止默认行为只能够阻止通过onclick等绑定的事件,不能阻止通过addEventListener()等绑定的事件</p><p><strong>3.通过event.stopPropagation()来阻止事件冒泡，但是不会阻止默认行为(低版本IE不兼容),低版本IE用event.returnValue=false</strong></p><p><strong>4.通过event.preventDefault()阻止默认行为来阻止冒泡</strong></p><p><strong>兼容写法</strong></p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>stopPropagation<span class="token punctuation">)</span><span class="token punctuation">{</span>
    event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    event<span class="token punctuation">.</span>cancelBubble<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//或event.returnValue=false;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,10),p=[o];function c(r,l){return s(),a("div",null,p)}const d=n(e,[["render",c],["__file","db6.html.vue"]]);export{d as default};
