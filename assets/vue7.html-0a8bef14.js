import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,e as t}from"./app-06216ea5.js";const l={},o=t(`<h2 id="按键修饰符" tabindex="-1"><a class="header-anchor" href="#按键修饰符" aria-hidden="true">#</a> 按键修饰符</h2><p><strong>在绑定了键盘或鼠标的点击事件后,可以通过按下的按键触发要进行的事件,这时需要在后方添加表示按键的修辞符</strong></p><h3 id="_7-1-按键码" tabindex="-1"><a class="header-anchor" href="#_7-1-按键码" aria-hidden="true">#</a> 7.1 按键码</h3><ul><li><p>可以通过 keyCode 的值来绑定需要触发的按键</p><div class="language-html" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.13</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div></li><li><p><strong>部分特殊的按键码可以使用别名</strong></p></li><li><ul><li><strong>.enter</strong></li></ul></li><li><ul><li><strong>.tab</strong></li></ul></li><li><ul><li><strong>.delete</strong>(捕获“删除”和“退格”键)</li></ul></li><li><ul><li><strong>.esc</strong></li></ul></li><li><ul><li><strong>.space</strong></li></ul></li><li><ul><li><strong>.up</strong></li></ul></li><li><ul><li><strong>.down</strong></li></ul></li><li><ul><li><strong>.left</strong></li></ul></li><li><ul><li><strong>.right</strong></li></ul></li><li><p>也可以自定义按键修饰符的别名</p><div class="language-vue" data-ext="vue"><pre class="language-vue"><code>Vue.config.keyCodes.f1 =
112;//使用Vue对象上的全局属性config.keyCodes来定义别名 //
在绑定时就可以使用v-on:keyup.f1直接对f1按键进行操作了
</code></pre></div></li></ul><h3 id="_7-2-系统修饰符" tabindex="-1"><a class="header-anchor" href="#_7-2-系统修饰符" aria-hidden="true">#</a> 7.2 系统修饰符</h3><p><strong>系统修辞符监听仅在同时按下了绑定键盘或鼠标按钮时才会触发事件</strong></p><ul><li><p><strong>键盘</strong></p></li><li><ul><li><strong>.ctrl</strong></li></ul></li><li><ul><li><strong>.alt</strong></li></ul></li><li><ul><li><strong>.shift</strong></li></ul></li><li><ul><li><strong>.meta</strong></li></ul></li></ul><p>**注意:**在 Mac 系统键盘上，meta 对应 command 键 (⌘)。在 Windows 系统键盘 meta 对应 Windows 徽标键 (⊞)。在 Sun 操作系统键盘上，meta 对应实心宝石键 (◆)。在其他特定键盘上，尤其在 MIT 和 Lisp 机器的键盘、以及其后继产品，比如 Knight 键盘、space-cadet 键盘，meta 被标记为“META”。在 Symbolics 键盘上，meta 被标记为“META”或者“Meta”。</p><div class="language-html" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- Alt + C --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">@keyup.alt.67</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>clear<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">&lt;!-- Ctrl + Click --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click.ctrl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>doSomething<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Do something<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><ul><li><p><strong>鼠标</strong></p></li><li><ul><li><strong>.left</strong></li></ul></li><li><ul><li><strong>.right</strong></li></ul></li><li><ul><li><strong>.middle</strong></li></ul></li></ul><p><strong>注:<strong>修饰键与常规按键不同，在和 <code>keyup</code> 事件一起用时，事件触发时修饰键必须处于按下状态。换句话说，只有在按住 <code>ctrl</code> 的情况下释放其它按键，才能触发 <code>keyup.ctrl</code>。而单单释放 <code>ctrl</code> 也不会触发事件。如果只想要单独触发,则需要使用 keycode 编码或</strong>.exact</strong>修饰符</p><ul><li><p>.exact</p><p>.exact 修饰符允许用户控制由精确的系统修饰符组合触发的事件</p><div class="language-html" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 即使 Alt 或 Shift 被一同按下时也会触发 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.ctrl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 有且只有 Ctrl 被按下的时候才触发 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.ctrl.exact</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onCtrlClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 没有任何系统修饰符被按下的时候才触发 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.exact</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre></div></li></ul>`,12),p=[o];function e(c,u){return a(),s("div",null,p)}const g=n(l,[["render",e],["__file","vue7.html.vue"]]);export{g as default};
