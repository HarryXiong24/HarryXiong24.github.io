import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,e}from"./app-b6796c90.js";const s={},d=e(`<h2 id="事件对象" tabindex="-1"><a class="header-anchor" href="#事件对象" aria-hidden="true">#</a> 事件对象</h2><p>当事件的响应函数被触发时，浏览器每次都会将一个事件对象作为默认实参(如果没有传入参数位置为arguments[0])传递进响应函数，在事件对象中封装了当前事件相关的一些信息，比如:鼠标的坐标，键盘哪个按键被按下 ，鼠标滚轮滚动的方向</p><p><strong>注:</strong></p><ul><li><p>一般都会把形参写在事件对象的形参里,虽然不写也不会报错,但是获取方式会相对麻烦</p></li><li><p>在IE中,event事件对象通过window.event来获取，在其他浏览器中是作为参数传入使用</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//写实参调用event</span>
<span class="token keyword">function</span> <span class="token function">eventTest</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   event<span class="token operator">=</span>event<span class="token operator">||</span>window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//不写实参调用event</span>
<span class="token keyword">function</span> <span class="token function">eventTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> event <span class="token operator">=</span> window<span class="token punctuation">.</span>event<span class="token operator">||</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//传入额外实参</span>
<span class="token keyword">function</span> <span class="token function">eventTest</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> event <span class="token operator">=</span> window<span class="token punctuation">.</span>event <span class="token operator">||</span> arguments<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>caller<span class="token punctuation">.</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//如果传入了参数却如第二种写法的话，则arguments中将会传入已经传入的参数，这时获取的arguments[0]就会是第一个传入的参数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//target为该调用对象</span>
target <span class="token operator">=</span> event<span class="token punctuation">.</span>srcElement<span class="token operator">||</span>event<span class="token punctuation">.</span>target<span class="token comment">//低版本IE用srcElement</span>
</code></pre></div><h3 id="_5-1-基本事件对象" tabindex="-1"><a class="header-anchor" href="#_5-1-基本事件对象" aria-hidden="true">#</a> 5.1 基本事件对象</h3><ul><li><strong>常量</strong></li></ul><table><thead><tr><th>静态变量</th><th>描述</th></tr></thead><tbody><tr><td>CAPTURING-PHASE</td><td>当前事件阶段为捕获阶段(1)</td></tr><tr><td>AT-TARGET</td><td>当前事件是目标阶段,在评估目标事件(1)</td></tr><tr><td>BUBBLING-PHASE</td><td>当前的事件为冒泡阶段 (3)</td></tr></tbody></table><ul><li><strong>属性</strong></li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>bubbles</td><td>返回布尔值，指示事件是否是起泡事件类型。</td></tr><tr><td>cancelable</td><td>返回布尔值，指示事件是否可拥可取消的默认动作。</td></tr><tr><td>currentTarget</td><td>返回其事件监听器触发该事件的元素。</td></tr><tr><td>eventPhase</td><td>返回事件传播的当前阶段。</td></tr><tr><td>target</td><td>返回触发此事件的元素（事件的目标节点）。不兼容低版本IE,低版本IE用srcElement</td></tr><tr><td>timeStamp</td><td>返回事件生成的日期和时间。</td></tr><tr><td>type</td><td>返回当前 Event 对象表示的事件的名称。</td></tr></tbody></table><ul><li><strong>方法</strong></li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>initEvent()</td><td>初始化新创建的 Event 对象的属性。</td></tr><tr><td>preventDefault()</td><td>通知浏览器不要执行与事件关联的默认动作。</td></tr><tr><td>stopPropagation()</td><td>不再派发事件。</td></tr></tbody></table><h3 id="_5-2-目标事件对象" tabindex="-1"><a class="header-anchor" href="#_5-2-目标事件对象" aria-hidden="true">#</a> 5.2 目标事件对象</h3><p><strong>方法</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>addEventListener()</td><td>允许在目标事件中注册监听事件(IE8 = attachEvent())</td></tr><tr><td>dispatchEvent()</td><td>允许发送事件到监听器上 (IE8 = fireEvent())</td></tr><tr><td>removeEventListener()</td><td>运行一次注册在事件目标上的监听事件(IE8 = detachEvent())</td></tr></tbody></table><h3 id="_5-3-事件监听对象" tabindex="-1"><a class="header-anchor" href="#_5-3-事件监听对象" aria-hidden="true">#</a> 5.3 事件监听对象</h3><p><strong>方法</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>handleEvent()</td><td>把任意对象注册为事件处理程序</td></tr></tbody></table><h3 id="_5-4-文档事件对象" tabindex="-1"><a class="header-anchor" href="#_5-4-文档事件对象" aria-hidden="true">#</a> 5.4 文档事件对象</h3><p><strong>方法</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>createEvent()</td><td>返回新创建的event对象</td></tr></tbody></table><h3 id="_5-4-鼠标-键盘事件对象" tabindex="-1"><a class="header-anchor" href="#_5-4-鼠标-键盘事件对象" aria-hidden="true">#</a> 5.4 鼠标/键盘事件对象</h3><ul><li><strong>属性</strong></li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>altKey</td><td>返回当事件被触发时，&quot;ALT&quot; 是否被按下。</td></tr><tr><td>button</td><td>返回当事件被触发时，哪个鼠标按钮被点击。</td></tr><tr><td>clientX</td><td>返回当事件被触发时，鼠标指针的水平坐标。</td></tr><tr><td>clientY</td><td>返回当事件被触发时，鼠标指针的垂直坐标。</td></tr><tr><td>ctrlKey</td><td>返回当事件被触发时，&quot;CTRL&quot; 键是否被按下。</td></tr><tr><td>Location</td><td>返回按键在设备上的位置</td></tr><tr><td>charCode</td><td>返回onkeypress事件触发键值的字母代码。</td></tr><tr><td>key</td><td>在按下按键时返回按键的标识符。</td></tr><tr><td>keyCode</td><td>返回onkeypress事件触发的键的值的字符代码，或者 onkeydown 或 onkeyup 事件的键的代码。</td></tr><tr><td>which</td><td>返回onkeypress事件触发的键的值的字符代码，或者 onkeydown 或 onkeyup 事件的键的代码。</td></tr><tr><td>metaKey</td><td>返回当事件被触发时，&quot;meta&quot; 键是否被按下。</td></tr><tr><td>relatedTarget</td><td>返回与事件的目标节点相关的节点。</td></tr><tr><td>screenX</td><td>返回当某个事件被触发时，鼠标指针的水平坐标。</td></tr><tr><td>screenY</td><td>返回当某个事件被触发时，鼠标指针的垂直坐标。</td></tr><tr><td>shiftKey</td><td>返回当事件被触发时，&quot;SHIFT&quot; 键是否被按下。</td></tr></tbody></table><ul><li><strong>方法</strong></li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>initMouseEvent()</td><td>初始化鼠标事件对象的值</td></tr><tr><td>initKeyboardEvent()</td><td>初始化键盘事件对象的值</td></tr></tbody></table>`,27),r=[d];function o(p,c){return n(),a("div",null,r)}const u=t(s,[["render",o],["__file","db5.html.vue"]]);export{u as default};
