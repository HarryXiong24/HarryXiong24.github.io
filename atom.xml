<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://harryxiong24.github.io/atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US">
  <id>https://harryxiong24.github.io/</id>
  <title>Harry Xiong</title>
  <subtitle>A piano player playing on the keyboard</subtitle>
  <icon>https://harryxiong24.github.io/favicon.ico</icon>
  <updated>2023-07-05T10:00:27.441Z</updated>
  <generator>vuepress-plugin-feed2</generator>
  <link rel="self" href="https://harryxiong24.github.io/atom.xml"/>
  <link rel="alternate" href="https://harryxiong24.github.io/"/>
  <category term="article"/>
  <entry>
    <title type="text">Stack and Queue &amp; DFS and BFS</title>
    <id>https://harryxiong24.github.io/en/article/dfs-and-bfs.html</id>
    <link href="https://harryxiong24.github.io/en/article/dfs-and-bfs.html"/>
    <updated>2023-07-05T09:55:29.000Z</updated>
    <summary type="html"><![CDATA[<h1> Stack and Queue &amp; DFS and BFS</h1>
<h2> Preface</h2>
<p>In this chapter, we will discuss about DFS(Depth-first Search) and BFS(Breadth-first Search).</p>
<p>They are two important concepts in the algorithm and they are widely used.</p>
<p>When it comes to DFS(Depth-first Search) and BFS(Breadth-first Search), Stack and Queue will inevitably be mentioned.</p>]]></summary>
    <content type="html"><![CDATA[<h1> Stack and Queue &amp; DFS and BFS</h1>
<h2> Preface</h2>
<p>In this chapter, we will discuss about DFS(Depth-first Search) and BFS(Breadth-first Search).</p>
<p>They are two important concepts in the algorithm and they are widely used.</p>
<p>When it comes to DFS(Depth-first Search) and BFS(Breadth-first Search), Stack and Queue will inevitably be mentioned.</p>
<p>Because these two data structures can be applied to realize DFS and BFS.</p>
<p>Maybe you have already really familiar with them, but I still want to introduce them simply.</p>
<p>Let's begin!</p>
<h2> Stack and Queue</h2>
<h3> Stack</h3>
<p>The Stack is a data structure that follows the last-in-first-out principle.</p>
<p>Like this dynamic picture:</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/gif/92791/1600683976688-66c3b99f-8a77-4313-866a-8adfa48c0a77.gif#align=left&amp;display=inline&amp;height=576&amp;margin=[object Object]&amp;name=stack-4.gif&amp;originHeight=576&amp;originWidth=1090&amp;size=96969&amp;status=done&amp;style=none&amp;width=1090" alt="Stack" loading="lazy"></p>
<p>It's easy to understand.</p>
<p>And we can use more than one method to build a stack such as an array and a linked list. Here we use an array to give an example:</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Queue</h3>
<p>The Queue is a data structure that follows the first-in-first-out principle.</p>
<p>Like this dynamic picture:</p>
<p><img src="https://img-blog.csdnimg.cn/5f74dee9f61e437799d0add897e39ea3.gif" alt="Queue" loading="lazy"></p>
<p>It's easy to understand.</p>
<p>And we can use more than one method to build a stack such as an array and a linked list. Here we use an array to give an example:</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Circular Queue</h3>
<p>In the previous section, we have provided a straightforward but inefficient implementation of Queue.</p>
<p>A more efficient way is to use a circular queue. Specifically, we may use a fixed-size array and two pointers to indicate the starting position and the ending position. And the goal is to reuse the wasted storage we mentioned previously.</p>
<p><img src="https://img-blog.csdnimg.cn/20191216214045423.gif" alt="Circular Queue" loading="lazy"></p>
<p>Here is the implementation:</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Interchangeability of Stack and Queue</h3>
<p>We can use two stacks to realize the Queue:</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Also, we can use two queues to realize the Stack:</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> DFS and BFS</h2>
<h3> BFS</h3>
<p>Breadth-first search (BFS) is an algorithm to traverse or search in data structures like a tree or a graph.</p>
<p>As we mentioned, we can use BFS to do level-order traversal in a tree.</p>
<p>We can also use BFS to traverse a graph. For example, we can use BFS to find a path, especially the shortest path, from a start node to a target node.</p>
<p>We can use BFS, in even more abstract scenarios, to traverse all the possible statuses.</p>
<p>Here is the proceeding of BFS:</p>
<p><img src="https://zinglix.xyz/img/in-post/DFS&amp;BFS/BFS-Ex.gif" alt="BFS" loading="lazy"></p>
<p>In the first round, we process the root node. In the second round, we process the nodes next to the root node; in the third round, we process the nodes which are two steps from the root node; so on and so forth. Similar to the tree's level-order traversal, the nodes closer to the root node will be traversed earlier.</p>
<p>And we usually apply Queue to realize BFS:</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> DFS</h3>
<p>Similar to BFS, depth-first search (DFS) is another important algorithm to traverse/search in a tree/graph. And also it can be used in more abstract scenarios.</p>
<p>As mentioned in tree traversal, we can use DFS to do pre-order, in-order and post-order traversal.</p>
<p>There is a common feature among these three traversal orders: we never trace back unless we reach the deepest node.</p>
<p>That is also the largest difference between DFS and BFS: BFS never goes deeper unless it has already visited all nodes at the current level.</p>
<p>Typically, we implement DFS using recursion. Stack plays an important role in recursion. We will explain the role of the stack when doing recursion in this chapter. We will also show you what's the drawback of recursion and provide another implementation of DFS without recursion.</p>
<p>Here is the proceeding of DFS:</p>
<p><img src="https://zinglix.xyz/img/in-post/DFS&amp;BFS/DFS-Ex.gif" alt="DFS" loading="lazy"></p>
<p>And for BFS, we usually have two methods to realize it.</p>
<p>One is Recursion:</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The other is applying Stack:</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Summary</h3>
<p>BFS is often used to find a single shortest route. Its characteristic is that it must be the optimal solution when it is found.</p>
<p>While DFS is used to find all solutions. It has high space efficiency, but what it finds is not necessarily the optimal solution, it must be recorded and completed the entire search.</p>
<h2> An Example of DFS and BFS</h2>
<h3> Question</h3>
<p>The example's original link is <a href="https://leetcode.com/problems/flood-fill" target="_blank" rel="noopener noreferrer">Flood Fill</a></p>
<p>An image is represented by an m x n integer grid image where image[i][j] represents the pixel value of the image.</p>
<p>You are also given three integers sr, sc, and color. You should perform a flood fill on the image starting from the pixel image[sr][sc].</p>
<p>To perform a flood fill, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color), and so on. Replace the color of all of the aforementioned pixels with color.</p>
<p>Return the modified image after performing the flood fill.</p>
<p>Example 1:</p>
<p><img src="https://assets.leetcode.com/uploads/2021/06/01/flood1-grid.jpg" alt="Example1" loading="lazy"></p>
<div class="language-text" data-ext="text"></div><p>Example 2:</p>
<div class="language-text" data-ext="text"></div><h3> Solution by BFS</h3>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Solution by DFS Recursion</h3>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Solution by DFS Stack</h3>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <category term="article"/>
    <published>2023-07-06T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Sort Algorithm</title>
    <id>https://harryxiong24.github.io/en/article/sort-algorithm.html</id>
    <link href="https://harryxiong24.github.io/en/article/sort-algorithm.html"/>
    <updated>2023-07-03T03:23:29.000Z</updated>
    <summary type="html"><![CDATA[<h1> Sort Algorithm</h1>
<h2> Preface</h2>
<p>In this chapter, I want to summarize the sort algorithm. As we all know, there are 10 common sort algorithms. And I don't want to do too much foreshadowing. Let's see a picture straight.</p>
<table>
<thead>
<tr>
<th><strong>Sort Algorithm</strong></th>
<th><strong>Time Complexity</strong></th>
<th><strong>Space Complexity</strong></th>
<th><strong>Stability</strong></th>
<th><strong>Sorting Method</strong></th>
<th><strong>Best Case</strong></th>
<th><strong>Worst Case</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Insertion Sort</strong></td>
<td>O(n^2)</td>
<td>O(1)</td>
<td>Stable</td>
<td>In-place</td>
<td>O(n)</td>
<td>O(n^2)</td>
</tr>
<tr>
<td><strong>Bubble Sort</strong></td>
<td>O(n^2)</td>
<td>O(1)</td>
<td>Stable</td>
<td>In-place</td>
<td>O(n)</td>
<td>O(n^2)</td>
</tr>
<tr>
<td><strong>Selection Sort</strong></td>
<td>O(n^2)</td>
<td>O(1)</td>
<td>Unstable</td>
<td>In-place</td>
<td>O(n^2)</td>
<td>O(n^2)</td>
</tr>
<tr>
<td>****</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>Counting Sort</strong></td>
<td>O(n+k)</td>
<td>O(k)</td>
<td>Stable</td>
<td>Out-place</td>
<td>O(n+k)</td>
<td>O(n+k)</td>
</tr>
<tr>
<td><strong>Radix Sort</strong></td>
<td>O(w*(n+k))</td>
<td>O(n+k)</td>
<td>Stable</td>
<td>Out-place</td>
<td>O(w*(n+k))</td>
<td>O(w*(n+k))</td>
</tr>
<tr>
<td><strong>Bucket Sort</strong></td>
<td>O(n+k)</td>
<td>O(n+k)</td>
<td>Stable</td>
<td>Out-place</td>
<td>O(n+k)</td>
<td>O(n^2)</td>
</tr>
<tr>
<td>****</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>Quick Sort</strong></td>
<td>O(n*logn)</td>
<td>O(n*logn)</td>
<td>Unstable</td>
<td>In-place</td>
<td>O(n*logn)</td>
<td>O(n^2)</td>
</tr>
<tr>
<td><strong>Merge Sort</strong></td>
<td>O(n*logn)</td>
<td>O(n)</td>
<td>Unstable</td>
<td>Out-place</td>
<td>O(n*logn)</td>
<td>O(n*logn)</td>
</tr>
<tr>
<td><strong>Shell Sort</strong></td>
<td>O(n*logn)</td>
<td>O(1)</td>
<td>Unstable</td>
<td>In-place</td>
<td>O(n*logn)</td>
<td>O(n*logn)</td>
</tr>
<tr>
<td>****</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>Heap Sort</strong></td>
<td>O(n*logn)</td>
<td>O(1)</td>
<td>Unstable</td>
<td>In-place</td>
<td>O(n*logn)</td>
<td>O(n*logn)</td>
</tr>
</tbody>
</table>]]></summary>
    <content type="html"><![CDATA[<h1> Sort Algorithm</h1>
<h2> Preface</h2>
<p>In this chapter, I want to summarize the sort algorithm. As we all know, there are 10 common sort algorithms. And I don't want to do too much foreshadowing. Let's see a picture straight.</p>
<table>
<thead>
<tr>
<th><strong>Sort Algorithm</strong></th>
<th><strong>Time Complexity</strong></th>
<th><strong>Space Complexity</strong></th>
<th><strong>Stability</strong></th>
<th><strong>Sorting Method</strong></th>
<th><strong>Best Case</strong></th>
<th><strong>Worst Case</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Insertion Sort</strong></td>
<td>O(n^2)</td>
<td>O(1)</td>
<td>Stable</td>
<td>In-place</td>
<td>O(n)</td>
<td>O(n^2)</td>
</tr>
<tr>
<td><strong>Bubble Sort</strong></td>
<td>O(n^2)</td>
<td>O(1)</td>
<td>Stable</td>
<td>In-place</td>
<td>O(n)</td>
<td>O(n^2)</td>
</tr>
<tr>
<td><strong>Selection Sort</strong></td>
<td>O(n^2)</td>
<td>O(1)</td>
<td>Unstable</td>
<td>In-place</td>
<td>O(n^2)</td>
<td>O(n^2)</td>
</tr>
<tr>
<td>****</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>Counting Sort</strong></td>
<td>O(n+k)</td>
<td>O(k)</td>
<td>Stable</td>
<td>Out-place</td>
<td>O(n+k)</td>
<td>O(n+k)</td>
</tr>
<tr>
<td><strong>Radix Sort</strong></td>
<td>O(w*(n+k))</td>
<td>O(n+k)</td>
<td>Stable</td>
<td>Out-place</td>
<td>O(w*(n+k))</td>
<td>O(w*(n+k))</td>
</tr>
<tr>
<td><strong>Bucket Sort</strong></td>
<td>O(n+k)</td>
<td>O(n+k)</td>
<td>Stable</td>
<td>Out-place</td>
<td>O(n+k)</td>
<td>O(n^2)</td>
</tr>
<tr>
<td>****</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>Quick Sort</strong></td>
<td>O(n*logn)</td>
<td>O(n*logn)</td>
<td>Unstable</td>
<td>In-place</td>
<td>O(n*logn)</td>
<td>O(n^2)</td>
</tr>
<tr>
<td><strong>Merge Sort</strong></td>
<td>O(n*logn)</td>
<td>O(n)</td>
<td>Unstable</td>
<td>Out-place</td>
<td>O(n*logn)</td>
<td>O(n*logn)</td>
</tr>
<tr>
<td><strong>Shell Sort</strong></td>
<td>O(n*logn)</td>
<td>O(1)</td>
<td>Unstable</td>
<td>In-place</td>
<td>O(n*logn)</td>
<td>O(n*logn)</td>
</tr>
<tr>
<td>****</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>Heap Sort</strong></td>
<td>O(n*logn)</td>
<td>O(1)</td>
<td>Unstable</td>
<td>In-place</td>
<td>O(n*logn)</td>
<td>O(n*logn)</td>
</tr>
</tbody>
</table>
<p>In the next sections, I will talk about them respectively.</p>
<h2> 10 Common Sort Algorithms</h2>
<h3> Insertion Sort</h3>
<p>This is an intuitive algorithm.</p>
<p>Given a collection of integers, you can sort the list by proceeding from the start of the list.</p>
<p>In every round, you will encounter an element that is out of order, and you can continuously swap places with previous elements until it is inserted in its correct relative location based on what you’ve processed thus far.</p>
<p>Here is the dynamic proceeding:</p>
<p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20221119/insertionSort.lre9a3i98xs.gif" alt="Insertion Sort" loading="lazy"></p>
<p>Here is the code:</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It is a stable algorithm because the sequence of other elements doesn't change during the period of each sorting round.</p>
<p>Obviously, the time complexity is O(n^2). And it's an in-place algorithm, so the space complexity is O(1).</p>
<h3> Bubble Sort</h3>
<p>Bubble Sort, a really interesting name, is another common sort algorithm. And it is easy to remember because of its name.</p>
<p>Given a collection of integers.</p>
<p>In every round, each adjacent element, from beginning to end sequentially, will compare their value and swap if they are out of order.</p>
<p>The core idea of bubble sort is it will repeat this process until no more swaps are made in a single pass, which means the list is sorted.</p>
<p>Here is the dynamic proceeding:</p>
<p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20221129/bubbleSort.60l6mgy53080.gif" alt="Bubble Sort" loading="lazy"></p>
<p>Here is the code:</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It is a stable algorithm because the sequence of other elements doesn't change during the period of each sorting round.</p>
<p>Obviously, the time complexity is O(n^2). And it's an in-place algorithm, so the space complexity is O(1).</p>
<h3> Selection Sort</h3>
<p>It is another intuitive algorithm and it is easy to realize.</p>
<p>Given a collection of integers.</p>
<p>In every round, find the minimum element in that list and move it to the front of the list through a swap. That's it!</p>
<p>Here is the dynamic proceeding:</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f3b2294b88a4cf8954edf0b567c7fc6~tplv-k3u1fbpfcp-zoom-1.image" alt="Selection Sort" loading="lazy"></p>
<p>Here is the code:</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It is not a stable algorithm because the sequence of other elements is broken during the period of each sorting round.</p>
<p>Obviously, the time complexity is O(n^2). And it's an in-place algorithm, so the space complexity is O(1).</p>
<h3> Counting Sort</h3>
<p>These 3 sorting methods above are simple and intuitive. And now we start to learn some advanced sort algorithms.</p>
<p>Counting Sort is clever.</p>
<p>Consider we have a collection of integers. We can record the number of each integer. And then, we get a count array so that we can calculate the sorted index of this collection of integers. It's awesome!</p>
<p>Here is the dynamic proceeding:</p>
<p><img src="https://pic4.zhimg.com/v2-3c7ddb59df2d21b287e42a7b908409cb_b.webp" alt="Counting Sort" loading="lazy"></p>
<div class="hint-container tip">
<p class="hint-container-title">Hint</p>
<p>However, a key assumption of counting sort is that the minimum possible value in the array is 0 (no negative numbers) and the maximum value is some positive integer K.</p>
<p>So if your array includes some negative numbers, please remember to do a map to keep all numbers positive.</p>
<p>For example, an array with values between -5 and 10 can be mapped to values between 0 and 15, perform counting sort, and then remap to the original -5 to 10 range.</p>
<p>This is important!</p>
</div>
<p>Here is the code:</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It is a stable sorting algorithm. Because we make a new space and do not break the original array.</p>
<p>Time Complexity: O(N + K), where N is the size of the input array and K is the maximum value in the array.</p>
<p>Space Complexity: O(N + K), since we have to initialize a new array of size N and a counts array of size K+1.</p>
<p>O(N+K) is a linear time complexity, we may think it is perfect. But notice one thing: if the maximum number in the array is too big, we need to create a space as big as this number. And it is a waste of space. Like array [0, 1, 100001, 2].</p>
<p>So the Counting Sort is not as perfect as we thought.</p>
<p>Plus, Counting Sort also can’t easily handle strings where the alphabet size could be unconstrained.</p>
<h3> Radix Sort</h3>
<p>We just discuss the limitation of Counting Sort above. Now We introduce an optimizing sort algorithm based on Counting Sort.</p>
<p>Radix Sort Algorithm has these basic steps:</p>
<ol>
<li>Give a collection of integers, and find out the maximum number in the collection. Let it be W.</li>
<li>For each integer, loop through digits from 1 to W in right-to-left order(the least significant to the most significant digit). And in each group of digits, we use Count Sort to sort integers.</li>
</ol>
<p>Also, remember that if your array includes some negative numbers, do a map to keep all numbers positive.</p>
<p>For example, an array with values between -5 and 10 can be mapped to values between 0 and 15, perform counting sort, and then remap to the original -5 to 10 range.</p>
<p>Here is the dynamic proceeding:</p>
<p><img src="https://pic3.zhimg.com/v2-3a6f1e5059386523ed941f0d6c3a136e_b.webp" alt="Radix Sort" loading="lazy"></p>
<p>Here is the code:</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let's analyze the complexity of Radix Sort.</p>
<p>Let W be the maximum digit length within the list of integers.
Let N be the size of the original array.
And because we use Counting Sort every round, let K be the size of the counting array(it is usually 10).</p>
<p>So the Time Complexity is O(W * (N + K));</p>
<p>Space Complexity is O(N + K)</p>
<p>It is a stable sorting algorithm because we create new extra space to sort instead of in-place sorting.</p>
<h3> Bucket Sort</h3>
<p>Bucket Sort is another non-comparison-based sorting algorithm.</p>
<p>The steps of bucket sort can be broken down into four distinct parts.</p>
<p>Given an array A:</p>
<ol>
<li>Create an initial array of K empty buckets</li>
<li>Distribute each element of the array into its respective bucket. A common way to map values to buckets is via the following function: floor(K * A[i] / max(A)).</li>
<li>Sort each bucket by using insertion sort or some other sorting algorithm.</li>
<li>Concatenate the sorted buckets in order to create the sorted list.</li>
</ol>
<p>Also, remember that if your array includes some negative numbers, do a map to keep all numbers positive.</p>
<p>For example, an array with values between -5 and 10 can be mapped to values between 0 and 15, perform counting sort, and then remap to the original -5 to 10 range.</p>
<p>Here is the dynamic proceeding:</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f41ad1d7225c4900aa71fea2a0bd8d18~tplv-k3u1fbpfcp-zoom-1.image" alt="Bucket Sort" loading="lazy"></p>
<p>Here is the code:</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let's discuss the complexity of Bucket Sort.</p>
<p>Obviously, the complexity is based on the sort algorithm used in each bucket.</p>
<p>Let W be the number of buckets.</p>
<p>If we choose Insertion Sort, Time Complexity will be O(W * (n^2)), Space Complexity will be O(W);</p>
<p>If we choose Counting Sort, Time Complexity will be O(W * (N + K)), Space Complexity will be O(W * O (N + K));</p>
<p>It is a stable sorting algorithm because we create new extra space to sort instead of in-place sorting.</p>
<h3> Quick Sort</h3>
<p>Quick Sort is a category of swap sort.</p>
<p>Quick sort uses the recursive method.</p>
<p>It selects an element in the array as the "pivot" element. And put the elements smaller than the pivot into one array and the elements larger than the pivot into the other array. Then, recursively sort the two arrays and combine them with the pivot to get the final sorted array.</p>
<p>Here is the dynamic proceeding:</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30b2e02a13064f24a645aae7345a21d3~tplv-k3u1fbpfcp-zoom-1.image" alt="Quick Sort" loading="lazy"></p>
<p>Here is the code:</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And Quick Sort is easy to write via using recursion.</p>
<p>Its time complexity is O(n * log n), and its space complexity is O(log n).</p>
<p>It is not a stable sorting algorithm because we break the original order in every round.</p>
<h3> Merge Sort</h3>
<p>Merge Sort is another sorting method that can use recursion to solve.</p>
<p>Merge sort is an efficient sorting algorithm based on the merge operation.</p>
<p>This algorithm is a typical application of Divide and Conquer. Combine the ordered subsequences to obtain a completely ordered sequence; that is, first make each subsequence in order, and then make the subsequence segments in order.</p>
<p>And given a collection of integers:</p>
<ol>
<li>Divide a sequence of length n array into two subsequences of length n/2</li>
<li>Use merge sort for the two subsequences respectively</li>
<li>Merges two sorted subsequences into a final sorted sequence.</li>
</ol>
<p>Here is the dynamic proceeding:</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fef227f4fb3f4f5383ae609aca57848c~tplv-k3u1fbpfcp-zoom-1.image" alt="Merge Sort" loading="lazy"></p>
<p>Here is the code:</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For Merge Sort, the time complexity is O(n * log n) and the space complexity is O(n).</p>
<p>It is a stable sorting algorithm.</p>
<h3> Shell Sort</h3>
<p>Shell Sort is a category of Insertion Sort.</p>
<p>Firstly, we divide the entire record sequence to be sorted into several subsequences for direct insertion sorting respectively.</p>
<p>The specific algorithm description:</p>
<ol>
<li>Choose an incremental sequence t1, t2, ..., tk, where ti&gt;tj, tk=1;</li>
<li>According to the incremental sequence number k, sort the sequence k times;</li>
<li>For each sorting, according to the corresponding increment ti, the column to be sorted is divided into several subsequences of length m, and direct insertion sorting is performed on each sub-list respectively.</li>
<li>Only when the increment factor is 1, the entire sequence is treated as a table, and the length of the table is the length of the entire sequence.</li>
</ol>
<p>Here is the dynamic proceeding:</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/02585fdfd7da4c2287066c1acfac6a87~tplv-k3u1fbpfcp-zoom-1.image" alt="Shell Sort" loading="lazy"></p>
<p>Here is the code:</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For Shell Sort, the time complexity is O(n * log n) and the Space Complexity is O(1).</p>
<p>It is a not stable sorting algorithm.</p>
<h3> Heap Sort</h3>
<p>The core concept of the Heap Sort involves constructing a heap from our input and repeatedly removing the minimum/maximum element to sort the array.</p>
<p>A naive approach to Heap Sort would start with creating a new array and adding elements one by one into the new array. But this sorting algorithm can also be performed in place, so no extra memory is used in terms of space complexity.</p>
<p>The key idea for in-place Heap Sort involves a balance of two central ideas:</p>
<ol>
<li>Building a heap from an unsorted array through a “bottom-up heapification” process</li>
<li>Using the heap to sort the input array.</li>
</ol>
<p>Heap Sort traditionally uses a max-heap to sort the array, although a min-heap also works, its implementation is a little less elegant.</p>
<p>Algorithm for “bottom-up heapification” of input into max-heap.</p>
<p>Given an input array, we can represent it as a binary tree.</p>
<p>If the parent node is stored at index i, the left child will be stored at index 2i + 1 and the right child at index 2i + 2 (assuming the indexing starts at 0).</p>
<p>To convert it to a max-heap, we proceed with the following steps:</p>
<ol>
<li>Start from the end of the array (bottom of the binary tree).</li>
<li>There are two cases for a node
<ul>
<li>It is greater than its left child and right child (if any).
<ul>
<li>In this case, proceed to the next node (one index before the current array index)</li>
</ul>
</li>
<li>There exists a child node that is greater than the current node
<ul>
<li>In this case, swap the current node with the child node. This fixes a violation of the max-heap property</li>
<li>Repeat the process with the node until the max-heap property is no longer violated</li>
</ul>
</li>
</ul>
</li>
<li>Repeat step 2 on every node in the binary tree from bottom-up.</li>
</ol>
<p>A key property of this method is that by processing the nodes from the bottom-up, once we are at a specific node in our heap, it is guaranteed that all child nodes are also heaps.</p>
<p>Once we have “heapified” the input, we can begin using the max-heap to sort the list. To do so, we will:</p>
<ol>
<li>Take the maximum element at index 0 (we know this is the maximum element because of the max-heap property) and swap it with the last element in the array (this element's proper place).</li>
<li>We now have sorted an element (the last element). We can now ignore this element and decrease heap size by 1, thereby omitting the max element from the heap while keeping it in the array.</li>
<li>Treat the remaining elements as a new heap. There are two cases:
<ul>
<li>The root element violates the max-heap property
<ul>
<li>Sink this node into the heap until it no longer violates the max-heap property. Here the concept of "sinking" a node refers to swapping the node with one its children until the heap property is no longer violated.</li>
</ul>
</li>
<li>The root element does not violate the max-heap property
<ul>
<li>Proceed to step (4)</li>
</ul>
</li>
</ul>
</li>
<li>Repeat step 1 on the remaining unsorted elements. Continue until all elements are sorted.</li>
</ol>
<p>Here is the dynamic proceeding:</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2399d39bc13f407d8a5ffacb2b1d5fb0~tplv-k3u1fbpfcp-zoom-1.image" alt="Heap Sort" loading="lazy"></p>
<p>Here is the code:</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The key aspect that makes Heap Sort better than selection sort is the running time of the algorithm is now O(NlogN).</p>
<p>This is a result of the fact that removing the max element from the heap, which is the central operation in the sort is an O(log N) operation, which has to be performed in the worst case N−1 times.</p>
<p>Note that in-place heapification is an O(N) operation, so it has no impact on the worst-case time complexity of Heap Sort.</p>
<p>In terms of space complexity, since we are treating the input array as a heap and creating no extra space (all operations are in-place), Heap Sort is  O(1).</p>
<p>And it is not a stable sort.</p>
<h2> Summary</h2>
<p>Now, we have introduced the 10 common sort methods. Let's make a summary.</p>
<p>First, these 10 common sort methods can be divided into two categories: Comparable Sort and Non-comparable Sort.</p>
<ol>
<li>
<p>Comparable Sort</p>
<ul>
<li>Insertion Sort
<ul>
<li>Direct Insertion Sort</li>
<li>Shell Sort</li>
</ul>
</li>
<li>Swap Sort
<ul>
<li>Bubble Sort</li>
<li>Quick Sort</li>
</ul>
</li>
<li>Selection Sort
<ul>
<li>Direct Selection Sort</li>
<li>Heap Sort</li>
</ul>
</li>
<li>Merge Sort</li>
</ul>
</li>
<li>
<p>Non-comparable Sort</p>
<ul>
<li>Counting Sort</li>
<li>Radix Sort</li>
<li>Bucket Sort</li>
</ul>
</li>
</ol>
<p>Among them, Heap Sort and Merge Sort have the best average efficiency. And Non-comparable Sort performs well in the case of relatively small open spaces though it has linear time complexity. And Direct Insertion Sort, Direct Selection Sort, Bubble Sort are more intuitive in human thought.</p>
]]></content>
    <category term="article"/>
    <published>2023-07-03T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Recursion</title>
    <id>https://harryxiong24.github.io/en/article/recursion.html</id>
    <link href="https://harryxiong24.github.io/en/article/recursion.html"/>
    <updated>2023-06-30T07:42:58.000Z</updated>
    <summary type="html"><![CDATA[<h1> Recursion</h1>
<h2> Preface</h2>
<p>In this article, I would like to summarize recursion from my own perspective. For a long time, I haven't had a clear idea to solve recursion problems. I think it is abstract and hard to find a template in some degree.</p>
<p>Now, due to practicing recursive problems over and over again, I think I have some good experience and can extract some methods to solve the recursion problem.</p>]]></summary>
    <content type="html"><![CDATA[<h1> Recursion</h1>
<h2> Preface</h2>
<p>In this article, I would like to summarize recursion from my own perspective. For a long time, I haven't had a clear idea to solve recursion problems. I think it is abstract and hard to find a template in some degree.</p>
<p>Now, due to practicing recursive problems over and over again, I think I have some good experience and can extract some methods to solve the recursion problem.</p>
<h2> The core of recursion</h2>
<p>Here is the definition of recursion from Wikipedia:</p>
<p>Recursion is the process a procedure goes through when one of the steps of the procedure involves invoking the procedure itself. A procedure that goes through recursion is said to be 'recursive'.</p>
<p>Obviously, it is obscure. And it is not the point I want to tell you.</p>
<p>Let's see an example to understand recursion:</p>
<p>We assume f(x) is a function and define f(x) = x * f(x-1), f(1) = 1.</p>
<p>And we need to obtain the f(6).</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As we see, we don't know the value of f(6), but we can transform it as 6 *f(5); We don't know the value of f(5), but we can transform it as 5 * f(4)...</p>
<p>Until we reach the terminal condition f(1) = 1, we start to go back.</p>
<p><strong>So, for any recursion, we have two phases: go-in, come-out. Like this example, steps 1-6 represent going in, and steps 7- 11 represent coming out.</strong></p>
<p>This is the key to recursion. In fact, these are the essence of the computer handling recursive problems.</p>
<p><img src="https://pic4.zhimg.com/v2-117b94f64bcff561bd230e03a49dbf37_b.webp" alt="Recursive" loading="lazy"></p>
<h2> How to look at recursion from the perspective of the human brain?</h2>
<p>Although we have figured out every step of recursion in the previous section, we can't always do this when we face recursive problems every time.</p>
<p>The reason is that we are not computers.</p>
<p>What we usually call understanding code is to simulate the result of computer execution to a certain step in the brain. For iterative algorithms, this is fine. But when comes to the recursive algorithm, if you understand it in this way, you will enter a misunderstanding and you will find that it is hard to figure out the whole process like f(6).</p>
<p>This is why we need computers to resolve recursive problems. The Computer only cares about input and execution, and they don't need to understand the context or describe the process.</p>
<p>Thus, it is almost impossible for our brains to think through the entire process of recursion and recursion step by step, so don't try to use the human brain to decompose each step of recursion.</p>
<p>To put it simply, first of all, we must learn to forget the recursive process, trust the computer, and not try to simulate every step with the human brain to verify whether our solution is correct.</p>
<p>And the only thing we should care about is what we should do in one of the cases. Like in f(6) example, we just care about what we need to do when we are in f(5) cases. And then believe your computer, believe it can solve other sub-question successfully based on your f(5) solving logic.</p>
<div class="hint-container tip">
<p class="hint-container-title">Hint</p>
<p>This is important, please remember it!</p>
</div>
<h2> The key element is to solve recursive problems</h2>
<p>There are 3 key elements I summarized.</p>
<h3> Clear what you want to do in the recursive function</h3>
<p>For recursion, one important thing is: what is the function of this function, and what kind of thing does it want to accomplish?</p>
<p>And this is up to us to define. We don't care what the code in the function is, but we must first understand what this function is used for.</p>
<div class="hint-container tip">
<p class="hint-container-title">Hint</p>
<p>This point, you may think it is nonsense. Don't jump to conclusions, the three elements of recursion are indispensable and important respectively.</p>
</div>
<h3> Find out the terminal conditions</h3>
<p>Find out the terminal conditions. Terminal conditions refer to a condition where a function no longer calls itself, thereby avoiding an infinite loop.</p>
<h3> Find out the recursive logic</h3>
<p>Find the recursive logic, that is, the equivalence relation of the function. And it is the hardest step in three elements. And I think it doesn't have a particular summary. Different examples reflect differently.</p>
<h2> Case Study</h2>
<h3> Fibonacci Number</h3>
<p>The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1.</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol>
<li>Now, the first step is <strong>Clear what you want to do in the recursive function</strong>.</li>
</ol>
<p>Well, my recursive function will get the current F(n) Fibonacci number.</p>
<div class="language-typescript" data-ext="ts"></div><ol start="2">
<li>Second, find out the terminal conditions.</li>
</ol>
<p>It is easy, F(0) = 0, F(1) = 1.</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>Third, Find out the recursive logic.</li>
</ol>
<p>So you should remind yourself: Don't try to simulate every step to verify whether our solution is correct. The only thing we should care about is what we should do in one of the cases!</p>
<p>So assume that we need to obtain fib(5), so in this case, fib(5) = fib(4) + fib(3). And don't think about fib(4) or fib(3), because they belong to other sub-cases, and we just need to know when to execute here, fib(3) and fib(4) has accurate results.</p>
<p>So according to this case, we know fib(n) = fib(n-1) + fib(n-2), and that's it!</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And the recursive function is completed! We just give the params into it, then it works!</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Series of reverse problems</h3>
<p>This section I want to share a particular question set - reverse problems.</p>
<p>We can find examples at Leetcode such as:</p>
<ul>
<li>
<ol start="24">
<li>Swap Nodes in Pairs</li>
</ol>
</li>
<li>
<ol start="206">
<li>Reverse Linked List</li>
</ol>
</li>
<li>
<ol start="344">
<li>Reverse String</li>
</ol>
</li>
</ul>
<p>Let's use Reverse Linked List as our example:</p>
<p>Given the head of a singly linked list, reverse the list, and return the reversed list.</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol>
<li>Now, the first step is <strong>Clear what you want to do in the recursive function</strong>.</li>
</ol>
<p>Well, my recursive function will swap current nodes.</p>
<div class="language-typescript" data-ext="ts"></div><ol start="2">
<li>Second, find out the terminal conditions.</li>
</ol>
<p>We can know that there is no node need to reverse when at the end, so at that time we need to return itself.</p>
<div class="language-typescript" data-ext="ts"></div><ol start="3">
<li>Third, Find out the recursive logic.</li>
</ol>
<p>So you should remind yourself: Don't try to simulate every step to verify whether our solution is correct. The only thing we should care about is what we should do in one of the cases!</p>
<p>So suppose that the program is executing here:</p>
<div class="language-text" data-ext="text"></div><p>At this time, 1-&gt;2-&gt;3-&gt;4 turn to the picture above. And we need to change to:</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this scene, it is easy to think out:</p>
<div class="language-typescript" data-ext="ts"></div><p>And then, put recursive in the code:</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And the recursive function is completed! We just give the params into it, then it works!</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Bottom Up and Top Down</h2>
<p>In the previous section, we use an example:</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We have two phases: go-in, come-out. Like this example, steps 1-6 represent going in, and steps 7- 11 represent coming out.</p>
<p>This is important because we can use our recursion function in these two phases.</p>
<p>During the go-in phase, we can use Top-Down method to do something, and during the come-out phase, we can use Bottom-up to do something.</p>
<p>Let's see an example:</p>
<p>Given the root of a binary tree, return its maximum depth.</p>
<p>A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next, we will cope with this problem based on these two methods.</p>
<h3> Bottom Up</h3>
<p>"Bottom-up" is a recursive solution.</p>
<p>In each recursive call, firstly we will call the function recursively for all the children nodes and then come up with the answer according to the returned values and the value of the current node itself.</p>
<p>This process can be regarded as a kind of postorder traversal.</p>
<p>Typically, a "bottom-up" recursive function bottom_up(root) will be something like this:</p>
<div class="language-text" data-ext="text"></div><p>Then, let's see this Maximum Depth of Binary Tree.</p>
<ol>
<li>Now, the first step is <strong>Clear what you want to do in the recursive function</strong>.</li>
</ol>
<div class="language-typescript" data-ext="ts"></div><ol start="2">
<li>Second, find out the terminal conditions.</li>
</ol>
<p>It is easy to know that if the current node is null, the length will be 0 at this time.</p>
<div class="language-typescript" data-ext="ts"></div><ol start="3">
<li>Third, find out the recursive logic.</li>
</ol>
<p>Suppose in one node, what should we do? Get left_len and right_len, and pick up the max one, and plus 1 length currently, and then return this value to the next top node.</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> Summary</h4>
<p>So in this process, we don't handle something during the go-in phase, we just let the code enter go-in phase and finish it, then at come-out phase, we do Math.max(left_len, right_len) + 1.</p>
<p>That's Bottom-Up.</p>
<p>And in the previous sections(Fibonacci Number and Reverse Linked List), we can find that we all use Bottom-Up, which means that we often call recursive function first and do something in the come-out phase.</p>
<h3> Top-Down</h3>
<p>Top-down means that in each recursive call, we will visit the node first to come up with some values and pass these values to its children when calling the function recursively.</p>
<p>So the "top-down" solution can be considered as a kind of preorder traversal.</p>
<p>To be specific, the recursive function top_down(root, params) works like this:</p>
<div class="language-text" data-ext="text"></div><p>Then, let's see this Maximum Depth of Binary Tree.</p>
<ol>
<li>Now, the first step is <strong>Clear what you want to do in the recursive function</strong>.</li>
</ol>
<div class="language-typescript" data-ext="ts"></div><ol start="2">
<li>Second, find out the terminal conditions.</li>
</ol>
<p>It is easy to know that if the current node is null, the length will be 0 at this time.</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>Third, find out the recursive logic.</li>
</ol>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> Summary</h4>
<p>As we see, we do nothing during the come-out phase, and the value of depth is determined when during the go-in.</p>
<p>That's Top-Up.</p>
<p>And Top-Up is often used in the scene where we can use other flags to get the result instead of calling the recursive function itself to get the result. Because in the go-in phase, the recursive function cannot store status permanently, so we need to use other variables to remember it.</p>
]]></content>
    <category term="article"/>
    <published>2023-06-26T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Contact Me</title>
    <id>https://harryxiong24.github.io/en/about-me/contact.html</id>
    <link href="https://harryxiong24.github.io/en/about-me/contact.html"/>
    <updated>2023-06-30T07:42:58.000Z</updated>
    <summary type="html"><![CDATA[<h1> Contact Me</h1>
<div class="hint-container tip">
<p class="hint-container-title">I am looking forward to contacting you!</p>
</div>
<table>
<thead>
<tr>
<th style="text-align:center">App Name</th>
<th style="text-align:left">My Account</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"><a href="https://github.com/HarryXiong24" target="_blank" rel="noopener noreferrer">GitHub</a></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"><a href="mailto:harryxiong24@gmail.com">Gmail</a></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"><a href="https://www.instagram.com/harryxiong24" target="_blank" rel="noopener noreferrer">Instagram</a></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"><a href="https://twitter.com/HarryXiong24" target="_blank" rel="noopener noreferrer">Twitter</a></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"><a href="https://weibo.com/harryxiong24" target="_blank" rel="noopener noreferrer">Weibo</a></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"><a href="https://space.bilibili.com/381730331" target="_blank" rel="noopener noreferrer">BiliBili</a></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"><a href="https://www.linkedin.com/in/haowei-xiong-5a418827b/" target="_blank" rel="noopener noreferrer">Linkedin</a></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"><a href="https://juejin.cn/user/1319894200641784" target="_blank" rel="noopener noreferrer">Jue Jing</a></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">HarryXiong24</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">1291192015</td>
</tr>
</tbody>
</table>]]></summary>
    <content type="html"><![CDATA[<h1> Contact Me</h1>
<div class="hint-container tip">
<p class="hint-container-title">I am looking forward to contacting you!</p>
</div>
<table>
<thead>
<tr>
<th style="text-align:center">App Name</th>
<th style="text-align:left">My Account</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"><a href="https://github.com/HarryXiong24" target="_blank" rel="noopener noreferrer">GitHub</a></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"><a href="mailto:harryxiong24@gmail.com">Gmail</a></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"><a href="https://www.instagram.com/harryxiong24" target="_blank" rel="noopener noreferrer">Instagram</a></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"><a href="https://twitter.com/HarryXiong24" target="_blank" rel="noopener noreferrer">Twitter</a></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"><a href="https://weibo.com/harryxiong24" target="_blank" rel="noopener noreferrer">Weibo</a></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"><a href="https://space.bilibili.com/381730331" target="_blank" rel="noopener noreferrer">BiliBili</a></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"><a href="https://www.linkedin.com/in/haowei-xiong-5a418827b/" target="_blank" rel="noopener noreferrer">Linkedin</a></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"><a href="https://juejin.cn/user/1319894200641784" target="_blank" rel="noopener noreferrer">Jue Jing</a></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">HarryXiong24</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">1291192015</td>
</tr>
</tbody>
</table>
]]></content>
    <published>2023-06-20T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">About Me</title>
    <id>https://harryxiong24.github.io/en/about-me/intro.html</id>
    <link href="https://harryxiong24.github.io/en/about-me/intro.html"/>
    <updated>2023-06-29T08:25:39.000Z</updated>
    <summary type="html"><![CDATA[<h1> About Me</h1>
<div class="hint-container tip">
<p class="hint-container-title">Welcome 👋</p>
<p>Hello buddies! Welcome to my Blog!</p>
</div>
<h3> 🤟 Briefly Intro</h3>
<p>I am a coder with a strong interest in software development, especially in the field of Web applications development and implementation. I have a good foundation in Typescript and JavaScript. And I used to work at Bytedance and Tencent as a Web Frontend Engineer. In addition, I am not a boy who only gets addicted to coding. I have a lot of hobbies and I believe that enjoying our lives is one of the happiest things in the world!</p>]]></summary>
    <content type="html"><![CDATA[<h1> About Me</h1>
<div class="hint-container tip">
<p class="hint-container-title">Welcome 👋</p>
<p>Hello buddies! Welcome to my Blog!</p>
</div>
<h3> 🤟 Briefly Intro</h3>
<p>I am a coder with a strong interest in software development, especially in the field of Web applications development and implementation. I have a good foundation in Typescript and JavaScript. And I used to work at Bytedance and Tencent as a Web Frontend Engineer. In addition, I am not a boy who only gets addicted to coding. I have a lot of hobbies and I believe that enjoying our lives is one of the happiest things in the world!</p>
<h3> 🌟 Motto</h3>
<p>Nothing is impossible for a willing heart.</p>
<h3> 🌱 Hobby</h3>
<p>Coding &amp; Piano &amp; Reading &amp; 🏀 &amp;  🏊‍♂️ &amp; 🏸 &amp; 🚴‍♂️ &amp; 🎤 &amp; etc.</p>
<h3> 📫 How to reach me</h3>
<p><a href="/en/about-me/contact">Contact Me</a></p>
<h3> Plus</h3>
<p><a href="/zh/about-me/intro">Move to the Chinese Version</a></p>
]]></content>
    <published>2023-06-20T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Notice</title>
    <id>https://harryxiong24.github.io/en/about-me/notice.html</id>
    <link href="https://harryxiong24.github.io/en/about-me/notice.html"/>
    <updated>2023-06-30T07:42:58.000Z</updated>
    <summary type="html"><![CDATA[<h1> Notice</h1>
<div class="hint-container info">
<p class="hint-container-title">6/19/2023</p>
<p>The English version of the blog was only recently built. All my articles and study notes were recorded in Chinese, so there is currently no English version of the historical blog.</p>
<p>But it's a milestone! From now on, I will write in bilingual and update simultaneously!</p>
<p>If you want to view my historical articles now, welcome to the <a href="/zh/" target="blank">Chinese version</a>!</p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> Notice</h1>
<div class="hint-container info">
<p class="hint-container-title">6/19/2023</p>
<p>The English version of the blog was only recently built. All my articles and study notes were recorded in Chinese, so there is currently no English version of the historical blog.</p>
<p>But it's a milestone! From now on, I will write in bilingual and update simultaneously!</p>
<p>If you want to view my historical articles now, welcome to the <a href="/zh/" target="blank">Chinese version</a>!</p>
</div>
]]></content>
    <published>2023-06-20T00:00:00.000Z</published>
  </entry>
</feed>