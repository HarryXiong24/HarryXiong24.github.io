{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Harry Xiong",
  "home_page_url": "https://harryxiong24.github.io/",
  "feed_url": "https://harryxiong24.github.io/feed.json",
  "description": "A piano player playing on the keyboard",
  "favicon": "https://harryxiong24.github.io/favicon.ico",
  "items": [
    {
      "title": "Sort Algorithm",
      "url": "https://harryxiong24.github.io/en/article/sort-algorithm.html",
      "id": "https://harryxiong24.github.io/en/article/sort-algorithm.html",
      "summary": "Preface In this chapter, I want to summarize the sort algorithm. As we all know, there are 10 common sort algorithms. And I don't want to do too much foreshadowing. Let's see a ...",
      "content_html": "<h1> Sort Algorithm</h1>\n<h2> Preface</h2>\n<p>In this chapter, I want to summarize the sort algorithm. As we all know, there are 10 common sort algorithms. And I don't want to do too much foreshadowing. Let's see a picture straight.</p>\n<table>\n<thead>\n<tr>\n<th><strong>Sort Algorithm</strong></th>\n<th><strong>Time Complexity</strong></th>\n<th><strong>Space Complexity</strong></th>\n<th><strong>Stability</strong></th>\n<th><strong>Sorting Method</strong></th>\n<th><strong>Best Case</strong></th>\n<th><strong>Worst Case</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Insertion Sort</strong></td>\n<td>O(n^2)</td>\n<td>O(1)</td>\n<td>Stable</td>\n<td>In-place</td>\n<td>O(n)</td>\n<td>O(n^2)</td>\n</tr>\n<tr>\n<td><strong>Bubble Sort</strong></td>\n<td>O(n^2)</td>\n<td>O(1)</td>\n<td>Stable</td>\n<td>In-place</td>\n<td>O(n)</td>\n<td>O(n^2)</td>\n</tr>\n<tr>\n<td><strong>Selection Sort</strong></td>\n<td>O(n^2)</td>\n<td>O(1)</td>\n<td>Unstable</td>\n<td>In-place</td>\n<td>O(n^2)</td>\n<td>O(n^2)</td>\n</tr>\n<tr>\n<td>****</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>Counting Sort</strong></td>\n<td>O(n+k)</td>\n<td>O(k)</td>\n<td>Stable</td>\n<td>Out-place</td>\n<td>O(n+k)</td>\n<td>O(n+k)</td>\n</tr>\n<tr>\n<td><strong>Radix Sort</strong></td>\n<td>O(w*(n+k))</td>\n<td>O(n+k)</td>\n<td>Stable</td>\n<td>Out-place</td>\n<td>O(w*(n+k))</td>\n<td>O(w*(n+k))</td>\n</tr>\n<tr>\n<td><strong>Bucket Sort</strong></td>\n<td>O(n+k)</td>\n<td>O(n+k)</td>\n<td>Stable</td>\n<td>Out-place</td>\n<td>O(n+k)</td>\n<td>O(n^2)</td>\n</tr>\n<tr>\n<td>****</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>Quick Sort</strong></td>\n<td>O(n*logn)</td>\n<td>O(n*logn)</td>\n<td>Unstable</td>\n<td>In-place</td>\n<td>O(n*logn)</td>\n<td>O(n^2)</td>\n</tr>\n<tr>\n<td><strong>Merge Sort</strong></td>\n<td>O(n*logn)</td>\n<td>O(n)</td>\n<td>Unstable</td>\n<td>Out-place</td>\n<td>O(n*logn)</td>\n<td>O(n*logn)</td>\n</tr>\n<tr>\n<td><strong>Shell Sort</strong></td>\n<td>O(n*logn)</td>\n<td>O(1)</td>\n<td>Unstable</td>\n<td>In-place</td>\n<td>O(n*logn)</td>\n<td>O(n*logn)</td>\n</tr>\n<tr>\n<td>****</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>Heap Sort</strong></td>\n<td>O(n*logn)</td>\n<td>O(1)</td>\n<td>Unstable</td>\n<td>In-place</td>\n<td>O(n*logn)</td>\n<td>O(n*logn)</td>\n</tr>\n</tbody>\n</table>\n<p>In the next sections, I will talk about them respectively.</p>\n<h2> 10 Common Sort Algorithms</h2>\n<h3> Insertion Sort</h3>\n<p>This is an intuitive algorithm.</p>\n<p>Given a collection of integers, you can sort the list by proceeding from the start of the list.</p>\n<p>In every round, you will encounter an element that is out of order, and you can continuously swap places with previous elements until it is inserted in its correct relative location based on what you’ve processed thus far.</p>\n<p>Here is the dynamic proceeding:</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20221119/insertionSort.lre9a3i98xs.gif\" alt=\"Insertion Sort\" loading=\"lazy\"></p>\n<p>Here is the code:</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>It is a stable algorithm because the sequence of other elements doesn't change during the period of each sorting round.</p>\n<p>Obviously, the time complexity is O(n^2). And it's an in-place algorithm, so the space complexity is O(1).</p>\n<h3> Bubble Sort</h3>\n<p>Bubble Sort, a really interesting name, is another common sort algorithm. And it is easy to remember because of its name.</p>\n<p>Given a collection of integers.</p>\n<p>In every round, each adjacent element, from beginning to end sequentially, will compare their value and swap if they are out of order.</p>\n<p>The core idea of bubble sort is it will repeat this process until no more swaps are made in a single pass, which means the list is sorted.</p>\n<p>Here is the dynamic proceeding:</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20221129/bubbleSort.60l6mgy53080.gif\" alt=\"Bubble Sort\" loading=\"lazy\"></p>\n<p>Here is the code:</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>It is a stable algorithm because the sequence of other elements doesn't change during the period of each sorting round.</p>\n<p>Obviously, the time complexity is O(n^2). And it's an in-place algorithm, so the space complexity is O(1).</p>\n<h3> Selection Sort</h3>\n<p>It is another intuitive algorithm and it is easy to realize.</p>\n<p>Given a collection of integers.</p>\n<p>In every round, find the minimum element in that list and move it to the front of the list through a swap. That's it!</p>\n<p>Here is the dynamic proceeding:</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2020070819571632.gif\" alt=\"Selection Sort\" loading=\"lazy\"></p>\n<p>Here is the code:</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>It is not a stable algorithm because the sequence of other elements is broken during the period of each sorting round.</p>\n<p>Obviously, the time complexity is O(n^2). And it's an in-place algorithm, so the space complexity is O(1).</p>\n<h3> Counting Sort</h3>\n<p>These 3 sorting methods above are simple and intuitive. And now we start to learn some advanced sort algorithms.</p>\n<p>Counting Sort is clever.</p>\n<p>Consider we have a collection of integers. We can record the number of each integer. And then, we get a count array so that we can calculate the sorted index of this collection of integers. It's awesome!</p>\n<p>Here is the dynamic proceeding:</p>\n<p><img src=\"https://pic4.zhimg.com/v2-3c7ddb59df2d21b287e42a7b908409cb_b.webp\" alt=\"Counting Sort\" loading=\"lazy\"></p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">Hint</p>\n<p>However, a key assumption of counting sort is that the minimum possible value in the array is 0 (no negative numbers) and the maximum value is some positive integer K.</p>\n<p>So if your array includes some negative numbers, please remember to do a map to keep all numbers positive.</p>\n<p>For example, an array with values between -5 and 10 can be mapped to values between 0 and 15, perform counting sort, and then remap to the original -5 to 10 range.</p>\n<p>This is important!</p>\n</div>\n<p>Here is the code:</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>It is a stable sorting algorithm. Because we make a new space and do not break the original array.</p>\n<p>Time Complexity: O(N + K), where N is the size of the input array and K is the maximum value in the array.</p>\n<p>Space Complexity: O(N + K), since we have to initialize a new array of size N and a counts array of size K+1.</p>\n<p>O(N+K) is a linear time complexity, we may think it is perfect. But notice one thing: if the maximum number in the array is too big, we need to create a space as big as this number. And it is a waste of space. Like array [0, 1, 100001, 2].</p>\n<p>So the Counting Sort is not as perfect as we thought.</p>\n<p>Plus, Counting Sort also can’t easily handle strings where the alphabet size could be unconstrained.</p>\n<h3> Radix Sort</h3>\n<p>We just discuss the limitation of Counting Sort above. Now We introduce an optimizing sort algorithm based on Counting Sort.</p>\n<p>Radix Sort Algorithm has these basic steps:</p>\n<ol>\n<li>Give a collection of integers, and find out the maximum number in the collection. Let it be W.</li>\n<li>For each integer, loop through digits from 1 to W in right-to-left order(the least significant to the most significant digit). And in each group of digits, we use Count Sort to sort integers.</li>\n</ol>\n<p>Also, remember that if your array includes some negative numbers, do a map to keep all numbers positive.</p>\n<p>For example, an array with values between -5 and 10 can be mapped to values between 0 and 15, perform counting sort, and then remap to the original -5 to 10 range.</p>\n<p>Here is the dynamic proceeding:</p>\n<p><img src=\"https://pic3.zhimg.com/v2-3a6f1e5059386523ed941f0d6c3a136e_b.webp\" alt=\"Radix Sort\" loading=\"lazy\"></p>\n<p>Here is the code:</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Let's analyze the complexity of Radix Sort.</p>\n<p>Let W be the maximum digit length within the list of integers.\nLet N be the size of the original array.\nAnd because we use Counting Sort every round, let K be the size of the counting array(it is usually 10).</p>\n<p>So the Time Complexity is O(W * (N + K));</p>\n<p>Space Complexity is O(N + K)</p>\n<p>It is a stable sorting algorithm because we create new extra space to sort instead of in-place sorting.</p>\n<h3> Bucket Sort</h3>\n<p>Bucket Sort is another non-comparison-based sorting algorithm.</p>\n<p>The steps of bucket sort can be broken down into four distinct parts.</p>\n<p>Given an array A:</p>\n<ol>\n<li>Create an initial array of K empty buckets</li>\n<li>Distribute each element of the array into its respective bucket. A common way to map values to buckets is via the following function: floor(K * A[i] / max(A)).</li>\n<li>Sort each bucket by using insertion sort or some other sorting algorithm.</li>\n<li>Concatenate the sorted buckets in order to create the sorted list.</li>\n</ol>\n<p>Also, remember that if your array includes some negative numbers, do a map to keep all numbers positive.</p>\n<p>For example, an array with values between -5 and 10 can be mapped to values between 0 and 15, perform counting sort, and then remap to the original -5 to 10 range.</p>\n<p>Here is the dynamic proceeding:</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f41ad1d7225c4900aa71fea2a0bd8d18~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"Bucket Sort\" loading=\"lazy\"></p>\n<p>Here is the code:</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Let's discuss the complexity of Bucket Sort.</p>\n<p>Obviously, the complexity is based on the sort algorithm used in each bucket.</p>\n<p>Let W be the number of buckets.</p>\n<p>If we choose Insertion Sort, Time Complexity will be O(W * (n^2)), Space Complexity will be O(W);</p>\n<p>If we choose Counting Sort, Time Complexity will be O(W * (N + K)), Space Complexity will be O(W * O (N + K));</p>\n<p>It is a stable sorting algorithm because we create new extra space to sort instead of in-place sorting.</p>\n<h2> Continue writing...</h2>\n",
      "image": "https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20221119/insertionSort.lre9a3i98xs.gif",
      "date_published": "2023-06-30T00:00:00.000Z",
      "date_modified": "2023-06-30T07:42:58.000Z",
      "authors": [],
      "tags": [
        "article"
      ]
    },
    {
      "title": "Recursion",
      "url": "https://harryxiong24.github.io/en/article/recursion.html",
      "id": "https://harryxiong24.github.io/en/article/recursion.html",
      "summary": "Preface In this article, I would like to summarize recursion from my own perspective. For a long time, I haven't had a clear idea to solve recursion problems. I think it is abst...",
      "content_html": "<h1> Recursion</h1>\n<h2> Preface</h2>\n<p>In this article, I would like to summarize recursion from my own perspective. For a long time, I haven't had a clear idea to solve recursion problems. I think it is abstract and hard to find a template in some degree.</p>\n<p>Now, due to practicing recursive problems over and over again, I think I have some good experience and can extract some methods to solve the recursion problem.</p>\n<h2> The core of recursion</h2>\n<p>Here is the definition of recursion from Wikipedia:</p>\n<p>Recursion is the process a procedure goes through when one of the steps of the procedure involves invoking the procedure itself. A procedure that goes through recursion is said to be 'recursive'.</p>\n<p>Obviously, it is obscure. And it is not the point I want to tell you.</p>\n<p>Let's see an example to understand recursion:</p>\n<p>We assume f(x) is a function and define f(x) = x * f(x-1), f(1) = 1.</p>\n<p>And we need to obtain the f(6).</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>As we see, we don't know the value of f(6), but we can transform it as 6 *f(5); We don't know the value of f(5), but we can transform it as 5 * f(4)...</p>\n<p>Until we reach the terminal condition f(1) = 1, we start to go back.</p>\n<p><strong>So, for any recursion, we have two phases: go-in, come-out. Like this example, steps 1-6 represent going in, and steps 7- 11 represent coming out.</strong></p>\n<p>This is the key to recursion. In fact, these are the essence of the computer handling recursive problems.</p>\n<p><img src=\"https://pic4.zhimg.com/v2-117b94f64bcff561bd230e03a49dbf37_b.webp\" alt=\"Recursive\" loading=\"lazy\"></p>\n<h2> How to look at recursion from the perspective of the human brain?</h2>\n<p>Although we have figured out every step of recursion in the previous section, we can't always do this when we face recursive problems every time.</p>\n<p>The reason is that we are not computers.</p>\n<p>What we usually call understanding code is to simulate the result of computer execution to a certain step in the brain. For iterative algorithms, this is fine. But when comes to the recursive algorithm, if you understand it in this way, you will enter a misunderstanding and you will find that it is hard to figure out the whole process like f(6).</p>\n<p>This is why we need computers to resolve recursive problems. The Computer only cares about input and execution, and they don't need to understand the context or describe the process.</p>\n<p>Thus, it is almost impossible for our brains to think through the entire process of recursion and recursion step by step, so don't try to use the human brain to decompose each step of recursion.</p>\n<p>To put it simply, first of all, we must learn to forget the recursive process, trust the computer, and not try to simulate every step with the human brain to verify whether our solution is correct.</p>\n<p>And the only thing we should care about is what we should do in one of the cases. Like in f(6) example, we just care about what we need to do when we are in f(5) cases. And then believe your computer, believe it can solve other sub-question successfully based on your f(5) solving logic.</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">Hint</p>\n<p>This is important, please remember it!</p>\n</div>\n<h2> The key element is to solve recursive problems</h2>\n<p>There are 3 key elements I summarized.</p>\n<h3> Clear what you want to do in the recursive function</h3>\n<p>For recursion, one important thing is: what is the function of this function, and what kind of thing does it want to accomplish?</p>\n<p>And this is up to us to define. We don't care what the code in the function is, but we must first understand what this function is used for.</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">Hint</p>\n<p>This point, you may think it is nonsense. Don't jump to conclusions, the three elements of recursion are indispensable and important respectively.</p>\n</div>\n<h3> Find out the terminal conditions</h3>\n<p>Find out the terminal conditions. Terminal conditions refer to a condition where a function no longer calls itself, thereby avoiding an infinite loop.</p>\n<h3> Find out the recursive logic</h3>\n<p>Find the recursive logic, that is, the equivalence relation of the function. And it is the hardest step in three elements. And I think it doesn't have a particular summary. Different examples reflect differently.</p>\n<h2> Case Study</h2>\n<h3> Fibonacci Number</h3>\n<p>The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1.</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol>\n<li>Now, the first step is <strong>Clear what you want to do in the recursive function</strong>.</li>\n</ol>\n<p>Well, my recursive function will get the current F(n) Fibonacci number.</p>\n<div class=\"language-typescript\" data-ext=\"ts\"></div><ol start=\"2\">\n<li>Second, find out the terminal conditions.</li>\n</ol>\n<p>It is easy, F(0) = 0, F(1) = 1.</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li>Third, Find out the recursive logic.</li>\n</ol>\n<p>So you should remind yourself: Don't try to simulate every step to verify whether our solution is correct. The only thing we should care about is what we should do in one of the cases!</p>\n<p>So assume that we need to obtain fib(5), so in this case, fib(5) = fib(4) + fib(3). And don't think about fib(4) or fib(3), because they belong to other sub-cases, and we just need to know when to execute here, fib(3) and fib(4) has accurate results.</p>\n<p>So according to this case, we know fib(n) = fib(n-1) + fib(n-2), and that's it!</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>And the recursive function is completed! We just give the params into it, then it works!</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> Series of reverse problems</h3>\n<p>This section I want to share a particular question set - reverse problems.</p>\n<p>We can find examples at Leetcode such as:</p>\n<ul>\n<li>\n<ol start=\"24\">\n<li>Swap Nodes in Pairs</li>\n</ol>\n</li>\n<li>\n<ol start=\"206\">\n<li>Reverse Linked List</li>\n</ol>\n</li>\n<li>\n<ol start=\"344\">\n<li>Reverse String</li>\n</ol>\n</li>\n</ul>\n<p>Let's use Reverse Linked List as our example:</p>\n<p>Given the head of a singly linked list, reverse the list, and return the reversed list.</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol>\n<li>Now, the first step is <strong>Clear what you want to do in the recursive function</strong>.</li>\n</ol>\n<p>Well, my recursive function will swap current nodes.</p>\n<div class=\"language-typescript\" data-ext=\"ts\"></div><ol start=\"2\">\n<li>Second, find out the terminal conditions.</li>\n</ol>\n<p>We can know that there is no node need to reverse when at the end, so at that time we need to return itself.</p>\n<div class=\"language-typescript\" data-ext=\"ts\"></div><ol start=\"3\">\n<li>Third, Find out the recursive logic.</li>\n</ol>\n<p>So you should remind yourself: Don't try to simulate every step to verify whether our solution is correct. The only thing we should care about is what we should do in one of the cases!</p>\n<p>So suppose that the program is executing here:</p>\n<div class=\"language-text\" data-ext=\"text\"></div><p>At this time, 1-&gt;2-&gt;3-&gt;4 turn to the picture above. And we need to change to:</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>In this scene, it is easy to think out:</p>\n<div class=\"language-typescript\" data-ext=\"ts\"></div><p>And then, put recursive in the code:</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>And the recursive function is completed! We just give the params into it, then it works!</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Bottom Up and Top Down</h2>\n<p>In the previous section, we use an example:</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>We have two phases: go-in, come-out. Like this example, steps 1-6 represent going in, and steps 7- 11 represent coming out.</p>\n<p>This is important because we can use our recursion function in these two phases.</p>\n<p>During the go-in phase, we can use Top-Down method to do something, and during the come-out phase, we can use Bottom-up to do something.</p>\n<p>Let's see an example:</p>\n<p>Given the root of a binary tree, return its maximum depth.</p>\n<p>A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Next, we will cope with this problem based on these two methods.</p>\n<h3> Bottom Up</h3>\n<p>\"Bottom-up\" is a recursive solution.</p>\n<p>In each recursive call, firstly we will call the function recursively for all the children nodes and then come up with the answer according to the returned values and the value of the current node itself.</p>\n<p>This process can be regarded as a kind of postorder traversal.</p>\n<p>Typically, a \"bottom-up\" recursive function bottom_up(root) will be something like this:</p>\n<div class=\"language-text\" data-ext=\"text\"></div><p>Then, let's see this Maximum Depth of Binary Tree.</p>\n<ol>\n<li>Now, the first step is <strong>Clear what you want to do in the recursive function</strong>.</li>\n</ol>\n<div class=\"language-typescript\" data-ext=\"ts\"></div><ol start=\"2\">\n<li>Second, find out the terminal conditions.</li>\n</ol>\n<p>It is easy to know that if the current node is null, the length will be 0 at this time.</p>\n<div class=\"language-typescript\" data-ext=\"ts\"></div><ol start=\"3\">\n<li>Third, find out the recursive logic.</li>\n</ol>\n<p>Suppose in one node, what should we do? Get left_len and right_len, and pick up the max one, and plus 1 length currently, and then return this value to the next top node.</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> Summary</h4>\n<p>So in this process, we don't handle something during the go-in phase, we just let the code enter go-in phase and finish it, then at come-out phase, we do Math.max(left_len, right_len) + 1.</p>\n<p>That's Bottom-Up.</p>\n<p>And in the previous sections(Fibonacci Number and Reverse Linked List), we can find that we all use Bottom-Up, which means that we often call recursive function first and do something in the come-out phase.</p>\n<h3> Top-Down</h3>\n<p>Top-down means that in each recursive call, we will visit the node first to come up with some values and pass these values to its children when calling the function recursively.</p>\n<p>So the \"top-down\" solution can be considered as a kind of preorder traversal.</p>\n<p>To be specific, the recursive function top_down(root, params) works like this:</p>\n<div class=\"language-text\" data-ext=\"text\"></div><p>Then, let's see this Maximum Depth of Binary Tree.</p>\n<ol>\n<li>Now, the first step is <strong>Clear what you want to do in the recursive function</strong>.</li>\n</ol>\n<div class=\"language-typescript\" data-ext=\"ts\"></div><ol start=\"2\">\n<li>Second, find out the terminal conditions.</li>\n</ol>\n<p>It is easy to know that if the current node is null, the length will be 0 at this time.</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li>Third, find out the recursive logic.</li>\n</ol>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> Summary</h4>\n<p>As we see, we do nothing during the come-out phase, and the value of depth is determined when during the go-in.</p>\n<p>That's Top-Up.</p>\n<p>And Top-Up is often used in the scene where we can use other flags to get the result instead of calling the recursive function itself to get the result. Because in the go-in phase, the recursive function cannot store status permanently, so we need to use other variables to remember it.</p>\n",
      "image": "https://pic4.zhimg.com/v2-117b94f64bcff561bd230e03a49dbf37_b.webp",
      "date_published": "2023-06-26T00:00:00.000Z",
      "date_modified": "2023-06-30T07:42:58.000Z",
      "authors": [],
      "tags": [
        "article"
      ]
    },
    {
      "title": "Contact Me",
      "url": "https://harryxiong24.github.io/en/about-me/contact.html",
      "id": "https://harryxiong24.github.io/en/about-me/contact.html",
      "summary": "I am looking forward to contacting you! App Name My Account :--: :--------- GitHub (https://github.com/HarryXiong24) Gmail (mailto:harryxiong24@gmail.com) Instagram (https://www...",
      "content_html": "<h1> Contact Me</h1>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">I am looking forward to contacting you!</p>\n</div>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">App Name</th>\n<th style=\"text-align:left\">My Account</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/HarryXiong24\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\"><a href=\"mailto:harryxiong24@gmail.com\">Gmail</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\"><a href=\"https://www.instagram.com/harryxiong24\" target=\"_blank\" rel=\"noopener noreferrer\">Instagram</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\"><a href=\"https://twitter.com/HarryXiong24\" target=\"_blank\" rel=\"noopener noreferrer\">Twitter</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\"><a href=\"https://weibo.com/harryxiong24\" target=\"_blank\" rel=\"noopener noreferrer\">Weibo</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\"><a href=\"https://space.bilibili.com/381730331\" target=\"_blank\" rel=\"noopener noreferrer\">BiliBili</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\"><a href=\"https://www.linkedin.com/in/haowei-xiong-5a418827b/\" target=\"_blank\" rel=\"noopener noreferrer\">Linkedin</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\"><a href=\"https://juejin.cn/user/1319894200641784\" target=\"_blank\" rel=\"noopener noreferrer\">Jue Jing</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">HarryXiong24</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">1291192015</td>\n</tr>\n</tbody>\n</table>\n",
      "date_published": "2023-06-20T00:00:00.000Z",
      "date_modified": "2023-06-30T07:42:58.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "About Me",
      "url": "https://harryxiong24.github.io/en/about-me/intro.html",
      "id": "https://harryxiong24.github.io/en/about-me/intro.html",
      "summary": "Welcome 👋 Hello buddies! Welcome to my Blog! 🤟 Briefly Intro I am a coder with a strong interest in software development, especially in the field of Web applications developme...",
      "content_html": "<h1> About Me</h1>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">Welcome 👋</p>\n<p>Hello buddies! Welcome to my Blog!</p>\n</div>\n<h3> 🤟 Briefly Intro</h3>\n<p>I am a coder with a strong interest in software development, especially in the field of Web applications development and implementation. I have a good foundation in Typescript and JavaScript. And I used to work at Bytedance and Tencent as a Web Frontend Engineer. In addition, I am not a boy who only gets addicted to coding. I have a lot of hobbies and I believe that enjoying our lives is one of the happiest things in the world!</p>\n<h3> 🌟 Motto</h3>\n<p>Nothing is impossible for a willing heart.</p>\n<h3> 🌱 Hobby</h3>\n<p>Coding &amp; Piano &amp; Reading &amp; 🏀 &amp;  🏊‍♂️ &amp; 🏸 &amp; 🚴‍♂️ &amp; 🎤 &amp; etc.</p>\n<h3> 📫 How to reach me</h3>\n<p><a href=\"/en/about-me/contact\">Contact Me</a></p>\n<h3> Plus</h3>\n<p><a href=\"/zh/about-me/intro\">Move to the Chinese Version</a></p>\n",
      "date_published": "2023-06-20T00:00:00.000Z",
      "date_modified": "2023-06-29T08:25:39.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Notice",
      "url": "https://harryxiong24.github.io/en/about-me/notice.html",
      "id": "https://harryxiong24.github.io/en/about-me/notice.html",
      "summary": "::: info 6/19/2023 The English version of the blog was only recently built. All my articles and study notes were recorded in Chinese, so there is currently no English version of...",
      "content_html": "<h1> Notice</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">6/19/2023</p>\n<p>The English version of the blog was only recently built. All my articles and study notes were recorded in Chinese, so there is currently no English version of the historical blog.</p>\n<p>But it's a milestone! From now on, I will write in bilingual and update simultaneously!</p>\n<p>If you want to view my historical articles now, welcome to the <a href=\"/zh/\" target=\"blank\">Chinese version</a>!</p>\n</div>\n",
      "date_published": "2023-06-20T00:00:00.000Z",
      "date_modified": "2023-06-30T07:42:58.000Z",
      "authors": [],
      "tags": []
    }
  ]
}