const t=JSON.parse('{"key":"v-c61e6ace","path":"/zh/python/functional-programming/return-function.html","title":"返回函数","lang":"zh-CN","frontmatter":{"title":"返回函数","icon":"return","time":"2020-6-7","category":"Python","tag":"Python","description":"函数作为返回值 高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。 我们来实现一个可变参数的求和。通常情况下，求和的函数是这样定义的: 但是，如果不需要立刻求和，而是在后面的代码中，根据需要再计算怎么办？可以不返回求和的结果，而是返回求和的函数: 当我们调用 lazy_sum()时，返回的并不是求和结果，而是求和函数: 调用函数 f 时，...","head":[["meta",{"property":"og:url","content":"https://harryxiong24.github.io/zh/python/functional-programming/return-function.html"}],["meta",{"property":"og:site_name","content":"Harry Xiong"}],["meta",{"property":"og:title","content":"返回函数"}],["meta",{"property":"og:description","content":"函数作为返回值 高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。 我们来实现一个可变参数的求和。通常情况下，求和的函数是这样定义的: 但是，如果不需要立刻求和，而是在后面的代码中，根据需要再计算怎么办？可以不返回求和的结果，而是返回求和的函数: 当我们调用 lazy_sum()时，返回的并不是求和结果，而是求和函数: 调用函数 f 时，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Harry Xiong"}],["meta",{"property":"article:tag","content":"Python"}],["meta",{"property":"article:published_time","content":"2020-06-06T16:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"返回函数\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-06T16:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Harry Xiong\\",\\"url\\":\\"https://harryxiong24.github.io\\"}]}"]]},"headers":[{"level":2,"title":"函数作为返回值","slug":"函数作为返回值","link":"#函数作为返回值","children":[]},{"level":2,"title":"闭包","slug":"闭包","link":"#闭包","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.93,"words":879},"filePathRelative":"zh/python/functional-programming/return-function.md","excerpt":"","autoDesc":true}');export{t as data};
