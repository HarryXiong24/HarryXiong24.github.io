import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as t,a,b as p,e as n}from"./app-f601f3f8.js";const o={},c=n('<h2 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式" aria-hidden="true">#</a> 正则表达式</h2><p><strong>正则表达式用于定义一些字符串的规则,计算机可以根据正则表达式，来检查一个字符串是否符合规则,获取字符串中符合规则的内容</strong></p><p><strong>基本概念</strong></p><ul><li><p>正则表达式是由一个字符序列形成的搜索模式</p></li><li><p>当在文本中搜索数据时，可以用搜索模式来描述要查询的内容</p></li><li><p>正则表达式可以是一个简单的字符，或一个更复杂的模式</p></li><li><p>正则表达式可用于所有文本搜索和文本替换的操作</p></li></ul><h3 id="_13-1-创建正则表达式对象" tabindex="-1"><a class="header-anchor" href="#_13-1-创建正则表达式对象" aria-hidden="true">#</a> 13.1 创建正则表达式对象</h3><p><strong>正则表达式实质上也是一个对象</strong></p>',6),r=n(`<li><p>构造函数创建正则表达式对象</p><p>语法:var 变量=new RegExp(&quot;正则表达式&quot;,&quot;匹配模式&quot;)</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以不传入匹配模式</span>
</code></pre></div><p>正则表达式对象可以使用test()方法可以用来检查一个字符串是否符合正则表达式的规则,如果符合返回true，否则返回false</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str1<span class="token operator">=</span><span class="token string">&quot;A&quot;</span>；
<span class="token keyword">var</span> result<span class="token operator">=</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result<span class="token operator">=</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
<span class="token comment">//这种正则表达式可以检查一个字符串中是否含有a，严格区分大小写，如果不区分大小写可以传入第二个参数</span>
</code></pre></div><p>匹配模式</p><p>正则表达式中有三种匹配模式</p></li><li><ul><li>i 忽略大小写匹配</li></ul></li><li><ul><li>g 全局匹配(查找所有匹配而非在找到第一个匹配后停止)</li></ul></li>`,3),l=a("p",null,"m 多行匹配,作用是修改",-1),u=a("p",null,"和$在正则表达式中的作用,让它们分别表示行首和行尾,在默认情况下,一个字符串无论是否换行只有一个开始",-1),i={class:"MathJax",jax:"SVG",style:{position:"relative"}},d={style:{"vertical-align":"-0.452ex"},xmlns:"http://www.w3.org/2000/svg",width:"42.261ex",height:"2.474ex",role:"img",focusable:"false",viewBox:"0 -893.3 18679.4 1093.3","aria-hidden":"true"},k=n('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(444.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">如</text></g><g data-mml-node="mi" transform="translate(1444.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">果</text></g><g data-mml-node="mi" transform="translate(2444.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">采</text></g><g data-mml-node="mi" transform="translate(3444.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">用</text></g><g data-mml-node="mi" transform="translate(4444.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">多</text></g><g data-mml-node="mi" transform="translate(5444.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">行</text></g><g data-mml-node="mi" transform="translate(6444.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">匹</text></g><g data-mml-node="mi" transform="translate(7444.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">配</text></g><g data-mml-node="mo" transform="translate(8444.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(8889.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">那</text></g><g data-mml-node="mi" transform="translate(9889.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">么</text></g><g data-mml-node="mi" transform="translate(10889.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">每</text></g><g data-mml-node="mi" transform="translate(11889.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">一</text></g><g data-mml-node="mi" transform="translate(12889.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">行</text></g><g data-mml-node="mi" transform="translate(13889.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">都</text></g><g data-mml-node="mi" transform="translate(14889.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">有</text></g><g data-mml-node="mi" transform="translate(15889.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">一</text></g><g data-mml-node="msup" transform="translate(16889.3,0)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">个</text></g><g data-mml-node="mi" transform="translate(1033,363) scale(0.707)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">和</text></g></g></g></g>',1),g=[k],m=a("mjx-assistive-mml",{unselectable:"on",display:"inline"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("mo",null,","),a("mi",{mathvariant:"normal"},"如"),a("mi",{mathvariant:"normal"},"果"),a("mi",{mathvariant:"normal"},"采"),a("mi",{mathvariant:"normal"},"用"),a("mi",{mathvariant:"normal"},"多"),a("mi",{mathvariant:"normal"},"行"),a("mi",{mathvariant:"normal"},"匹"),a("mi",{mathvariant:"normal"},"配"),a("mo",null,","),a("mi",{mathvariant:"normal"},"那"),a("mi",{mathvariant:"normal"},"么"),a("mi",{mathvariant:"normal"},"每"),a("mi",{mathvariant:"normal"},"一"),a("mi",{mathvariant:"normal"},"行"),a("mi",{mathvariant:"normal"},"都"),a("mi",{mathvariant:"normal"},"有"),a("mi",{mathvariant:"normal"},"一"),a("msup",null,[a("mi",{mathvariant:"normal"},"个"),a("mi",{mathvariant:"normal"},"和")])])],-1),x=n(`<p>注:三种匹配模式可以同时使用,写法与顺序无关</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;i&quot;</span><span class="token punctuation">)</span><span class="token comment">//不区分大小写a</span>
<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str1<span class="token operator">=</span><span class="token string">&quot;A&quot;</span>；
<span class="token keyword">var</span> result<span class="token operator">=</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result<span class="token operator">=</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
</code></pre></div>`,2),f=n(`<li><p>使用字面量创建正则表达式</p><p>语法:var 变量=/正则表达式/匹配模式</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">;</span>
<span class="token comment">//多个匹配模式</span>
<span class="token keyword">var</span> reg2<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">;</span>
</code></pre></div></li>`,1),v=n(`<p><strong>构造函数与创建字面量函数的区别</strong></p><ul><li><p>使用字面量的方式创建更加简单</p></li><li><p>使用构造函数创建更加灵活</p></li></ul><h3 id="_13-2-正则符号" tabindex="-1"><a class="header-anchor" href="#_13-2-正则符号" aria-hidden="true">#</a> 13.2 正则符号</h3><p>以下参考自w3cschool</p><ul><li><p>方括号,</p><p>用于查找某个范围内的字符</p><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>[abc]</td><td>查找方括号之间的任何字符。</td></tr><tr><td>[^abc]</td><td>查找任何不在方括号之间的字符。,只要一个字符串中有除了abc以外的字母就会返回true</td></tr><tr><td>[0-9]</td><td>查找任何从 0 至 9 的数字。</td></tr><tr><td>[a-z]</td><td>查找任何从小写 a 到小写 z 的字符。</td></tr><tr><td>[A-Z]</td><td>查找任何从大写 A 到大写 Z 的字符。</td></tr><tr><td>[A-z]</td><td>查找任何从大写 A 到小写 z 的字符。</td></tr><tr><td>[adgk]</td><td>查找给定集合内的任何字符。</td></tr><tr><td>[^adgk]</td><td>查找给定集合外的任何字符。</td></tr><tr><td>(red|blue|green)</td><td>查找任何指定的选项。</td></tr></tbody></table><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> reg1<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ab</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">;</span> <span class="token comment">//检验一个字符串中是否有ab(整体)</span>
<span class="token keyword">var</span> reg2<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a|b</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">//检查一个字符串中是否有a或b</span>
<span class="token keyword">var</span> reg3<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a|b|c</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">//检查一个字符串中是否有a或b或c</span>
<span class="token keyword">var</span> reg4<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[ab]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>  <span class="token comment">//[]里面也是或的关系[ab]===a|b</span>
<span class="token keyword">var</span> reg5<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a[bde]c</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">//查一个字符串中是否还有abc或adc或aec(整体)</span>
</code></pre></div></li><li><p>元字符，是拥有特殊含义的字符</p><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td>.</td><td>查找单个字符，除了换行和行结束符。</td></tr><tr><td>\\w</td><td>查找单词字符。</td></tr><tr><td>\\W</td><td>查找非单词字符。</td></tr><tr><td>\\d</td><td>查找数字。</td></tr><tr><td>\\D</td><td>查找非数字字符。</td></tr><tr><td>\\s</td><td>查找空白字符。</td></tr><tr><td>\\S</td><td>查找非空白字符。</td></tr><tr><td>\\b</td><td>匹配单词边界。一个单词旁边必须是有空白字符作为边界。比如判断是否含有child单词,用/\\bchild\\b/ 判断是否有一个独立的单词</td></tr><tr><td>\\B</td><td>匹配非单词边界。单词左右两边没有空白字符</td></tr><tr><td>\\0</td><td>查找 NULL 字符。</td></tr><tr><td>\\n</td><td>查找换行符。</td></tr><tr><td>\\f</td><td>查找换页符。</td></tr><tr><td>\\r</td><td>查找回车符。</td></tr><tr><td>\\t</td><td>查找制表符。</td></tr><tr><td>\\v</td><td>查找垂直制表符。</td></tr><tr><td>\\xxx</td><td>查找以八进制数 xxx 规定的字符。</td></tr><tr><td>\\xdd</td><td>查找以十六进制数 dd 规定的字符。</td></tr><tr><td>\\uxxxx</td><td>查找以十六进制数 xxxx 规定的 Unicode 字符。</td></tr></tbody></table><p>注意:</p></li><li><ul><li><strong>在正则表达式中\\表示转义字符，但是js中任何地方\\都是转义字符，所以要验证\\也必须输入两个(字面量中)</strong> **如:**正则表达式.表示任意字符/./只会表示是否有任意字符，如果要判断有没有.(点这个符号),需要用/\\ ./来表示</li></ul></li><li><ul><li><strong>如果用构造函数的方法，由于它的参数是一个字符串，而\\是字符串中的转义字符，如果要使用\\则需要使用\\ \\代替(相当于用了三个\\ )，这样相当于把他们先化为字面量，再自变量转换，而因为\\ .其实就是.，所以没有作用</strong></li></ul></li><li><p>量词,通过量词可以设置一个内容出现的次数用{}里面写需要的数量,量词只对它前边的一个内容起作用，</p><table><thead><tr><th>量词</th><th>描述</th></tr></thead><tbody><tr><td>n+</td><td>匹配任何包含至少一个 n 的字符串。例如，/a+/ 匹配 &quot;candy&quot; 中的 &quot;a&quot;，&quot;caaaaaaandy&quot; 中所有的 &quot;a&quot;。</td></tr><tr><td>n*</td><td>匹配任何包含零个或多个 n 的字符串。例如，/bo*/ 匹配 &quot;A ghost booooed&quot; 中的 &quot;boooo&quot;，&quot;A bird warbled&quot; 中的 &quot;b&quot;，但是不匹配 &quot;A goat grunted&quot;。</td></tr><tr><td>n?</td><td>匹配任何包含零个或一个 n 的字符串。例如，/e?le?/ 匹配 &quot;angel&quot; 中的 &quot;el&quot;，&quot;angle&quot; 中的 &quot;le&quot;。</td></tr><tr><td>n{X}</td><td>匹配包含 X 个 n 的序列的字符串。例如，/a{2}/ 不匹配 &quot;candy,&quot; 中的 &quot;a&quot;，但是匹配 &quot;caandy,&quot; 中的两个 &quot;a&quot;，且匹配 &quot;caaandy.&quot; 中的前两个 &quot;a&quot;。</td></tr><tr><td>n{X,}</td><td>X 是一个正整数。前面的模式 n 连续出现至少 X 次时匹配。例如，/a{2,}/ 不匹配 &quot;candy&quot; 中的 &quot;a&quot;，但是匹配 &quot;caandy&quot; 和 &quot;caaaaaaandy.&quot; 中所有的 &quot;a&quot;。</td></tr><tr><td>n{X,Y}</td><td>X 和 Y 为正整数。前面的模式 n 连续出现至少 X 次，至多 Y 次时匹配。例如，/a{1,3}/ 不匹配 &quot;cndy&quot;，匹配 &quot;candy,&quot; 中的 &quot;a&quot;，&quot;caandy,&quot; 中的两个 &quot;a&quot;，匹配 &quot;caaaaaaandy&quot; 中的前面三个 &quot;a&quot;。注意，当匹配 &quot;caaaaaaandy&quot; 时，即使原始字符串拥有更多的 &quot;a&quot;，匹配项也是 &quot;aaa&quot;。</td></tr><tr><td>n$</td><td>匹配任何结尾为 n 的字符串。</td></tr><tr><td>^n</td><td>匹配任何开头为 n 的字符串。注意与[^]作对比</td></tr><tr><td>?=n</td><td>匹配任何其后紧接指定字符串 n 的字符串。</td></tr><tr><td>?!n</td><td>匹配任何其后没有紧接指定字符串 n 的字符串。</td></tr></tbody></table><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a{3}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">//表示aaa,但ab{3}只表示abbb,如果要ab一起出现3次，需要/(ab){3}/</span>


<span class="token comment">/*注意：这里面只要就会true正确执行，比如b{3}但是bbbb依然是正确的，因为包含了3个b*/</span>
</code></pre></div><p>注:在正则表达式中同时使用^ $则要求字符串必须完全符合正则表达式</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> reg1<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^a$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">//表示既要有a开头同时这个开头的a还必须是结尾</span>
<span class="token comment">/*上式说明只能有一个a，aaa这种是不行的，因为结尾的a不是开头的a*/</span>

<span class="token keyword">var</span> reg2<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^a|a$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">//表示以a开头或者以a结尾</span>

<span class="token keyword">var</span> reg3<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^b([0-9A-z]){0,}b$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">//表示以b开头同时以b结尾同时中间可以跟任意数字或者字母</span>
</code></pre></div></li><li><p>子集,用圆括号()包起来的属于一个整体,叫做一个子集</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//通过子集可以很轻松的实现顺序互换</span>
<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">;</span><span class="token comment">//要改成&quot;cdab&quot;</span>
<span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token operator">/</span><span class="token punctuation">(</span>ab<span class="token punctuation">)</span><span class="token punctuation">(</span>cd<span class="token punctuation">)</span><span class="token operator">/</span>g；
<span class="token keyword">var</span> result<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token string">&quot;$2$1&quot;</span><span class="token punctuation">)</span>；
<span class="token comment">//此时的$1和$2有特别的含有,$1代表第一个子集,$2代表第二个子集</span>
</code></pre></div><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">&quot;111223333&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(</span><span class="token regex-delimiter">/</span><span class="token regex-flags">d</span></span><span class="token punctuation">)</span>\\<span class="token number">1</span><span class="token operator">+</span><span class="token operator">/</span>g<span class="token punctuation">;</span><span class="token comment">//所有相同数字分为一组</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//[&quot;111&quot;,&quot;22&quot;,&quot;3333&quot;]</span>
</code></pre></div></li></ul><h3 id="_13-3-正则断言" tabindex="-1"><a class="header-anchor" href="#_13-3-正则断言" aria-hidden="true">#</a> 13.3 正则断言</h3><p><strong>所谓断言，就是指明某个字符串前边或者后边，将会出现满足某种规律的字符串</strong></p><p>在将断言前.先将子集的捕获与捕获,一般的子集通过()括住都会被捕获,这时可以通过$1等来使用被捕获的子集,而如果不想要子集被捕获,只是用做一个匹配模式,就可以让子集不被捕获到,一般是通过(?:)来括住一个子集</p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>(?:X)</td><td>不捕获匹配,不能通过$符号进行捕获到该子集,包括下面的所有都是捕获匹配。</td></tr><tr><td>(?=X )</td><td>零宽度正先行断言。仅当子表达式 X 在 此位置的右侧匹配时才继续匹配。例如，\\w+(?=\\d) 与后跟数字的单词匹配，而不与该数字匹配。此构造不会回溯。</td></tr><tr><td>(?!X)</td><td>零宽度负先行断言。仅当子表达式 X 不在 此位置的右侧匹配时才继续匹配。例如，例如，\\w+(?!\\d) 与后不跟数字的单词匹配，而不与该数字匹配 。</td></tr><tr><td>(?&lt;=X)</td><td>零宽度正后发断言。仅当子表达式 X 在 此位置的左侧匹配时才继续匹配。例如，(?&lt;=19)99 与跟在 19 后面的 99 的实例匹配。此构造不会回溯。</td></tr><tr><td>(?&lt;!X)</td><td>零宽度负后发断言。仅当子表达式 X 不在此位置的左侧匹配时才继续匹配。例如，(?&lt;!19)99 与不跟在 19 后面的 99 的实例匹配</td></tr></tbody></table><p><strong>例子:是否为浮点数</strong></p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isFloat</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    number<span class="token operator">=</span>number<span class="token operator">+</span><span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^-?\\d+\\.\\d+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">//\\.连在一起表示就是一个(.),没有其他意思</span>
    <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isFloat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isFloat</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isFloat</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false，false是由于JS内部的储存机制,当浮点数后全是0时就被看成一个整数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isFloat</span><span class="token punctuation">(</span><span class="token string">&quot;1.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true,这时因为传入的就是一个1.0的字符串,所以为true</span>
</code></pre></div><p><strong>例子:手机号规则</strong></p><ul><li><p>以1开头</p></li><li><p>第二位3-9任意数字</p></li><li><p>三位以后任意数字9位</p></li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^1[3-9][0-9]{9}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
</code></pre></div><p><strong>例子:邮箱格式</strong></p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\w{3,}(.\\w+)*@[A-z0-9]+(.[A-z]{2,5}{1,2}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
</code></pre></div><h3 id="_13-4-正则表达式和字符串相关的方法" tabindex="-1"><a class="header-anchor" href="#_13-4-正则表达式和字符串相关的方法" aria-hidden="true">#</a> 13.4 正则表达式和字符串相关的方法</h3><p><strong>正则表达式有两种用法，一种是调用自身的方法(如上面的test方法)，一种是作为参数进行传递</strong></p><h4 id="_13-4-1-split方法" tabindex="-1"><a class="header-anchor" href="#_13-4-1-split方法" aria-hidden="true">#</a> 13.4.1 split方法</h4><p><strong>split()方法中可以传递一个正则表达式作为参数来把一个字符串分割成字符串数组</strong></p><p><strong>注意:该方法即使不指定全局匹配的匹配模式，也会在全局进行拆分</strong></p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token string">&quot;1a2b3c4d5e6f7g&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据任意字母将字符串拆分</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1,2,3,4,5,6,7]</span>
</code></pre></div><h4 id="_13-4-2-search方法" tabindex="-1"><a class="header-anchor" href="#_13-4-2-search方法" aria-hidden="true">#</a> 13.4.2 search方法</h4><p><strong>search()可以搜索字符串中是否含有指定的内容</strong>,这个方法和indexOf()方法类似，如果搜索到了指定内容则会返回第一次出现的索引，如果没有搜索到则会返回-1,不同的是<strong>indexOf()方法并不支持正则表达式</strong></p><p><strong>注意:该方法即使设置全局匹配模式也只会查找出现的第一个结果</strong></p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//搜索字符串中是否有abc或aec或afc</span>
<span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">&quot;abcdef&quot;</span>
<span class="token keyword">var</span> result<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a[bef]c</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span>
</code></pre></div><h4 id="_13-4-3-match方法" tabindex="-1"><a class="header-anchor" href="#_13-4-3-match方法" aria-hidden="true">#</a> 13.4.3 match方法</h4><p>**match()方法用做从一个字符串中将符合条件的内容提取出来，**可以用正则表达作为参数，默认情况下match只会找到第一个符合要求的内容，找到以后就会停止检索，可以设置正则表达式为g(全局匹配模式)来匹配所有的内容</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">&quot;1a2b3c4d5e6f7A8B9C&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这样就能把所有的字母都提取出来</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[a,b,c,d,e,f,A,B,C]</span>

<span class="token comment">/*
match()会将匹配到的内容封装到一个数组中返回，即使只查询到一个结果，所以用result[0]等索引能查询到他们
如果没有匹配到就会返回null，适合用作if等判断条件
*/</span>
</code></pre></div><h4 id="_13-4-4-replace方法" tabindex="-1"><a class="header-anchor" href="#_13-4-4-replace方法" aria-hidden="true">#</a> 13.4.4 replace方法</h4><p><strong>replace()方法可以将字符串中指定内容替换为新的内容</strong></p><p><strong>该方法有两个参数,第一个是被替换的内容,第二个参数是要替换的新的内容</strong>,默认只会替换查找到的第一个结果，所以可以加g进行全局匹配</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">&quot;1a2b3c4d5e&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result1<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span><span class="token string">&quot;@-@&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把所有字母都替换为@-@</span>
<span class="token keyword">var</span> result2<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去除所有字母(把所有字母都替换为空串)</span>

<span class="token keyword">var</span> result3<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s*|\\s*$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gm</span></span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去除开头或结尾的空格</span>
</code></pre></div><p><strong>不用replace方法实现替换字符串的内容</strong></p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//运用数组的join方法和字符串的spilt方法</span>
<span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token string">&quot;1a2a3a4a5a&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">spilt</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&quot;1b2b3b4b5b&quot;</span>
</code></pre></div>`,35);function h(q,b){return s(),t("div",null,[c,a("ul",null,[r,a("li",null,[a("ul",null,[a("li",null,[l,u,a("p",null,[p("和结尾"),a("mjx-container",i,[(s(),t("svg",d,g)),m])]),x])])]),f]),v])}const j=e(o,[["render",h],["__file","js13.html.vue"]]);export{j as default};
