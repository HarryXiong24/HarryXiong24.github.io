import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-a63d3fdb.js";const p={},e=t(`<h2 id="vue-实例对象" tabindex="-1"><a class="header-anchor" href="#vue-实例对象" aria-hidden="true">#</a> Vue 实例对象</h2><h3 id="_2-1-创建并绑定-vue-对象" tabindex="-1"><a class="header-anchor" href="#_2-1-创建并绑定-vue-对象" aria-hidden="true">#</a> 2.1 创建并绑定 Vue 对象</h3><p><strong>Vue 也是一个构造函数,通过 new Vue()可以创建一个 Vue 对象,通过 Vue 对象进行对 DOM 元素以及内部的子孙元素的操作</strong></p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>div<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    {{msg}}<span class="token comment">&lt;!--显示123--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&quot;#div&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">/*
    在Vue中通过el属性来绑定一个DOM元素,从而让该DOM元素以及内部都绑定Vue的相关操作,一般是通过ID进行查找,因为这样才能够精确绑定
    */</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token comment">//data属性中包含着在el中使用的使用的变量或属性</span>
        <span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token number">123</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//也可以使用函数形式的</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">{</span>
        <span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token number">123</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">//methods属性包含着需要使用的方法</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注:在实例内部使用定义的属性或方法时不能直接使用,必须通过 this 来指定需要用的属性</strong></p><h3 id="_2-2-vue-实例中的参数与选项" tabindex="-1"><a class="header-anchor" href="#_2-2-vue-实例中的参数与选项" aria-hidden="true">#</a> 2.2 vue 实例中的参数与选项</h3><p><strong>el:&quot;#id&quot;, //DOM 成员（1/3）</strong></p><p>提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标。</p><p><strong>template:&quot;<code>&lt;tag&gt;&lt;/tag&gt;</code>&quot;, //DOM 成员（2/3）</strong></p><p>一个字符串模板作为 Vue 实例的标识使用。模板将会 替换 挂载的元素。挂载元素的内容都将被忽略，除非模板的内容有分发 slot</p><p><strong>render: (h)=&gt;{h(App)}, //DOM 成员（3/3）</strong></p><p>字符串模板的代替方案，允许你发挥 JavaScript 最大的编程能力。</p><div class="language-vue" data-ext="vue"><pre class="language-vue"><code>// 原理 render: (h) =&gt; { return <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>APP</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>APP</span><span class="token punctuation">&gt;</span></span>

} // 可以代替components和template
</code></pre></div><p><strong>data //数据成员（1/6）</strong></p><p>data():{ return{ } },</p><p>Vue 实例的数据对象。Vue 将会递归将 data 的属性转换为 getter/setter，从而让 data 的属性能够响应数据变化</p><p><strong>methods //数据成员（2/6）</strong></p><p>methods:{ func(){ } }</p><p>methods 将被混入到 Vue 实例中，可以直接通过 VM 实例访问这些方法，或者在指令表达式中使用</p><p>方法中的 this 自动绑定为 Vue 实例</p><p><strong>watch //数据成员（3/6）</strong></p><p>watch:{ key:value $route:function (newValue, oldValue) { //监控路由 } }</p><p>整个为一个对象，键是需要观察的表达式，值是对应回调函数</p><p><strong>computed //数据成员（4/6）</strong></p><p>computed:{ getTotalCount(){ const totalCount=0; return totalCount; } },</p><p>vue 的计算属性，将被混入到 Vue 实例中。所有 getter 和 setter 的 this 上下文自动地绑定为 Vue 实例</p><p><strong>props //数据成员（5/6）</strong></p><p>props:[&#39;counts&#39;,&#39;ids&#39;],</p><p>用于父子组件的 eventbus 传值，是数组或对象，props 的成员是子组件接收的来自父组件的数据</p><p><strong>propsData //数据成员（6/6）</strong></p><p>创建实例时传递 props。主要作用是方便测试。基本不使用。</p><p><strong>filters //资源（1/3）</strong></p><p>filters(&#39;filterName&#39;,(input,function(){ return newvalue }))</p><p>包含 Vue 实例可用过滤器的哈希表。</p><p><strong>directives //资源（2/3）</strong></p><p>包含 Vue 实例可用指令的哈希表。</p><p><strong>components //资源（3/3）</strong></p><p>（即该组件的子实例）这里是包含 Vue 实例可用组件的哈希表。</p><p><strong>name //杂项（1/6）</strong></p><p>允许组件模板递归地调用自身。注意，组件在全局用 Vue.component() 注册时，全局 ID 自动作为组件的 name。</p><p><strong>parent //杂项（2/6）</strong></p><p>指定已创建的实例之父实例，在两者之间建立父子关系。子实例可以用 this.$parent 访问父实例，子实例被推入父实例的 $children 数组中。</p><p><strong>mixins //杂项（3/6）</strong></p><p>mixins 选项接受一个混合对象的数组。Mixin 钩子按照传入顺序依次调用,并在调用组件自身的钩子之前被调用。</p><p><strong>extends //杂项（4/6）</strong></p><p>允许声明扩展另一个组件。这主要是为了便于扩展单文件组件。这和 mixins 类似，区别在于，组件自身的选项会比要扩展的源组件具有更高的优先级。</p><p><strong>delimiters //杂项（5/6）</strong></p><p>改变纯文本插入分隔符。</p><p><strong>functional //杂项（6/6）</strong></p><p>使组件无状态（没有 data ）和无实例（没有 this 上下文）。他们用一个简单的 render 函数返回虚拟节点使他们更容易渲染。</p><h3 id="_2-3-常用指令实例" tabindex="-1"><a class="header-anchor" href="#_2-3-常用指令实例" aria-hidden="true">#</a> 2.3 常用指令实例</h3><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>startVue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token comment">&lt;!-- {{}}双大括号表达式，里面是js代码 --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
      <span class="token comment">&lt;!-- 相当于innerText --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>str<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
      <span class="token comment">&lt;!-- 相当于innerHTML --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>str<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
      <span class="token comment">&lt;!-- 强制绑定事件, 一般用于用于响应式地更新HTML attribute, 简写方式:
            从 2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数
            &lt;a v-bind:[attributeName]=&quot;url&quot;&gt; ... &lt;/a&gt;
            这里的 attributeName 会被作为一个 JavaScript 表达式进行动态求值,求得的值将会作为最终的参数来使用。
            例如，如果你的 Vue 实例有一个 data 属性 attributeName，其值为 &quot;href&quot;
            那么这个绑定将等价于 v-bind:href
        --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Baidu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
      <span class="token comment">&lt;!-- 绑定事件监听,监听 DOM 事件, 简写方式@ --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
      <span class="token comment">&lt;!-- 双向绑定事件,动态实时更新里面的内容 --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>input<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Please input<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ input }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./vue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">//要挂载的位置</span>
      <span class="token comment">//在Vue中通过el属性来绑定一个DOM元素,从而让该DOM元素以及内部都绑定Vue的相关操作</span>
      <span class="token comment">//一般是通过ID进行查找,因为这样才能够精确绑定</span>
      <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span> <span class="token comment">// data属性中包含着在el中使用的使用的变量或属性</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&quot;xhw&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">str</span><span class="token operator">:</span> <span class="token string">&#39;&lt;a href=&quot;#&quot;&gt;XHW&lt;/a&gt;&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;https://www.baidu.com&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
      <span class="token doc-comment comment">/**
       * 也可以写成(以组件形式里必须写成这个)
       * data() <span class="token punctuation">{</span>
       *     return <span class="token punctuation">{</span>
       *
       * <span class="token punctuation">}</span>
       * <span class="token punctuation">}</span>,
       */</span><span class="token punctuation">,</span> <span class="token comment">// methods属性包含着需要使用的方法</span>
      <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-vm-mount" tabindex="-1"><a class="header-anchor" href="#_2-4-vm-mount" aria-hidden="true">#</a> 2.4 vm.$mount</h3><p>如果 Vue 实例在实例化时没有收到 el 选项，则它处于“未挂载”状态，没有关联的 DOM 元素。可以使用 vm.$mount() 手动地挂载一个未挂载的实例</p><p>**注意:**这个方法返回实例自身,因而可以链式调用其它实例方法</p><div class="language-vue" data-ext="vue"><pre class="language-vue"><code>var MyComponent = Vue.extend({ template: &#39;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>Hello!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
&#39; }) // 创建并挂载到 #app (会替换 #app) new MyComponent().$mount(&#39;#app&#39;) // 同上
new MyComponent({ el: &#39;#app&#39; }) // 或者，在文档之外渲染并且随后挂载 var
component = new MyComponent().$mount()
document.getElementById(&#39;app&#39;).appendChild(component.$el)
</code></pre></div>`,56),o=[e];function c(l,u){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","vue2.html.vue"]]);export{k as default};
